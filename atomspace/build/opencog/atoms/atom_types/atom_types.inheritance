/* File automatically generated by the macro OPENCOG_CXX_ATOMTYPES. Do not edit */

/* Touch the server before adding types. */
opencog::nameserver();
opencog::TOP_TYPE = opencog::nameserver().declType(opencog::TOP_TYPE, "TopType", "TopType");
opencog::VALUE = opencog::nameserver().declType(opencog::TOP_TYPE, "Value", "Value");
opencog::VOID_VALUE = opencog::nameserver().declType(opencog::VALUE     , "VoidValue", "VoidValue");
opencog::BOOL_VALUE = opencog::nameserver().declType(opencog::VALUE     , "BoolValue", "BoolValue");
opencog::FLOAT_VALUE = opencog::nameserver().declType(opencog::VALUE    , "FloatValue", "FloatValue");
opencog::STRING_VALUE = opencog::nameserver().declType(opencog::VALUE   , "StringValue", "StringValue");
opencog::LINK_VALUE = opencog::nameserver().declType(opencog::VALUE     , "LinkValue", "LinkValue");
opencog::VALUATION = opencog::nameserver().declType(opencog::VALUE      , "Valuation", "Valuation");
opencog::LIST_VALUE = opencog::nameserver().declType(opencog::VALUE     , "ListValue", "ListValue");
opencog::STREAM_VALUE = opencog::nameserver().declType(opencog::FLOAT_VALUE, "StreamValue", "StreamValue");
opencog::RANDOM_STREAM = opencog::nameserver().declType(opencog::STREAM_VALUE, "RandomStream", "RandomStream");
opencog::FORMULA_STREAM = opencog::nameserver().declType(opencog::STREAM_VALUE, "FormulaStream", "FormulaStream");
opencog::FORMULA_STREAM = opencog::nameserver().declType(opencog::LIST_VALUE, "FormulaStream", "FormulaStream");
opencog::LINK_STREAM_VALUE = opencog::nameserver().declType(opencog::LINK_VALUE, "LinkStreamValue", "LinkStreamValue");
opencog::QUEUE_VALUE = opencog::nameserver().declType(opencog::LINK_STREAM_VALUE, "QueueValue", "QueueValue");
opencog::FUTURE_STREAM = opencog::nameserver().declType(opencog::LINK_STREAM_VALUE, "FutureStream", "FutureStream");
opencog::FUTURE_STREAM = opencog::nameserver().declType(opencog::LIST_VALUE, "FutureStream", "FutureStream");
opencog::TRUTH_VALUE = opencog::nameserver().declType(opencog::FLOAT_VALUE, "TruthValue", "TruthValue");
opencog::SIMPLE_TRUTH_VALUE = opencog::nameserver().declType(opencog::TRUTH_VALUE, "SimpleTruthValue", "SimpleTruthValue");
opencog::COUNT_TRUTH_VALUE = opencog::nameserver().declType(opencog::TRUTH_VALUE, "CountTruthValue", "CountTruthValue");
opencog::INDEFINITE_TRUTH_VALUE = opencog::nameserver().declType(opencog::TRUTH_VALUE, "IndefiniteTruthValue", "IndefiniteTruthValue");
opencog::FUZZY_TRUTH_VALUE = opencog::nameserver().declType(opencog::TRUTH_VALUE, "FuzzyTruthValue", "FuzzyTruthValue");
opencog::PROBABILISTIC_TRUTH_VALUE = opencog::nameserver().declType(opencog::TRUTH_VALUE, "ProbabilisticTruthValue", "ProbabilisticTruthValue");
opencog::EVIDENCE_COUNT_TRUTH_VALUE = opencog::nameserver().declType(opencog::TRUTH_VALUE, "EvidenceCountTruthValue", "EvidenceCountTruthValue");
opencog::FORMULA_TRUTH_VALUE = opencog::nameserver().declType(opencog::SIMPLE_TRUTH_VALUE, "FormulaTruthValue", "FormulaTruthValue");
opencog::FORMULA_TRUTH_VALUE = opencog::nameserver().declType(opencog::FORMULA_STREAM, "FormulaTruthValue", "FormulaTruthValue");
opencog::ATOM = opencog::nameserver().declType(opencog::VALUE, "Atom", "Atom");
opencog::FRAME = opencog::nameserver().declType(opencog::ATOM, "Frame", "Frame");
opencog::ATOM_SPACE = opencog::nameserver().declType(opencog::FRAME, "AtomSpace", "AtomSpace");
opencog::NODE = opencog::nameserver().declType(opencog::ATOM, "Node", "");
opencog::LINK = opencog::nameserver().declType(opencog::ATOM, "Link", "");
opencog::CONCEPT_NODE = opencog::nameserver().declType(opencog::NODE, "ConceptNode", "Concept");
opencog::NUMBER_NODE = opencog::nameserver().declType(opencog::NODE, "NumberNode", "Number");
opencog::ORDERED_LINK = opencog::nameserver().declType(opencog::LINK, "OrderedLink", "Ordered");
opencog::UNORDERED_LINK = opencog::nameserver().declType(opencog::LINK, "UnorderedLink", "Unordered");
opencog::PREDICATE_NODE = opencog::nameserver().declType(opencog::NODE, "PredicateNode", "Predicate");
opencog::VALUABLE_LINK = opencog::nameserver().declType(opencog::LINK, "ValuableLink", "Valuable");
opencog::EVALUATABLE_LINK = opencog::nameserver().declType(opencog::VALUABLE_LINK, "EvaluatableLink", "Evaluatable");
opencog::EXECUTABLE_LINK = opencog::nameserver().declType(opencog::VALUABLE_LINK, "ExecutableLink", "Executable");
opencog::CRISP_INPUT_LINK = opencog::nameserver().declType(opencog::LINK, "CrispInputLink", "CrispInput");
opencog::CRISP_OUTPUT_LINK = opencog::nameserver().declType(opencog::EVALUATABLE_LINK, "CrispOutputLink", "CrispOutput");
opencog::BOOLEAN_INPUT_LINK = opencog::nameserver().declType(opencog::LINK, "BooleanInputLink", "BooleanInput");
opencog::BOOLEAN_OUTPUT_LINK = opencog::nameserver().declType(opencog::VALUABLE_LINK, "BooleanOutputLink", "BooleanOutput");
opencog::NUMERIC_INPUT_LINK = opencog::nameserver().declType(opencog::LINK, "NumericInputLink", "NumericInput");
opencog::NUMERIC_OUTPUT_LINK = opencog::nameserver().declType(opencog::VALUABLE_LINK, "NumericOutputLink", "NumericOutput");
opencog::TYPE_INPUT_LINK = opencog::nameserver().declType(opencog::LINK, "TypeInputLink", "TypeInput");
opencog::TYPE_OUTPUT_LINK = opencog::nameserver().declType(opencog::VALUABLE_LINK, "TypeOutputLink", "TypeOutput");
opencog::ALPHA_CONVERTIBLE_LINK = opencog::nameserver().declType(opencog::LINK, "AlphaConvertibleLink", "AlphaConvertible");
opencog::COLLECTION_LINK = opencog::nameserver().declType(opencog::LINK, "CollectionLink", "Collection");
opencog::LIST_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "ListLink", "List");
opencog::LIST_LINK = opencog::nameserver().declType(opencog::COLLECTION_LINK, "ListLink", "List");
opencog::SET_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "SetLink", "Set");
opencog::SET_LINK = opencog::nameserver().declType(opencog::COLLECTION_LINK, "SetLink", "Set");
opencog::UNION_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "UnionLink", "Union");
opencog::UNION_LINK = opencog::nameserver().declType(opencog::COLLECTION_LINK, "UnionLink", "Union");
opencog::INTERSECTION_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "IntersectionLink", "Intersection");
opencog::INTERSECTION_LINK = opencog::nameserver().declType(opencog::COLLECTION_LINK, "IntersectionLink", "Intersection");
opencog::COMPLEMENT_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "ComplementLink", "Complement");
opencog::COMPLEMENT_LINK = opencog::nameserver().declType(opencog::COLLECTION_LINK, "ComplementLink", "Complement");
opencog::SET_DIFFERENCE_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "SetDifferenceLink", "SetDifference");
opencog::SET_DIFFERENCE_LINK = opencog::nameserver().declType(opencog::COLLECTION_LINK, "SetDifferenceLink", "SetDifference");
opencog::MEMBER_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "MemberLink", "Member");
opencog::SUBSET_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "SubsetLink", "Subset");
opencog::CONTEXT_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "ContextLink", "Context");
opencog::TRUE_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "TrueLink", "True");
opencog::TRUE_LINK = opencog::nameserver().declType(opencog::CRISP_OUTPUT_LINK, "TrueLink", "True");
opencog::FALSE_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "FalseLink", "False");
opencog::FALSE_LINK = opencog::nameserver().declType(opencog::CRISP_OUTPUT_LINK, "FalseLink", "False");
opencog::AND_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "AndLink", "And");
opencog::AND_LINK = opencog::nameserver().declType(opencog::CRISP_OUTPUT_LINK, "AndLink", "And");
opencog::AND_LINK = opencog::nameserver().declType(opencog::CRISP_INPUT_LINK, "AndLink", "And");
opencog::OR_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "OrLink", "Or");
opencog::OR_LINK = opencog::nameserver().declType(opencog::CRISP_OUTPUT_LINK, "OrLink", "Or");
opencog::OR_LINK = opencog::nameserver().declType(opencog::CRISP_INPUT_LINK, "OrLink", "Or");
opencog::NOT_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "NotLink", "Not");
opencog::NOT_LINK = opencog::nameserver().declType(opencog::CRISP_OUTPUT_LINK, "NotLink", "Not");
opencog::NOT_LINK = opencog::nameserver().declType(opencog::CRISP_INPUT_LINK, "NotLink", "Not");
opencog::SEQUENTIAL_AND_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "SequentialAndLink", "SequentialAnd");
opencog::SEQUENTIAL_AND_LINK = opencog::nameserver().declType(opencog::CRISP_OUTPUT_LINK , "SequentialAndLink", "SequentialAnd");
opencog::SEQUENTIAL_OR_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "SequentialOrLink", "SequentialOr");
opencog::SEQUENTIAL_OR_LINK = opencog::nameserver().declType(opencog::CRISP_OUTPUT_LINK, "SequentialOrLink", "SequentialOr");
opencog::SEQUENTIAL_OR_LINK = opencog::nameserver().declType(opencog::CRISP_INPUT_LINK, "SequentialOrLink", "SequentialOr");
opencog::CHOICE_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "ChoiceLink", "Choice");
opencog::CHOICE_LINK = opencog::nameserver().declType(opencog::CRISP_OUTPUT_LINK, "ChoiceLink", "Choice");
opencog::PRESENT_LINK = opencog::nameserver().declType(opencog::SET_LINK, "PresentLink", "Present");
opencog::PRESENT_LINK = opencog::nameserver().declType(opencog::CRISP_OUTPUT_LINK, "PresentLink", "Present");
opencog::ABSENT_LINK = opencog::nameserver().declType(opencog::PRESENT_LINK, "AbsentLink", "Absent");
opencog::ALWAYS_LINK = opencog::nameserver().declType(opencog::PRESENT_LINK, "AlwaysLink", "Always");
opencog::CONTINUATION_LINK = opencog::nameserver().declType(opencog::EVALUATABLE_LINK, "ContinuationLink", "Continuation");
opencog::EDGE_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "EdgeLink", "Edge");
opencog::LEXICAL_NODE = opencog::nameserver().declType(opencog::PREDICATE_NODE, "LexicalNode", "Lexical");
opencog::ANY_NODE = opencog::nameserver().declType(opencog::NODE, "AnyNode", "Any");
opencog::CONNECTOR = opencog::nameserver().declType(opencog::ORDERED_LINK, "Connector", "Connector");
opencog::SEX_NODE = opencog::nameserver().declType(opencog::LEXICAL_NODE            , "SexNode", "Sex");
opencog::CONNECTOR_DIR_NODE = opencog::nameserver().declType(opencog::SEX_NODE , "ConnectorDir", "ConnectorDir");
opencog::BOND_NODE = opencog::nameserver().declType(opencog::LEXICAL_NODE           , "BondNode", "Bond");
opencog::CONNECTOR_SEQ = opencog::nameserver().declType(opencog::ORDERED_LINK       , "ConnectorSeq", "ConnectorSeq");
opencog::CONNECTOR_SET = opencog::nameserver().declType(opencog::UNORDERED_LINK     , "ConnectorSet", "ConnectorSet");
opencog::CONNECTOR_CHOICE = opencog::nameserver().declType(opencog::CHOICE_LINK     , "ConnectorChoice", "ConnectorChoice");
opencog::SECTION = opencog::nameserver().declType(opencog::ORDERED_LINK             , "Section", "Section");
opencog::SHAPE_LINK = opencog::nameserver().declType(opencog::CONNECTOR_SEQ, "ShapeLink", "Shape");
opencog::CROSS_SECTION = opencog::nameserver().declType(opencog::SECTION, "CrossSection", "CrossSection");
opencog::ITEM_NODE = opencog::nameserver().declType(opencog::LEXICAL_NODE, "ItemNode", "Item");
opencog::ITEM_CLASS_NODE = opencog::nameserver().declType(opencog::LEXICAL_NODE, "ItemClassNode", "ItemClass");
opencog::TAG_NODE = opencog::nameserver().declType(opencog::LEXICAL_NODE, "TagNode", "Tag");
opencog::TAG_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK , "TagLink", "Tag");
opencog::VARIABLE_NODE = opencog::nameserver().declType(opencog::ANY_NODE, "VariableNode", "Variable");
opencog::VARIABLE_LIST = opencog::nameserver().declType(opencog::CONNECTOR_SEQ, "VariableList", "VariableList");
opencog::VARIABLE_SET = opencog::nameserver().declType(opencog::CONNECTOR_SET, "VariableSet", "VariableSet");
opencog::GLOB_NODE = opencog::nameserver().declType(opencog::VARIABLE_NODE, "GlobNode", "Glob");
opencog::QUOTE_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "QuoteLink", "Quote");
opencog::UNQUOTE_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "UnquoteLink", "Unquote");
opencog::DONT_EXEC_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "DontExecLink", "DontExec");
opencog::DONT_EXEC_LINK = opencog::nameserver().declType(opencog::EXECUTABLE_LINK, "DontExecLink", "DontExec");
opencog::LOCAL_QUOTE_LINK = opencog::nameserver().declType(opencog::DONT_EXEC_LINK, "LocalQuoteLink", "LocalQuote");
opencog::REPLACEMENT_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "ReplacementLink", "Replacement");
opencog::FREE_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "FreeLink", "Free");
opencog::DELETE_LINK = opencog::nameserver().declType(opencog::FREE_LINK, "DeleteLink", "Delete");
opencog::UNIQUE_LINK = opencog::nameserver().declType(opencog::FREE_LINK, "UniqueLink", "Unique");
opencog::STATE_LINK = opencog::nameserver().declType(opencog::UNIQUE_LINK, "StateLink", "State");
opencog::DEFINE_LINK = opencog::nameserver().declType(opencog::UNIQUE_LINK, "DefineLink", "Define");
opencog::GRANT_LINK = opencog::nameserver().declType(opencog::UNIQUE_LINK, "GrantLink", "Grant");
opencog::SCOPE_LINK = opencog::nameserver().declType(opencog::SECTION, "ScopeLink", "Scope");
opencog::SCOPE_LINK = opencog::nameserver().declType(opencog::ALPHA_CONVERTIBLE_LINK, "ScopeLink", "Scope");
opencog::REWRITE_LINK = opencog::nameserver().declType(opencog::SCOPE_LINK, "RewriteLink", "Rewrite");
opencog::PRENEX_LINK = opencog::nameserver().declType(opencog::REWRITE_LINK, "PrenexLink", "Prenex");
opencog::LAMBDA_LINK = opencog::nameserver().declType(opencog::PRENEX_LINK, "LambdaLink", "Lambda");
opencog::PUT_LINK = opencog::nameserver().declType(opencog::PRENEX_LINK, "PutLink", "Put");
opencog::JOIN_LINK = opencog::nameserver().declType(opencog::PRENEX_LINK, "JoinLink", "Join");
opencog::JOIN_LINK = opencog::nameserver().declType(opencog::EXECUTABLE_LINK, "JoinLink", "Join");
opencog::MINIMAL_JOIN_LINK = opencog::nameserver().declType(opencog::JOIN_LINK, "MinimalJoinLink", "MinimalJoin");
opencog::UPPER_SET_LINK = opencog::nameserver().declType(opencog::JOIN_LINK, "UpperSetLink", "UpperSet");
opencog::MAXIMAL_JOIN_LINK = opencog::nameserver().declType(opencog::JOIN_LINK, "MaximalJoinLink", "MaximalJoin");
opencog::RULE_LINK = opencog::nameserver().declType(opencog::PRENEX_LINK, "RuleLink", "Rule");
opencog::RULE_LINK = opencog::nameserver().declType(opencog::EXECUTABLE_LINK, "RuleLink", "Rule");
opencog::VARDECL_OF_LINK = opencog::nameserver().declType(opencog::EXECUTABLE_LINK, "VardeclOfLink", "VardeclOf");
opencog::PREMISE_OF_LINK = opencog::nameserver().declType(opencog::VARDECL_OF_LINK, "PremiseOfLink", "PremiseOf");
opencog::CONCLUSION_OF_LINK = opencog::nameserver().declType(opencog::VARDECL_OF_LINK, "ConclusionOfLink", "ConclusionOf");
opencog::PATTERN_LINK = opencog::nameserver().declType(opencog::RULE_LINK, "PatternLink", "Pattern");
opencog::SATISFYING_LINK = opencog::nameserver().declType(opencog::PATTERN_LINK, "SatisfyingLink", "Satisfying");
opencog::SATISFYING_LINK = opencog::nameserver().declType(opencog::EXECUTABLE_LINK, "SatisfyingLink", "Satisfying");
opencog::MEET_LINK = opencog::nameserver().declType(opencog::SATISFYING_LINK       , "MeetLink", "Meet");
opencog::GET_LINK = opencog::nameserver().declType(opencog::MEET_LINK              , "GetLink", "Get");
opencog::QUERY_LINK = opencog::nameserver().declType(opencog::SATISFYING_LINK      , "QueryLink", "Query");
opencog::BIND_LINK = opencog::nameserver().declType(opencog::QUERY_LINK            , "BindLink", "Bind");
opencog::DUAL_LINK = opencog::nameserver().declType(opencog::SATISFYING_LINK, "DualLink", "Dual");
opencog::EVALUATION_LINK = opencog::nameserver().declType(opencog::FREE_LINK, "EvaluationLink", "Evaluation");
opencog::EVALUATION_LINK = opencog::nameserver().declType(opencog::EDGE_LINK, "EvaluationLink", "Evaluation");
opencog::EVALUATION_LINK = opencog::nameserver().declType(opencog::EVALUATABLE_LINK, "EvaluationLink", "Evaluation");
opencog::TYPE_NODE = opencog::nameserver().declType(opencog::BOND_NODE, "TypeNode", "Type");
opencog::TYPE_INH_NODE = opencog::nameserver().declType(opencog::TYPE_NODE, "TypeInhNode", "TypeInh");
opencog::TYPE_CO_INH_NODE = opencog::nameserver().declType(opencog::TYPE_NODE, "TypeCoInhNode", "TypeCoInh");
opencog::DEFINED_TYPE_NODE = opencog::nameserver().declType(opencog::TYPE_NODE, "DefinedTypeNode", "DefinedType");
opencog::TYPE_CHOICE = opencog::nameserver().declType(opencog::CHOICE_LINK, "TypeChoice", "TypeChoice");
opencog::TYPE_CHOICE = opencog::nameserver().declType(opencog::TYPE_OUTPUT_LINK, "TypeChoice", "TypeChoice");
opencog::TYPE_CHOICE = opencog::nameserver().declType(opencog::ALPHA_CONVERTIBLE_LINK, "TypeChoice", "TypeChoice");
opencog::TYPE_INTERSECTION_LINK = opencog::nameserver().declType(opencog::TYPE_CHOICE, "TypeIntersectionLink", "TypeIntersection");
opencog::ARROW_LINK = opencog::nameserver().declType(opencog::CONNECTOR_SEQ, "ArrowLink", "Arrow");
opencog::ARROW_LINK = opencog::nameserver().declType(opencog::TYPE_OUTPUT_LINK, "ArrowLink", "Arrow");
opencog::SIGNATURE_LINK = opencog::nameserver().declType(opencog::CONNECTOR, "SignatureLink", "Signature");
opencog::SIGNATURE_LINK = opencog::nameserver().declType(opencog::TYPE_OUTPUT_LINK, "SignatureLink", "Signature");
opencog::SIGN_NODE = opencog::nameserver().declType(opencog::TYPE_NODE, "SignNode", "Sign");
opencog::LINK_SIGNATURE_LINK = opencog::nameserver().declType(opencog::SIGNATURE_LINK, "LinkSignatureLink", "LinkSignature");
opencog::LINK_SIGNATURE_LINK = opencog::nameserver().declType(opencog::EXECUTABLE_LINK, "LinkSignatureLink", "LinkSignature");
opencog::TYPED_VARIABLE_LINK = opencog::nameserver().declType(opencog::CONNECTOR, "TypedVariableLink", "TypedVariable");
opencog::TYPED_VARIABLE_LINK = opencog::nameserver().declType(opencog::ALPHA_CONVERTIBLE_LINK, "TypedVariableLink", "TypedVariable");
opencog::TYPED_ATOM_LINK = opencog::nameserver().declType(opencog::UNIQUE_LINK, "TypedAtomLink", "TypedAtom");
opencog::INTERVAL_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "IntervalLink", "Interval");
opencog::ANCHOR_NODE = opencog::nameserver().declType(opencog::NODE, "AnchorNode", "Anchor");
opencog::SIMILARITY_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "SimilarityLink", "Similarity");
opencog::VIRTUAL_LINK = opencog::nameserver().declType(opencog::CRISP_OUTPUT_LINK, "VirtualLink", "Virtual");
opencog::GREATER_THAN_LINK = opencog::nameserver().declType(opencog::VIRTUAL_LINK, "GreaterThanLink", "GreaterThan");
opencog::GREATER_THAN_LINK = opencog::nameserver().declType(opencog::NUMERIC_INPUT_LINK, "GreaterThanLink", "GreaterThan");
opencog::LESS_THAN_LINK = opencog::nameserver().declType(opencog::VIRTUAL_LINK, "LessThanLink", "LessThan");
opencog::LESS_THAN_LINK = opencog::nameserver().declType(opencog::NUMERIC_INPUT_LINK, "LessThanLink", "LessThan");
opencog::IS_CLOSED_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "IsClosedLink", "IsClosed");
opencog::IS_CLOSED_LINK = opencog::nameserver().declType(opencog::VIRTUAL_LINK, "IsClosedLink", "IsClosed");
opencog::IS_TRUE_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "IsTrueLink", "IsTrue");
opencog::IS_TRUE_LINK = opencog::nameserver().declType(opencog::VIRTUAL_LINK, "IsTrueLink", "IsTrue");
opencog::IS_FALSE_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "IsFalseLink", "IsFalse");
opencog::IS_FALSE_LINK = opencog::nameserver().declType(opencog::VIRTUAL_LINK, "IsFalseLink", "IsFalse");
opencog::IDENTICAL_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "IdenticalLink", "Identical");
opencog::IDENTICAL_LINK = opencog::nameserver().declType(opencog::VIRTUAL_LINK, "IdenticalLink", "Identical");
opencog::EQUAL_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "EqualLink", "Equal");
opencog::EQUAL_LINK = opencog::nameserver().declType(opencog::VIRTUAL_LINK, "EqualLink", "Equal");
opencog::ALPHA_EQUAL_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "AlphaEqualLink", "AlphaEqual");
opencog::ALPHA_EQUAL_LINK = opencog::nameserver().declType(opencog::VIRTUAL_LINK, "AlphaEqualLink", "AlphaEqual");
opencog::EXCLUSIVE_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "ExclusiveLink", "Exclusive");
opencog::EXCLUSIVE_LINK = opencog::nameserver().declType(opencog::VIRTUAL_LINK, "ExclusiveLink", "Exclusive");
opencog::SATISFACTION_LINK = opencog::nameserver().declType(opencog::SATISFYING_LINK, "SatisfactionLink", "Satisfaction");
opencog::SATISFACTION_LINK = opencog::nameserver().declType(opencog::VIRTUAL_LINK, "SatisfactionLink", "Satisfaction");
opencog::FUNCTION_LINK = opencog::nameserver().declType(opencog::FREE_LINK, "FunctionLink", "Function");
opencog::FUNCTION_LINK = opencog::nameserver().declType(opencog::EXECUTABLE_LINK, "FunctionLink", "Function");
opencog::BOOL_OP_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "BoolOpLink", "BoolOp");
opencog::BOOL_OP_LINK = opencog::nameserver().declType(opencog::BOOLEAN_OUTPUT_LINK, "BoolOpLink", "BoolOp");
opencog::BOOL_OP_LINK = opencog::nameserver().declType(opencog::BOOLEAN_INPUT_LINK, "BoolOpLink", "BoolOp");
opencog::BOOL_AND_LINK = opencog::nameserver().declType(opencog::BOOL_OP_LINK, "BoolAndLink", "BoolAnd");
opencog::BOOL_OR_LINK = opencog::nameserver().declType(opencog::BOOL_OP_LINK, "BoolOrLink", "BoolOr");
opencog::BOOL_NOT_LINK = opencog::nameserver().declType(opencog::BOOL_OP_LINK, "BoolNotLink", "BoolNot");
opencog::NUMERIC_FUNCTION_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "NumericFunctionLink", "NumericFunction");
opencog::NUMERIC_FUNCTION_LINK = opencog::nameserver().declType(opencog::NUMERIC_OUTPUT_LINK, "NumericFunctionLink", "NumericFunction");
opencog::NUMERIC_FUNCTION_LINK = opencog::nameserver().declType(opencog::NUMERIC_INPUT_LINK, "NumericFunctionLink", "NumericFunction");
opencog::FOLD_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "FoldLink", "Fold");
opencog::ARITHMETIC_LINK = opencog::nameserver().declType(opencog::FOLD_LINK, "ArithmeticLink", "Arithmetic");
opencog::ARITHMETIC_LINK = opencog::nameserver().declType(opencog::NUMERIC_INPUT_LINK, "ArithmeticLink", "Arithmetic");
opencog::ARITHMETIC_LINK = opencog::nameserver().declType(opencog::NUMERIC_OUTPUT_LINK, "ArithmeticLink", "Arithmetic");
opencog::PLUS_LINK = opencog::nameserver().declType(opencog::ARITHMETIC_LINK, "PlusLink", "Plus");
opencog::MINUS_LINK = opencog::nameserver().declType(opencog::PLUS_LINK, "MinusLink", "Minus");
opencog::TIMES_LINK = opencog::nameserver().declType(opencog::ARITHMETIC_LINK, "TimesLink", "Times");
opencog::DIVIDE_LINK = opencog::nameserver().declType(opencog::TIMES_LINK, "DivideLink", "Divide");
opencog::MIN_LINK = opencog::nameserver().declType(opencog::NUMERIC_FUNCTION_LINK, "MinLink", "Min");
opencog::MAX_LINK = opencog::nameserver().declType(opencog::NUMERIC_FUNCTION_LINK, "MaxLink", "Max");
opencog::FLOOR_LINK = opencog::nameserver().declType(opencog::NUMERIC_FUNCTION_LINK, "FloorLink", "Floor");
opencog::HEAVISIDE_LINK = opencog::nameserver().declType(opencog::NUMERIC_FUNCTION_LINK, "HeavisideLink", "Heaviside");
opencog::IMPULSE_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "ImpulseLink", "Impulse");
opencog::IMPULSE_LINK = opencog::nameserver().declType(opencog::BOOLEAN_INPUT_LINK, "ImpulseLink", "Impulse");
opencog::IMPULSE_LINK = opencog::nameserver().declType(opencog::NUMERIC_OUTPUT_LINK, "ImpulseLink", "Impulse");
opencog::LOG2_LINK = opencog::nameserver().declType(opencog::NUMERIC_FUNCTION_LINK, "Log2Link", "Log2");
opencog::POW_LINK = opencog::nameserver().declType(opencog::NUMERIC_FUNCTION_LINK, "PowLink", "Pow");
opencog::RANDOM_NUMBER_LINK = opencog::nameserver().declType(opencog::NUMERIC_FUNCTION_LINK, "RandomNumberLink", "RandomNumber");
opencog::SINE_LINK = opencog::nameserver().declType(opencog::NUMERIC_FUNCTION_LINK, "SineLink", "Sine");
opencog::ACCUMULATE_LINK = opencog::nameserver().declType(opencog::NUMERIC_FUNCTION_LINK, "AccumulateLink", "Accumulate");
opencog::DECIMATE_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "DecimateLink", "Decimate");
opencog::DECIMATE_LINK = opencog::nameserver().declType(opencog::NUMERIC_OUTPUT_LINK, "DecimateLink", "Decimate");
opencog::DECIMATE_LINK = opencog::nameserver().declType(opencog::BOOLEAN_OUTPUT_LINK, "DecimateLink", "Decimate");
opencog::ELEMENT_OF_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "ElementOfLink", "ElementOf");
opencog::ELEMENT_OF_LINK = opencog::nameserver().declType(opencog::NUMERIC_OUTPUT_LINK, "ElementOfLink", "ElementOf");
opencog::ELEMENT_OF_LINK = opencog::nameserver().declType(opencog::BOOLEAN_OUTPUT_LINK, "ElementOfLink", "ElementOf");
opencog::NUMBER_OF_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "NumberOfLink", "NumberOf");
opencog::NUMBER_OF_LINK = opencog::nameserver().declType(opencog::NUMERIC_OUTPUT_LINK, "NumberOfLink", "NumberOf");
opencog::TIME_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "TimeLink", "Time");
opencog::TIME_LINK = opencog::nameserver().declType(opencog::NUMERIC_OUTPUT_LINK, "TimeLink", "Time");
opencog::VALUE_OF_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "ValueOfLink", "ValueOf");
opencog::BOOL_VALUE_OF_LINK = opencog::nameserver().declType(opencog::VALUE_OF_LINK, "BoolValueOfLink", "BoolValueOf");
opencog::BOOL_VALUE_OF_LINK = opencog::nameserver().declType(opencog::BOOLEAN_OUTPUT_LINK, "BoolValueOfLink", "BoolValueOf");
opencog::FLOAT_VALUE_OF_LINK = opencog::nameserver().declType(opencog::VALUE_OF_LINK, "FloatValueOfLink", "FloatValueOf");
opencog::FLOAT_VALUE_OF_LINK = opencog::nameserver().declType(opencog::NUMERIC_OUTPUT_LINK, "FloatValueOfLink", "FloatValueOf");
opencog::STREAM_VALUE_OF_LINK = opencog::nameserver().declType(opencog::VALUE_OF_LINK, "StreamValueOfLink", "StreamValueOf");
opencog::STREAM_VALUE_OF_LINK = opencog::nameserver().declType(opencog::NUMERIC_OUTPUT_LINK, "StreamValueOfLink", "StreamValueOf");
opencog::TRUTH_VALUE_OF_LINK = opencog::nameserver().declType(opencog::FLOAT_VALUE_OF_LINK, "TruthValueOfLink", "TruthValueOf");
opencog::STRENGTH_OF_LINK = opencog::nameserver().declType(opencog::FLOAT_VALUE_OF_LINK, "StrengthOfLink", "StrengthOf");
opencog::CONFIDENCE_OF_LINK = opencog::nameserver().declType(opencog::FLOAT_VALUE_OF_LINK, "ConfidenceOfLink", "ConfidenceOf");
opencog::COUNT_OF_LINK = opencog::nameserver().declType(opencog::FLOAT_VALUE_OF_LINK, "CountOfLink", "CountOf");
opencog::SIZE_OF_LINK = opencog::nameserver().declType(opencog::FLOAT_VALUE_OF_LINK, "SizeOfLink", "SizeOf");
opencog::TYPE_OF_LINK = opencog::nameserver().declType(opencog::VALUE_OF_LINK, "TypeOfLink", "TypeOf");
opencog::INCOMING_OF_LINK = opencog::nameserver().declType(opencog::VALUE_OF_LINK, "IncomingOfLink", "IncomingOf");
opencog::COLLECTION_OF_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "CollectionOfLink", "CollectionOf");
opencog::COLLECTION_OF_LINK = opencog::nameserver().declType(opencog::COLLECTION_LINK, "CollectionOfLink", "CollectionOf");
opencog::SET_VALUE_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "SetValueLink", "SetValue");
opencog::SET_TV_LINK = opencog::nameserver().declType(opencog::SET_VALUE_LINK, "SetTVLink", "SetTV");
opencog::SET_TV_LINK = opencog::nameserver().declType(opencog::EVALUATABLE_LINK , "SetTVLink", "SetTV");
opencog::VALUE_SHIM_LINK = opencog::nameserver().declType(opencog::EXECUTABLE_LINK, "ValueShimLink", "ValueShim");
opencog::VALUE_SHIM_LINK = opencog::nameserver().declType(opencog::NUMERIC_OUTPUT_LINK, "ValueShimLink", "ValueShim");
opencog::PROMISE_LINK = opencog::nameserver().declType(opencog::VALUABLE_LINK, "PromiseLink", "Promise");
opencog::PROMISE_LINK = opencog::nameserver().declType(opencog::EXECUTABLE_LINK, "PromiseLink", "Promise");
opencog::PROMISE_PREDICATE_LINK = opencog::nameserver().declType(opencog::EVALUATABLE_LINK, "PromisePredicateLink", "PromisePredicate");
opencog::PROMISE_PREDICATE_LINK = opencog::nameserver().declType(opencog::PROMISE_LINK, "PromisePredicateLink", "PromisePredicate");
opencog::FORMULA_PREDICATE_LINK = opencog::nameserver().declType(opencog::SCOPE_LINK, "FormulaPredicateLink", "FormulaPredicate");
opencog::FORMULA_PREDICATE_LINK = opencog::nameserver().declType(opencog::EVALUATABLE_LINK, "FormulaPredicateLink", "FormulaPredicate");
opencog::FILTER_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "FilterLink", "Filter");
opencog::EXECUTION_OUTPUT_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "ExecutionOutputLink", "ExecutionOutput");
opencog::RANDOM_CHOICE_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "RandomChoiceLink", "RandomChoice");
opencog::COND_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "CondLink", "Cond");
opencog::COND_LINK = opencog::nameserver().declType(opencog::NUMERIC_OUTPUT_LINK, "CondLink", "Cond");
opencog::SLEEP_LINK = opencog::nameserver().declType(opencog::FUNCTION_LINK, "SleepLink", "Sleep");
opencog::SLEEP_LINK = opencog::nameserver().declType(opencog::NUMERIC_INPUT_LINK, "SleepLink", "Sleep");
opencog::PARALLEL_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "ParallelLink", "Parallel");
opencog::PARALLEL_LINK = opencog::nameserver().declType(opencog::EVALUATABLE_LINK, "ParallelLink", "Parallel");
opencog::THREAD_JOIN_LINK = opencog::nameserver().declType(opencog::PARALLEL_LINK, "ThreadJoinLink", "ThreadJoin");
opencog::EXECUTE_THREADED_LINK = opencog::nameserver().declType(opencog::EXECUTABLE_LINK, "ExecuteThreadedLink", "ExecuteThreaded");
opencog::PURE_EXEC_LINK = opencog::nameserver().declType(opencog::EXECUTABLE_LINK, "PureExecLink", "PureExec");
opencog::PROCEDURE_NODE = opencog::nameserver().declType(opencog::NODE, "ProcedureNode", "Procedure");
opencog::DEFINED_PROCEDURE_NODE = opencog::nameserver().declType(opencog::PROCEDURE_NODE, "DefinedProcedureNode", "DefinedProcedure");
opencog::GROUNDED_PROCEDURE_NODE = opencog::nameserver().declType(opencog::PROCEDURE_NODE, "GroundedProcedureNode", "GroundedProcedure");
opencog::GROUNDED_PREDICATE_NODE = opencog::nameserver().declType(opencog::PREDICATE_NODE, "GroundedPredicateNode", "GroundedPredicate");
opencog::GROUNDED_PREDICATE_NODE = opencog::nameserver().declType(opencog::GROUNDED_PROCEDURE_NODE, "GroundedPredicateNode", "GroundedPredicate");
opencog::DEFINED_PREDICATE_NODE = opencog::nameserver().declType(opencog::PREDICATE_NODE, "DefinedPredicateNode", "DefinedPredicate");
opencog::DEFINED_PREDICATE_NODE = opencog::nameserver().declType(opencog::PROCEDURE_NODE, "DefinedPredicateNode", "DefinedPredicate");
opencog::SCHEMA_NODE = opencog::nameserver().declType(opencog::PROCEDURE_NODE, "SchemaNode", "Schema");
opencog::DEFINED_SCHEMA_NODE = opencog::nameserver().declType(opencog::SCHEMA_NODE, "DefinedSchemaNode", "DefinedSchema");
opencog::DEFINED_SCHEMA_NODE = opencog::nameserver().declType(opencog::DEFINED_PROCEDURE_NODE, "DefinedSchemaNode", "DefinedSchema");
opencog::GROUNDED_SCHEMA_NODE = opencog::nameserver().declType(opencog::SCHEMA_NODE, "GroundedSchemaNode", "GroundedSchema");
opencog::GROUNDED_SCHEMA_NODE = opencog::nameserver().declType(opencog::GROUNDED_PROCEDURE_NODE, "GroundedSchemaNode", "GroundedSchema");
opencog::FOREIGN_AST = opencog::nameserver().declType(opencog::LINK, "ForeignAst", "ForeignAst");
opencog::SEXPR_AST = opencog::nameserver().declType(opencog::FOREIGN_AST, "SexprAst", "SexprAst");
opencog::DATALOG_AST = opencog::nameserver().declType(opencog::FOREIGN_AST, "DatalogAst", "DatalogAst");
opencog::JSON_AST = opencog::nameserver().declType(opencog::FOREIGN_AST, "JsonAst", "JsonAst");
opencog::PYTHON_AST = opencog::nameserver().declType(opencog::FOREIGN_AST, "PythonAst", "PythonAst");
opencog::DIRECTLY_EVALUATABLE_LINK = opencog::nameserver().declType(opencog::LINK, "DirectlyEvaluatableLink", "DirectlyEvaluatable");
opencog::IMPLICATION_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "ImplicationLink", "Implication");
opencog::IMPLICATION_LINK = opencog::nameserver().declType(opencog::DIRECTLY_EVALUATABLE_LINK, "ImplicationLink", "Implication");
opencog::INHERITANCE_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "InheritanceLink", "Inheritance");
opencog::INHERITANCE_LINK = opencog::nameserver().declType(opencog::DIRECTLY_EVALUATABLE_LINK, "InheritanceLink", "Inheritance");
opencog::FORALL_LINK = opencog::nameserver().declType(opencog::SCOPE_LINK, "ForAllLink", "ForAll");
opencog::FORALL_LINK = opencog::nameserver().declType(opencog::COLLECTION_LINK , "ForAllLink", "ForAll");
opencog::EXISTS_LINK = opencog::nameserver().declType(opencog::SCOPE_LINK, "ExistsLink", "Exists");
opencog::EXISTS_LINK = opencog::nameserver().declType(opencog::COLLECTION_LINK, "ExistsLink", "Exists");
opencog::ASSOCIATIVE_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "AssociativeLink", "Associative");
opencog::EQUIVALENCE_LINK = opencog::nameserver().declType(opencog::UNORDERED_LINK, "EquivalenceLink", "Equivalence");
opencog::EXECUTION_LINK = opencog::nameserver().declType(opencog::ORDERED_LINK, "ExecutionLink", "Execution");
