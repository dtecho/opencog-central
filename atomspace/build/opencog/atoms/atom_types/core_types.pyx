
# DO NOT EDIT THIS FILE! This file was automatically
# generated from atom definitions in
# /workspaces/opencog-central/atomspace/opencog/atoms/atom_types/atom_types.script
# by the macro OPENCOG_PYTHON_ATOMTYPES
#
# This file contains basic python wrappers for atom creation.
#

def Notype(*args, tv=None):
    return add_link(types.Notype, args, tv=tv)
def TopType(*args, tv=None):
    return add_link(types.TopType, args, tv=tv)
def Valuation(*args):
    return add_link(types.Valuation, args)
def Frame(*args, tv=None):
    return add_link(types.Frame, args, tv=tv)
def Node(node_name, tv=None):
    return add_node(types.Node, node_name, tv)
def Link(*args, tv=None):
    return add_link(types.Link, args, tv=tv)
def ConceptNode(node_name, tv=None):
    return add_node(types.ConceptNode, node_name, tv)
def NumberNode(node_name, tv=None):
    return add_node(types.NumberNode, node_name, tv)
def OrderedLink(*args, tv=None):
    return add_link(types.OrderedLink, args, tv=tv)
def UnorderedLink(*args, tv=None):
    return add_link(types.UnorderedLink, args, tv=tv)
def PredicateNode(node_name, tv=None):
    return add_node(types.PredicateNode, node_name, tv)
def ValuableLink(*args, tv=None):
    return add_link(types.ValuableLink, args, tv=tv)
def EvaluatableLink(*args, tv=None):
    return add_link(types.EvaluatableLink, args, tv=tv)
def ExecutableLink(*args, tv=None):
    return add_link(types.ExecutableLink, args, tv=tv)
def CrispInputLink(*args, tv=None):
    return add_link(types.CrispInputLink, args, tv=tv)
def CrispOutputLink(*args, tv=None):
    return add_link(types.CrispOutputLink, args, tv=tv)
def BooleanInputLink(*args, tv=None):
    return add_link(types.BooleanInputLink, args, tv=tv)
def BooleanOutputLink(*args, tv=None):
    return add_link(types.BooleanOutputLink, args, tv=tv)
def NumericInputLink(*args, tv=None):
    return add_link(types.NumericInputLink, args, tv=tv)
def NumericOutputLink(*args, tv=None):
    return add_link(types.NumericOutputLink, args, tv=tv)
def TypeInputLink(*args, tv=None):
    return add_link(types.TypeInputLink, args, tv=tv)
def TypeOutputLink(*args, tv=None):
    return add_link(types.TypeOutputLink, args, tv=tv)
def AlphaConvertibleLink(*args, tv=None):
    return add_link(types.AlphaConvertibleLink, args, tv=tv)
def CollectionLink(*args, tv=None):
    return add_link(types.CollectionLink, args, tv=tv)
def ListLink(*args, tv=None):
    return add_link(types.ListLink, args, tv=tv)
def SetLink(*args, tv=None):
    return add_link(types.SetLink, args, tv=tv)
def UnionLink(*args, tv=None):
    return add_link(types.UnionLink, args, tv=tv)
def IntersectionLink(*args, tv=None):
    return add_link(types.IntersectionLink, args, tv=tv)
def ComplementLink(*args, tv=None):
    return add_link(types.ComplementLink, args, tv=tv)
def SetDifferenceLink(*args, tv=None):
    return add_link(types.SetDifferenceLink, args, tv=tv)
def MemberLink(*args, tv=None):
    return add_link(types.MemberLink, args, tv=tv)
def SubsetLink(*args, tv=None):
    return add_link(types.SubsetLink, args, tv=tv)
def ContextLink(*args, tv=None):
    return add_link(types.ContextLink, args, tv=tv)
def TrueLink(*args, tv=None):
    return add_link(types.TrueLink, args, tv=tv)
def FalseLink(*args, tv=None):
    return add_link(types.FalseLink, args, tv=tv)
def AndLink(*args, tv=None):
    return add_link(types.AndLink, args, tv=tv)
def OrLink(*args, tv=None):
    return add_link(types.OrLink, args, tv=tv)
def NotLink(*args, tv=None):
    return add_link(types.NotLink, args, tv=tv)
def SequentialAndLink(*args, tv=None):
    return add_link(types.SequentialAndLink, args, tv=tv)
def SequentialOrLink(*args, tv=None):
    return add_link(types.SequentialOrLink, args, tv=tv)
def ChoiceLink(*args, tv=None):
    return add_link(types.ChoiceLink, args, tv=tv)
def PresentLink(*args, tv=None):
    return add_link(types.PresentLink, args, tv=tv)
def AbsentLink(*args, tv=None):
    return add_link(types.AbsentLink, args, tv=tv)
def AlwaysLink(*args, tv=None):
    return add_link(types.AlwaysLink, args, tv=tv)
def ContinuationLink(*args, tv=None):
    return add_link(types.ContinuationLink, args, tv=tv)
def EdgeLink(*args, tv=None):
    return add_link(types.EdgeLink, args, tv=tv)
def LexicalNode(node_name, tv=None):
    return add_node(types.LexicalNode, node_name, tv)
def AnyNode(node_name, tv=None):
    return add_node(types.AnyNode, node_name, tv)
def Connector(*args, tv=None):
    return add_link(types.Connector, args, tv=tv)
def SexNode(node_name, tv=None):
    return add_node(types.SexNode, node_name, tv)
def ConnectorDir(node_name, tv=None):
    return add_node(types.ConnectorDir, node_name, tv)
def BondNode(node_name, tv=None):
    return add_node(types.BondNode, node_name, tv)
def ConnectorSeq(*args, tv=None):
    return add_link(types.ConnectorSeq, args, tv=tv)
def ConnectorSet(*args, tv=None):
    return add_link(types.ConnectorSet, args, tv=tv)
def ConnectorChoice(*args, tv=None):
    return add_link(types.ConnectorChoice, args, tv=tv)
def Section(*args, tv=None):
    return add_link(types.Section, args, tv=tv)
def ShapeLink(*args, tv=None):
    return add_link(types.ShapeLink, args, tv=tv)
def CrossSection(*args, tv=None):
    return add_link(types.CrossSection, args, tv=tv)
def ItemNode(node_name, tv=None):
    return add_node(types.ItemNode, node_name, tv)
def ItemClassNode(node_name, tv=None):
    return add_node(types.ItemClassNode, node_name, tv)
def TagNode(node_name, tv=None):
    return add_node(types.TagNode, node_name, tv)
def TagLink(*args, tv=None):
    return add_link(types.TagLink, args, tv=tv)
def VariableNode(node_name, tv=None):
    return add_node(types.VariableNode, node_name, tv)
def VariableList(*args, tv=None):
    return add_link(types.VariableList, args, tv=tv)
def VariableSet(*args, tv=None):
    return add_link(types.VariableSet, args, tv=tv)
def GlobNode(node_name, tv=None):
    return add_node(types.GlobNode, node_name, tv)
def QuoteLink(*args, tv=None):
    return add_link(types.QuoteLink, args, tv=tv)
def UnquoteLink(*args, tv=None):
    return add_link(types.UnquoteLink, args, tv=tv)
def DontExecLink(*args, tv=None):
    return add_link(types.DontExecLink, args, tv=tv)
def LocalQuoteLink(*args, tv=None):
    return add_link(types.LocalQuoteLink, args, tv=tv)
def ReplacementLink(*args, tv=None):
    return add_link(types.ReplacementLink, args, tv=tv)
def FreeLink(*args, tv=None):
    return add_link(types.FreeLink, args, tv=tv)
def DeleteLink(*args, tv=None):
    return add_link(types.DeleteLink, args, tv=tv)
def UniqueLink(*args, tv=None):
    return add_link(types.UniqueLink, args, tv=tv)
def StateLink(*args, tv=None):
    return add_link(types.StateLink, args, tv=tv)
def DefineLink(*args, tv=None):
    return add_link(types.DefineLink, args, tv=tv)
def GrantLink(*args, tv=None):
    return add_link(types.GrantLink, args, tv=tv)
def ScopeLink(*args, tv=None):
    return add_link(types.ScopeLink, args, tv=tv)
def RewriteLink(*args, tv=None):
    return add_link(types.RewriteLink, args, tv=tv)
def PrenexLink(*args, tv=None):
    return add_link(types.PrenexLink, args, tv=tv)
def LambdaLink(*args, tv=None):
    return add_link(types.LambdaLink, args, tv=tv)
def PutLink(*args, tv=None):
    return add_link(types.PutLink, args, tv=tv)
def JoinLink(*args, tv=None):
    return add_link(types.JoinLink, args, tv=tv)
def MinimalJoinLink(*args, tv=None):
    return add_link(types.MinimalJoinLink, args, tv=tv)
def UpperSetLink(*args, tv=None):
    return add_link(types.UpperSetLink, args, tv=tv)
def MaximalJoinLink(*args, tv=None):
    return add_link(types.MaximalJoinLink, args, tv=tv)
def RuleLink(*args, tv=None):
    return add_link(types.RuleLink, args, tv=tv)
def VardeclOfLink(*args, tv=None):
    return add_link(types.VardeclOfLink, args, tv=tv)
def PremiseOfLink(*args, tv=None):
    return add_link(types.PremiseOfLink, args, tv=tv)
def ConclusionOfLink(*args, tv=None):
    return add_link(types.ConclusionOfLink, args, tv=tv)
def PatternLink(*args, tv=None):
    return add_link(types.PatternLink, args, tv=tv)
def SatisfyingLink(*args, tv=None):
    return add_link(types.SatisfyingLink, args, tv=tv)
def MeetLink(*args, tv=None):
    return add_link(types.MeetLink, args, tv=tv)
def GetLink(*args, tv=None):
    return add_link(types.GetLink, args, tv=tv)
def QueryLink(*args, tv=None):
    return add_link(types.QueryLink, args, tv=tv)
def BindLink(*args, tv=None):
    return add_link(types.BindLink, args, tv=tv)
def DualLink(*args, tv=None):
    return add_link(types.DualLink, args, tv=tv)
def EvaluationLink(*args, tv=None):
    return add_link(types.EvaluationLink, args, tv=tv)
def TypeNode(node_name, tv=None):
    return add_node(types.TypeNode, node_name, tv)
def TypeInhNode(node_name, tv=None):
    return add_node(types.TypeInhNode, node_name, tv)
def TypeCoInhNode(node_name, tv=None):
    return add_node(types.TypeCoInhNode, node_name, tv)
def DefinedTypeNode(node_name, tv=None):
    return add_node(types.DefinedTypeNode, node_name, tv)
def TypeChoice(*args, tv=None):
    return add_link(types.TypeChoice, args, tv=tv)
def TypeIntersectionLink(*args, tv=None):
    return add_link(types.TypeIntersectionLink, args, tv=tv)
def ArrowLink(*args, tv=None):
    return add_link(types.ArrowLink, args, tv=tv)
def SignatureLink(*args, tv=None):
    return add_link(types.SignatureLink, args, tv=tv)
def SignNode(node_name, tv=None):
    return add_node(types.SignNode, node_name, tv)
def LinkSignatureLink(*args, tv=None):
    return add_link(types.LinkSignatureLink, args, tv=tv)
def TypedVariableLink(*args, tv=None):
    return add_link(types.TypedVariableLink, args, tv=tv)
def TypedAtomLink(*args, tv=None):
    return add_link(types.TypedAtomLink, args, tv=tv)
def IntervalLink(*args, tv=None):
    return add_link(types.IntervalLink, args, tv=tv)
def AnchorNode(node_name, tv=None):
    return add_node(types.AnchorNode, node_name, tv)
def SimilarityLink(*args, tv=None):
    return add_link(types.SimilarityLink, args, tv=tv)
def VirtualLink(*args, tv=None):
    return add_link(types.VirtualLink, args, tv=tv)
def GreaterThanLink(*args, tv=None):
    return add_link(types.GreaterThanLink, args, tv=tv)
def LessThanLink(*args, tv=None):
    return add_link(types.LessThanLink, args, tv=tv)
def IsClosedLink(*args, tv=None):
    return add_link(types.IsClosedLink, args, tv=tv)
def IsTrueLink(*args, tv=None):
    return add_link(types.IsTrueLink, args, tv=tv)
def IsFalseLink(*args, tv=None):
    return add_link(types.IsFalseLink, args, tv=tv)
def IdenticalLink(*args, tv=None):
    return add_link(types.IdenticalLink, args, tv=tv)
def EqualLink(*args, tv=None):
    return add_link(types.EqualLink, args, tv=tv)
def AlphaEqualLink(*args, tv=None):
    return add_link(types.AlphaEqualLink, args, tv=tv)
def ExclusiveLink(*args, tv=None):
    return add_link(types.ExclusiveLink, args, tv=tv)
def SatisfactionLink(*args, tv=None):
    return add_link(types.SatisfactionLink, args, tv=tv)
def FunctionLink(*args, tv=None):
    return add_link(types.FunctionLink, args, tv=tv)
def BoolOpLink(*args, tv=None):
    return add_link(types.BoolOpLink, args, tv=tv)
def BoolAndLink(*args, tv=None):
    return add_link(types.BoolAndLink, args, tv=tv)
def BoolOrLink(*args, tv=None):
    return add_link(types.BoolOrLink, args, tv=tv)
def BoolNotLink(*args, tv=None):
    return add_link(types.BoolNotLink, args, tv=tv)
def NumericFunctionLink(*args, tv=None):
    return add_link(types.NumericFunctionLink, args, tv=tv)
def FoldLink(*args, tv=None):
    return add_link(types.FoldLink, args, tv=tv)
def ArithmeticLink(*args, tv=None):
    return add_link(types.ArithmeticLink, args, tv=tv)
def PlusLink(*args, tv=None):
    return add_link(types.PlusLink, args, tv=tv)
def MinusLink(*args, tv=None):
    return add_link(types.MinusLink, args, tv=tv)
def TimesLink(*args, tv=None):
    return add_link(types.TimesLink, args, tv=tv)
def DivideLink(*args, tv=None):
    return add_link(types.DivideLink, args, tv=tv)
def MinLink(*args, tv=None):
    return add_link(types.MinLink, args, tv=tv)
def MaxLink(*args, tv=None):
    return add_link(types.MaxLink, args, tv=tv)
def FloorLink(*args, tv=None):
    return add_link(types.FloorLink, args, tv=tv)
def HeavisideLink(*args, tv=None):
    return add_link(types.HeavisideLink, args, tv=tv)
def ImpulseLink(*args, tv=None):
    return add_link(types.ImpulseLink, args, tv=tv)
def Log2Link(*args, tv=None):
    return add_link(types.Log2Link, args, tv=tv)
def PowLink(*args, tv=None):
    return add_link(types.PowLink, args, tv=tv)
def RandomNumberLink(*args, tv=None):
    return add_link(types.RandomNumberLink, args, tv=tv)
def SineLink(*args, tv=None):
    return add_link(types.SineLink, args, tv=tv)
def AccumulateLink(*args, tv=None):
    return add_link(types.AccumulateLink, args, tv=tv)
def DecimateLink(*args, tv=None):
    return add_link(types.DecimateLink, args, tv=tv)
def ElementOfLink(*args, tv=None):
    return add_link(types.ElementOfLink, args, tv=tv)
def NumberOfLink(*args, tv=None):
    return add_link(types.NumberOfLink, args, tv=tv)
def TimeLink(*args, tv=None):
    return add_link(types.TimeLink, args, tv=tv)
def ValueOfLink(*args, tv=None):
    return add_link(types.ValueOfLink, args, tv=tv)
def BoolValueOfLink(*args, tv=None):
    return add_link(types.BoolValueOfLink, args, tv=tv)
def FloatValueOfLink(*args, tv=None):
    return add_link(types.FloatValueOfLink, args, tv=tv)
def StreamValueOfLink(*args, tv=None):
    return add_link(types.StreamValueOfLink, args, tv=tv)
def TruthValueOfLink(*args, tv=None):
    return add_link(types.TruthValueOfLink, args, tv=tv)
def StrengthOfLink(*args, tv=None):
    return add_link(types.StrengthOfLink, args, tv=tv)
def ConfidenceOfLink(*args, tv=None):
    return add_link(types.ConfidenceOfLink, args, tv=tv)
def CountOfLink(*args, tv=None):
    return add_link(types.CountOfLink, args, tv=tv)
def SizeOfLink(*args, tv=None):
    return add_link(types.SizeOfLink, args, tv=tv)
def TypeOfLink(*args, tv=None):
    return add_link(types.TypeOfLink, args, tv=tv)
def IncomingOfLink(*args, tv=None):
    return add_link(types.IncomingOfLink, args, tv=tv)
def CollectionOfLink(*args, tv=None):
    return add_link(types.CollectionOfLink, args, tv=tv)
def SetValueLink(*args, tv=None):
    return add_link(types.SetValueLink, args, tv=tv)
def SetTVLink(*args, tv=None):
    return add_link(types.SetTVLink, args, tv=tv)
def ValueShimLink(*args, tv=None):
    return add_link(types.ValueShimLink, args, tv=tv)
def PromiseLink(*args, tv=None):
    return add_link(types.PromiseLink, args, tv=tv)
def PromisePredicateLink(*args, tv=None):
    return add_link(types.PromisePredicateLink, args, tv=tv)
def FormulaPredicateLink(*args, tv=None):
    return add_link(types.FormulaPredicateLink, args, tv=tv)
def FilterLink(*args, tv=None):
    return add_link(types.FilterLink, args, tv=tv)
def ExecutionOutputLink(*args, tv=None):
    return add_link(types.ExecutionOutputLink, args, tv=tv)
def RandomChoiceLink(*args, tv=None):
    return add_link(types.RandomChoiceLink, args, tv=tv)
def CondLink(*args, tv=None):
    return add_link(types.CondLink, args, tv=tv)
def SleepLink(*args, tv=None):
    return add_link(types.SleepLink, args, tv=tv)
def ParallelLink(*args, tv=None):
    return add_link(types.ParallelLink, args, tv=tv)
def ThreadJoinLink(*args, tv=None):
    return add_link(types.ThreadJoinLink, args, tv=tv)
def ExecuteThreadedLink(*args, tv=None):
    return add_link(types.ExecuteThreadedLink, args, tv=tv)
def PureExecLink(*args, tv=None):
    return add_link(types.PureExecLink, args, tv=tv)
def ProcedureNode(node_name, tv=None):
    return add_node(types.ProcedureNode, node_name, tv)
def DefinedProcedureNode(node_name, tv=None):
    return add_node(types.DefinedProcedureNode, node_name, tv)
def GroundedProcedureNode(node_name, tv=None):
    return add_node(types.GroundedProcedureNode, node_name, tv)
def GroundedPredicateNode(node_name, tv=None):
    return add_node(types.GroundedPredicateNode, node_name, tv)
def DefinedPredicateNode(node_name, tv=None):
    return add_node(types.DefinedPredicateNode, node_name, tv)
def SchemaNode(node_name, tv=None):
    return add_node(types.SchemaNode, node_name, tv)
def DefinedSchemaNode(node_name, tv=None):
    return add_node(types.DefinedSchemaNode, node_name, tv)
def GroundedSchemaNode(node_name, tv=None):
    return add_node(types.GroundedSchemaNode, node_name, tv)
def ForeignAst(*args):
    return add_link(types.ForeignAst, args)
def SexprAst(*args):
    return add_link(types.SexprAst, args)
def DatalogAst(*args):
    return add_link(types.DatalogAst, args)
def JsonAst(*args):
    return add_link(types.JsonAst, args)
def PythonAst(*args):
    return add_link(types.PythonAst, args)
def DirectlyEvaluatableLink(*args, tv=None):
    return add_link(types.DirectlyEvaluatableLink, args, tv=tv)
def ImplicationLink(*args, tv=None):
    return add_link(types.ImplicationLink, args, tv=tv)
def InheritanceLink(*args, tv=None):
    return add_link(types.InheritanceLink, args, tv=tv)
def ForAllLink(*args, tv=None):
    return add_link(types.ForAllLink, args, tv=tv)
def ExistsLink(*args, tv=None):
    return add_link(types.ExistsLink, args, tv=tv)
def AssociativeLink(*args, tv=None):
    return add_link(types.AssociativeLink, args, tv=tv)
def EquivalenceLink(*args, tv=None):
    return add_link(types.EquivalenceLink, args, tv=tv)
def ExecutionLink(*args, tv=None):
    return add_link(types.ExecutionLink, args, tv=tv)
