/* Generated by Cython 0.29.32 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_32"
#define CYTHON_HEX_VERSION 0x001D20F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC (PYPY_VERSION_HEX >= 0x07030900)
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__opencog__atomspace
#define __PYX_HAVE_API__opencog__atomspace
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <memory>
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <set>
#include <string.h>
#include <string>
#include "opencog/atoms/atom_types/NameServer.h"
#include "opencog/atoms/atom_types/atom_types.h"
#include "opencog/atoms/value/Value.h"
#include "opencog/atoms/truthvalue/TruthValue.h"
#include "opencog/atoms/truthvalue/SimpleTruthValue.h"
#include "opencog/atoms/base/Link.h"
#include "opencog/atoms/base/Atom.h"
#include "opencog/atoms/base/Handle.h"
#include "opencog/atomspace/AtomSpace.h"
#include "opencog/atoms/value/FloatValue.h"
#include "opencog/atoms/value/StringValue.h"
#include "opencog/atoms/value/LinkValue.h"
#include <stdio.h>
#include "pythread.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "stringsource",
  "value.pyx",
  "atomspace_details.pyx",
  "atom.pyx",
  "nameserver.pyx",
  "truth_value.pyx",
  "float_value.pyx",
  "string_value.pyx",
  "link_value.pyx",
  "atomspace.pyx",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()


/* "opencog/atomspace.pxd":16
 *     cdef object PyLong_FromVoidPtr(void *p)
 * 
 * ctypedef public long PANDLE             # <<<<<<<<<<<<<<
 * 
 * # Basic wrapping for back_insert_iterator conversion.
 */
typedef long PANDLE;

/* "opencog/atomspace.pxd":25
 * # Basic OpenCog types
 * # NameServer
 * ctypedef short Type             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "opencog/atoms/atom_types/NameServer.h" namespace "opencog":
 */
typedef short __pyx_t_7opencog_9atomspace_Type;

/* "opencog/atomspace.pxd":77
 * 
 * # TruthValue
 * ctypedef double count_t             # <<<<<<<<<<<<<<
 * ctypedef double confidence_t
 * ctypedef double strength_t
 */
typedef double __pyx_t_7opencog_9atomspace_count_t;

/* "opencog/atomspace.pxd":78
 * # TruthValue
 * ctypedef double count_t
 * ctypedef double confidence_t             # <<<<<<<<<<<<<<
 * ctypedef double strength_t
 * 
 */
typedef double __pyx_t_7opencog_9atomspace_confidence_t;

/* "opencog/atomspace.pxd":79
 * ctypedef double count_t
 * ctypedef double confidence_t
 * ctypedef double strength_t             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "opencog/atoms/truthvalue/TruthValue.h" namespace "opencog":
 */
typedef double __pyx_t_7opencog_9atomspace_strength_t;

/* "opencog/atomspace.pxd":115
 * # ContentHash
 * 
 * ctypedef size_t ContentHash;             # <<<<<<<<<<<<<<
 * 
 * # Atom
 */
typedef size_t __pyx_t_7opencog_9atomspace_ContentHash;

/*--- Type declarations ---*/
struct __pyx_obj_7opencog_9atomspace_PtrHolder;
struct __pyx_obj_7opencog_9atomspace_Value;
struct __pyx_obj_7opencog_9atomspace_TruthValue;
struct __pyx_obj_7opencog_9atomspace_Atom;
struct __pyx_obj_7opencog_9atomspace_AtomSpace;
struct __pyx_obj_7opencog_9atomspace_FloatValue;
struct __pyx_obj_7opencog_9atomspace_StringValue;
struct __pyx_obj_7opencog_9atomspace_LinkValue;
struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__type_decl_context;

/* "opencog/atomspace.pxd":62
 *     ctypedef shared_ptr[cValue] cValuePtr "opencog::ValuePtr"
 * 
 * cdef class PtrHolder:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[void] shared_ptr
 * 
 */
struct __pyx_obj_7opencog_9atomspace_PtrHolder {
  PyObject_HEAD
  struct __pyx_vtabstruct_7opencog_9atomspace_PtrHolder *__pyx_vtab;
  std::shared_ptr<void>  shared_ptr;
};


/* "opencog/atomspace.pxd":68
 *     cdef PtrHolder create(shared_ptr[void]& ptr)
 * 
 * cdef class Value:             # <<<<<<<<<<<<<<
 *     cdef PtrHolder ptr_holder
 *     cdef cValuePtr get_c_value_ptr(self)
 */
struct __pyx_obj_7opencog_9atomspace_Value {
  PyObject_HEAD
  struct __pyx_vtabstruct_7opencog_9atomspace_Value *__pyx_vtab;
  struct __pyx_obj_7opencog_9atomspace_PtrHolder *ptr_holder;
};


/* "opencog/atomspace.pxd":106
 *         bint operator!=(cTruthValue h)
 * 
 * cdef class TruthValue(Value):             # <<<<<<<<<<<<<<
 *     cdef strength_t _mean(self)
 *     cdef confidence_t _confidence(self)
 */
struct __pyx_obj_7opencog_9atomspace_TruthValue {
  struct __pyx_obj_7opencog_9atomspace_Value __pyx_base;
};


/* "opencog/atomspace.pxd":172
 *     cdef cppclass cHandleSeq "opencog::HandleSeq"
 * 
 * cdef class Atom(Value):             # <<<<<<<<<<<<<<
 *     cdef cHandle* handle
 *     cdef object _atom_type
 */
struct __pyx_obj_7opencog_9atomspace_Atom {
  struct __pyx_obj_7opencog_9atomspace_Value __pyx_base;
  opencog::Handle *handle;
  PyObject *_atom_type;
  PyObject *_name;
  PyObject *_outgoing;
};


/* "opencog/atomspace.pxd":222
 * 
 * 
 * cdef class AtomSpace(Value):             # <<<<<<<<<<<<<<
 *     cdef cValuePtr asp
 *     cdef cAtomSpace *atomspace
 */
struct __pyx_obj_7opencog_9atomspace_AtomSpace {
  struct __pyx_obj_7opencog_9atomspace_Value __pyx_base;
  opencog::ValuePtr asp;
  opencog::AtomSpace *atomspace;
  PyObject *parent_atomspace;
};


/* "../../../../opencog/cython/opencog/value_types.pxd":1
 * cdef class FloatValue(Value):             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef vector[double] list_of_doubles_to_vector(list python_list)
 */
struct __pyx_obj_7opencog_9atomspace_FloatValue {
  struct __pyx_obj_7opencog_9atomspace_Value __pyx_base;
};


/* "../../../../opencog/cython/opencog/value_types.pxd":9
 * 
 * 
 * cdef class StringValue(Value):             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef vector[string] list_of_strings_to_vector(list python_list)
 */
struct __pyx_obj_7opencog_9atomspace_StringValue {
  struct __pyx_obj_7opencog_9atomspace_Value __pyx_base;
};


/* "../../../../opencog/cython/opencog/value_types.pxd":17
 * 
 * 
 * cdef class LinkValue(Value):             # <<<<<<<<<<<<<<
 *     @staticmethod
 *     cdef vector[cValuePtr] list_of_values_to_vector(list python_list)
 */
struct __pyx_obj_7opencog_9atomspace_LinkValue {
  struct __pyx_obj_7opencog_9atomspace_Value __pyx_base;
};


/* "../../../../opencog/cython/opencog/nameserver.pyx":68
 * 
 * @contextmanager
 * def type_decl_context(module):             # <<<<<<<<<<<<<<
 *     if begin_type_decls(module):
 *         raise RuntimeError('Cannot declare types for already loaded module: ' +
 */
struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__type_decl_context {
  PyObject_HEAD
  PyObject *__pyx_v_module;
};



/* "../../../../opencog/cython/opencog/value.pyx":5
 * 
 * 
 * cdef class PtrHolder:             # <<<<<<<<<<<<<<
 *     """C++ shared_ptr object wrapper for Python clients. Cython cannot create
 *     Python object constructor which gets C++ pointer. This class is used to
 */

struct __pyx_vtabstruct_7opencog_9atomspace_PtrHolder {
  struct __pyx_obj_7opencog_9atomspace_PtrHolder *(*create)(std::shared_ptr<void>  &);
};
static struct __pyx_vtabstruct_7opencog_9atomspace_PtrHolder *__pyx_vtabptr_7opencog_9atomspace_PtrHolder;


/* "../../../../opencog/cython/opencog/value.pyx":19
 *         return ptr_holder
 * 
 * cdef class Value:             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */

struct __pyx_vtabstruct_7opencog_9atomspace_Value {
  opencog::ValuePtr (*get_c_value_ptr)(struct __pyx_obj_7opencog_9atomspace_Value *);
  struct __pyx_obj_7opencog_9atomspace_Value *(*create)(opencog::ValuePtr &);
};
static struct __pyx_vtabstruct_7opencog_9atomspace_Value *__pyx_vtabptr_7opencog_9atomspace_Value;


/* "../../../../opencog/cython/opencog/truth_value.pyx":10
 *     return TruthValue(ptr_holder=PtrHolder.create(<shared_ptr[void]&>c_ptr))
 * 
 * cdef class TruthValue(Value):             # <<<<<<<<<<<<<<
 *     """ The truth value represents the strength and confidence of
 *         a relationship or term. In OpenCog there are a number of TruthValue
 */

struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue {
  struct __pyx_vtabstruct_7opencog_9atomspace_Value __pyx_base;
  __pyx_t_7opencog_9atomspace_strength_t (*_mean)(struct __pyx_obj_7opencog_9atomspace_TruthValue *);
  __pyx_t_7opencog_9atomspace_confidence_t (*_confidence)(struct __pyx_obj_7opencog_9atomspace_TruthValue *);
  __pyx_t_7opencog_9atomspace_count_t (*_count)(struct __pyx_obj_7opencog_9atomspace_TruthValue *);
  const opencog::TruthValue *(*_ptr)(struct __pyx_obj_7opencog_9atomspace_TruthValue *);
  opencog::TruthValuePtr *(*_tvptr)(struct __pyx_obj_7opencog_9atomspace_TruthValue *);
};
static struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue *__pyx_vtabptr_7opencog_9atomspace_TruthValue;


/* "../../../../opencog/cython/opencog/atom.pyx":8
 * 
 * # Atom wrapper object
 * cdef class Atom(Value):             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, PtrHolder ptr_holder, *args, **kwargs):
 */

struct __pyx_vtabstruct_7opencog_9atomspace_Atom {
  struct __pyx_vtabstruct_7opencog_9atomspace_Value __pyx_base;
  opencog::Handle (*get_c_handle)(struct __pyx_obj_7opencog_9atomspace_Atom *);
  struct __pyx_obj_7opencog_9atomspace_Atom *(*createAtom)(opencog::Handle &);
};
static struct __pyx_vtabstruct_7opencog_9atomspace_Atom *__pyx_vtabptr_7opencog_9atomspace_Atom;


/* "../../../../opencog/cython/opencog/atomspace_details.pyx":55
 *     return instance
 * 
 * cdef class AtomSpace(Value):             # <<<<<<<<<<<<<<
 *     # these are defined in atomspace.pxd:
 *     #cdef cAtomSpace *atomspace
 */

struct __pyx_vtabstruct_7opencog_9atomspace_AtomSpace {
  struct __pyx_vtabstruct_7opencog_9atomspace_Value __pyx_base;
};
static struct __pyx_vtabstruct_7opencog_9atomspace_AtomSpace *__pyx_vtabptr_7opencog_9atomspace_AtomSpace;


/* "../../../../opencog/cython/opencog/float_value.pyx":10
 *     return FloatValue(PtrHolder.create(<shared_ptr[void]&>c_ptr))
 * 
 * cdef class FloatValue(Value):             # <<<<<<<<<<<<<<
 * 
 *     def to_list(self):
 */

struct __pyx_vtabstruct_7opencog_9atomspace_FloatValue {
  struct __pyx_vtabstruct_7opencog_9atomspace_Value __pyx_base;
  std::vector<double>  (*list_of_doubles_to_vector)(PyObject *);
  PyObject *(*vector_of_doubles_to_list)(std::vector<double>  const *);
};
static struct __pyx_vtabstruct_7opencog_9atomspace_FloatValue *__pyx_vtabptr_7opencog_9atomspace_FloatValue;


/* "../../../../opencog/cython/opencog/string_value.pyx":10
 *     return StringValue(PtrHolder.create(<shared_ptr[void]&>c_ptr))
 * 
 * cdef class StringValue(Value):             # <<<<<<<<<<<<<<
 * 
 *     def to_list(self):
 */

struct __pyx_vtabstruct_7opencog_9atomspace_StringValue {
  struct __pyx_vtabstruct_7opencog_9atomspace_Value __pyx_base;
  std::vector<std::string>  (*list_of_strings_to_vector)(PyObject *);
  PyObject *(*vector_of_strings_to_list)(std::vector<std::string>  const *);
};
static struct __pyx_vtabstruct_7opencog_9atomspace_StringValue *__pyx_vtabptr_7opencog_9atomspace_StringValue;


/* "../../../../opencog/cython/opencog/link_value.pyx":10
 *     return LinkValue(PtrHolder.create(<shared_ptr[void]&>c_ptr))
 * 
 * cdef class LinkValue(Value):             # <<<<<<<<<<<<<<
 * 
 *     def to_list(self):
 */

struct __pyx_vtabstruct_7opencog_9atomspace_LinkValue {
  struct __pyx_vtabstruct_7opencog_9atomspace_Value __pyx_base;
  std::vector<opencog::ValuePtr>  (*list_of_values_to_vector)(PyObject *);
  PyObject *(*vector_of_values_to_list)(std::vector<opencog::ValuePtr>  const *);
};
static struct __pyx_vtabstruct_7opencog_9atomspace_LinkValue *__pyx_vtabptr_7opencog_9atomspace_LinkValue;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* IncludeCppStringH.proto */
#include <string>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_cpp_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_cpp_string(
         std::string cppstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        cppstring.data(), cppstring.size(), start, stop, encoding, errors, decode_func);
}

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* decode_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_bytes(
         PyObject* string, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        PyBytes_AS_STRING(string), PyBytes_GET_SIZE(string),
        start, stop, encoding, errors, decode_func);
}

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* IncludeStringH.proto */
#include <string.h>

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* ClassMethod.proto */
#include "descrobject.h"
static CYTHON_UNUSED PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE short __Pyx_PyInt_As_short(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_short(short value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static struct __pyx_obj_7opencog_9atomspace_PtrHolder *__pyx_f_7opencog_9atomspace_9PtrHolder_create(std::shared_ptr<void>  &__pyx_v_ptr); /* proto*/
static struct __pyx_obj_7opencog_9atomspace_Value *__pyx_f_7opencog_9atomspace_5Value_create(opencog::ValuePtr &__pyx_v_ptr); /* proto*/
static opencog::ValuePtr __pyx_f_7opencog_9atomspace_5Value_get_c_value_ptr(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self); /* proto*/
static __pyx_t_7opencog_9atomspace_strength_t __pyx_f_7opencog_9atomspace_10TruthValue__mean(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self); /* proto*/
static __pyx_t_7opencog_9atomspace_confidence_t __pyx_f_7opencog_9atomspace_10TruthValue__confidence(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self); /* proto*/
static __pyx_t_7opencog_9atomspace_count_t __pyx_f_7opencog_9atomspace_10TruthValue__count(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self); /* proto*/
static const opencog::TruthValue *__pyx_f_7opencog_9atomspace_10TruthValue__ptr(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self); /* proto*/
static opencog::TruthValuePtr *__pyx_f_7opencog_9atomspace_10TruthValue__tvptr(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self); /* proto*/
static std::vector<double>  __pyx_f_7opencog_9atomspace_10FloatValue_list_of_doubles_to_vector(PyObject *__pyx_v_python_list); /* proto*/
static PyObject *__pyx_f_7opencog_9atomspace_10FloatValue_vector_of_doubles_to_list(std::vector<double>  const *__pyx_v_cpp_vector); /* proto*/
static std::vector<std::string>  __pyx_f_7opencog_9atomspace_11StringValue_list_of_strings_to_vector(PyObject *__pyx_v_python_list); /* proto*/
static PyObject *__pyx_f_7opencog_9atomspace_11StringValue_vector_of_strings_to_list(std::vector<std::string>  const *__pyx_v_cpp_vector); /* proto*/
static struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_f_7opencog_9atomspace_4Atom_createAtom(opencog::Handle const &__pyx_v_handle); /* proto*/
static opencog::Handle __pyx_f_7opencog_9atomspace_4Atom_get_c_handle(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto*/
static std::vector<opencog::ValuePtr>  __pyx_f_7opencog_9atomspace_9LinkValue_list_of_values_to_vector(PyObject *__pyx_v_python_list); /* proto*/
static PyObject *__pyx_f_7opencog_9atomspace_9LinkValue_vector_of_values_to_list(std::vector<opencog::ValuePtr>  const *__pyx_v_cpp_vector); /* proto*/

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.memory' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython.version' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'opencog.atomspace' */
static PyTypeObject *__pyx_ptype_7opencog_9atomspace_PtrHolder = 0;
static PyTypeObject *__pyx_ptype_7opencog_9atomspace_Value = 0;
static PyTypeObject *__pyx_ptype_7opencog_9atomspace_TruthValue = 0;
static PyTypeObject *__pyx_ptype_7opencog_9atomspace_Atom = 0;
static PyTypeObject *__pyx_ptype_7opencog_9atomspace_AtomSpace = 0;
static PyTypeObject *__pyx_ptype_7opencog_9atomspace_FloatValue = 0;
static PyTypeObject *__pyx_ptype_7opencog_9atomspace_StringValue = 0;
static PyTypeObject *__pyx_ptype_7opencog_9atomspace_LinkValue = 0;
static PyTypeObject *__pyx_ptype_7opencog_9atomspace___pyx_scope_struct__type_decl_context = 0;
static std::vector<opencog::Handle>  __pyx_f_7opencog_9atomspace_atom_list_to_vector(PyObject *); /*proto*/
static PyObject *__pyx_f_7opencog_9atomspace_AtomSpace_factory(opencog::AtomSpace *); /*proto*/
static PyObject *__pyx_f_7opencog_9atomspace_AtomSpace_factoid(opencog::ValuePtr); /*proto*/
static PyObject *__pyx_f_7opencog_9atomspace_create_python_value_from_c_value(opencog::ValuePtr const &); /*proto*/
static std::string __pyx_f_7opencog_9atomspace_get_path_as_string(void); /*proto*/
static PyObject *__pyx_f_7opencog_9atomspace_convert_handle_seq_to_python_list(std::vector<opencog::Handle> ); /*proto*/
static PyObject *__pyx_f_7opencog_9atomspace_convert_handle_set_to_python_list(std::set<opencog::Handle> ); /*proto*/
static PyObject *__pyx_f_7opencog_9atomspace_py_atomspace(opencog::AtomSpace *); /*proto*/
static PyObject *__pyx_f_7opencog_9atomspace_py_atom(opencog::Handle const &); /*proto*/
static PyObject *__pyx_f_7opencog_9atomspace_c_get_type_name(__pyx_t_7opencog_9atomspace_Type); /*proto*/
static PyObject *__pyx_f_7opencog_9atomspace_c_get_named_type(PyObject *); /*proto*/
static PyObject *__pyx_f_7opencog_9atomspace_generate_type_module(void); /*proto*/
static PyObject *__pyx_f_7opencog_9atomspace___pyx_unpickle_Value__set_state(struct __pyx_obj_7opencog_9atomspace_Value *, PyObject *); /*proto*/
static PyObject *__pyx_f_7opencog_9atomspace___pyx_unpickle_TruthValue__set_state(struct __pyx_obj_7opencog_9atomspace_TruthValue *, PyObject *); /*proto*/
static PyObject *__pyx_f_7opencog_9atomspace___pyx_unpickle_FloatValue__set_state(struct __pyx_obj_7opencog_9atomspace_FloatValue *, PyObject *); /*proto*/
static PyObject *__pyx_f_7opencog_9atomspace___pyx_unpickle_StringValue__set_state(struct __pyx_obj_7opencog_9atomspace_StringValue *, PyObject *); /*proto*/
static PyObject *__pyx_f_7opencog_9atomspace___pyx_unpickle_LinkValue__set_state(struct __pyx_obj_7opencog_9atomspace_LinkValue *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "opencog.atomspace"
extern int __pyx_module_is_main_opencog__atomspace;
int __pyx_module_is_main_opencog__atomspace = 0;

/* Implementation of 'opencog.atomspace' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_AttributeError;
static PyObject *__pyx_builtin_NotImplemented;
static PyObject *__pyx_builtin_AssertionError;
static PyObject *__pyx_builtin_hex;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_s[] = "s";
static const char __pyx_k_t[] = "t";
static const char __pyx_k__6[] = "\n";
static const char __pyx_k__7[] = ">\n";
static const char __pyx_k_eq[] = "__eq";
static const char __pyx_k_lt[] = "__lt";
static const char __pyx_k_t1[] = "t1";
static const char __pyx_k_t2[] = "t2";
static const char __pyx_k_tv[] = "tv";
static const char __pyx_k__10[] = "";
static const char __pyx_k_arg[] = "arg";
static const char __pyx_k_asp[] = "asp";
static const char __pyx_k_hex[] = "hex";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_out[] = "out";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_Atom[] = "Atom";
static const char __pyx_k_Link[] = "Link";
static const char __pyx_k_Node[] = "Node";
static const char __pyx_k_addr[] = "addr";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_atom[] = "atom";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_is_a[] = "is_a";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mean[] = "mean";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_UTF_8[] = "UTF-8";
static const char __pyx_k_Value[] = "Value";
static const char __pyx_k_c_ptr[] = "c_ptr";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_types[] = "types";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_module[] = "module";
static const char __pyx_k_name_2[] = "   name: ";
static const char __pyx_k_name_3[] = "__name__";
static const char __pyx_k_parent[] = "parent";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_NO_TYPE[] = "NO_TYPE";
static const char __pyx_k_get_out[] = "get_out";
static const char __pyx_k_is_atom[] = "is_atom";
static const char __pyx_k_modules[] = "modules";
static const char __pyx_k_subtype[] = "subtype";
static const char __pyx_k_type_id[] = "type_id";
static const char __pyx_k_add_link[] = "add_link";
static const char __pyx_k_add_node[] = "add_node";
static const char __pyx_k_get_type[] = "get_type";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_incoming[] = "incoming";
static const char __pyx_k_outgoing[] = "outgoing";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_strength[] = "strength";
static const char __pyx_k_AtomSpace[] = "AtomSpace";
static const char __pyx_k_LinkValue[] = "LinkValue";
static const char __pyx_k_PtrHolder[] = "PtrHolder";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_atom_name[] = "atom_name";
static const char __pyx_k_atomspace[] = "atomspace";
static const char __pyx_k_decl_type[] = "decl_type";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_recursive[] = "recursive";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_FloatValue[] = "FloatValue";
static const char __pyx_k_TruthValue[] = "TruthValue";
static const char __pyx_k_atom_types[] = "atom_types";
static const char __pyx_k_confidence[] = "confidence";
static const char __pyx_k_contextlib[] = "contextlib";
static const char __pyx_k_ptr_holder[] = "ptr_holder";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_StringValue[] = "StringValue";
static const char __pyx_k_long_string[] = "long_string";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_short_string[] = "short_string";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_get_type_name[] = "get_type_name";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_AssertionError[] = "AssertionError";
static const char __pyx_k_AtomSpace_addr[] = "<AtomSpace\n   addr: ";
static const char __pyx_k_AttributeError[] = "AttributeError";
static const char __pyx_k_NotImplemented[] = "NotImplemented";
static const char __pyx_k_Python_API_for[] = "Python API for ";
static const char __pyx_k_contextmanager[] = "contextmanager";
static const char __pyx_k_end_type_decls[] = "end_type_decls";
static const char __pyx_k_createLinkValue[] = "createLinkValue";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_Need_Atom_object[] = "Need Atom object";
static const char __pyx_k_begin_type_decls[] = "begin_type_decls";
static const char __pyx_k_createFloatValue[] = "createFloatValue";
static const char __pyx_k_createTruthValue[] = "createTruthValue";
static const char __pyx_k_include_incoming[] = "include_incoming";
static const char __pyx_k_include_outgoing[] = "include_outgoing";
static const char __pyx_k_createStringValue[] = "createStringValue";
static const char __pyx_k_get_atoms_by_type[] = "get_atoms_by_type";
static const char __pyx_k_opencog_atomspace[] = "opencog.atomspace";
static const char __pyx_k_type_decl_context[] = "type_decl_context";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_pyx_unpickle_Value[] = "__pyx_unpickle_Value";
static const char __pyx_k_get_refreshed_types[] = "get_refreshed_types";
static const char __pyx_k_Type_is_not_supported[] = "Type {} is not supported";
static const char __pyx_k_Links_can_t_have_names[] = "Links can't have names";
static const char __pyx_k_create_child_atomspace[] = "create_child_atomspace";
static const char __pyx_k_is_not_implemented_yet[] = " is not implemented yet";
static const char __pyx_k_pyx_unpickle_LinkValue[] = "__pyx_unpickle_LinkValue";
static const char __pyx_k_pyx_unpickle_FloatValue[] = "__pyx_unpickle_FloatValue";
static const char __pyx_k_pyx_unpickle_TruthValue[] = "__pyx_unpickle_TruthValue";
static const char __pyx_k_pyx_unpickle_StringValue[] = "__pyx_unpickle_StringValue";
static const char __pyx_k_unexpected_comparison_kind_0[] = "unexpected comparison kind: {0}";
static const char __pyx_k_Value_cannot_be_compared_with[] = "Value cannot be compared with {}";
static const char __pyx_k_Nodes_can_t_have_outgoing_sets[] = "Nodes can't have outgoing sets";
static const char __pyx_k_workspaces_opencog_central_atom[] = "/workspaces/opencog-central/atomspace/opencog/cython/opencog/atomspace_details.pyx";
static const char __pyx_k_Cannot_declare_types_for_already[] = "Cannot declare types for already loaded module: ";
static const char __pyx_k_Got_blank_type_name_while_genera[] = "Got blank type name while generating types module";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))";
static const char __pyx_k_Only_Atom_instances_are_comparab[] = "Only Atom instances are comparable with atoms";
static const char __pyx_k_PtrHolder_contains_NULL_referenc[] = "PtrHolder contains NULL reference";
static const char __pyx_k_Value_can_be_compared_using_Py_E[] = "Value can be compared using Py_EQ and Py_NE only";
static const char __pyx_k_atom_tv_property_needs_a_TruthVa[] = "atom.tv property needs a TruthValue object";
static const char __pyx_k_cAtom_returned_NULL_TruthValue_p[] = "cAtom returned NULL TruthValue pointer";
static const char __pyx_k_key_should_be_an_instance_of_Ato[] = "key should be an instance of Atom, got {0} instead";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_outgoing_set_should_contain_atom[] = "outgoing set should contain atoms, got {0} instead";
static const char __pyx_k_self_asp_self_atomspace_cannot_b[] = "self.asp,self.atomspace cannot be converted to a Python object for pickling";
static const char __pyx_k_self_shared_ptr_cannot_be_conver[] = "self.shared_ptr cannot be converted to a Python object for pickling";
static const char __pyx_k_workspaces_opencog_central_atom_2[] = "/workspaces/opencog-central/atomspace/opencog/cython/opencog/truth_value.pyx";
static const char __pyx_k_workspaces_opencog_central_atom_3[] = "/workspaces/opencog-central/atomspace/opencog/cython/opencog/float_value.pyx";
static const char __pyx_k_workspaces_opencog_central_atom_4[] = "/workspaces/opencog-central/atomspace/opencog/cython/opencog/string_value.pyx";
static const char __pyx_k_workspaces_opencog_central_atom_5[] = "/workspaces/opencog-central/atomspace/opencog/cython/opencog/nameserver.pyx";
static const char __pyx_k_workspaces_opencog_central_atom_6[] = "/workspaces/opencog-central/atomspace/opencog/cython/opencog/link_value.pyx";
static PyObject *__pyx_n_s_AssertionError;
static PyObject *__pyx_n_s_Atom;
static PyObject *__pyx_n_s_AtomSpace;
static PyObject *__pyx_kp_u_AtomSpace_addr;
static PyObject *__pyx_n_s_AttributeError;
static PyObject *__pyx_kp_u_Cannot_declare_types_for_already;
static PyObject *__pyx_n_s_FloatValue;
static PyObject *__pyx_kp_u_Got_blank_type_name_while_genera;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
static PyObject *__pyx_n_s_Link;
static PyObject *__pyx_n_s_LinkValue;
static PyObject *__pyx_kp_u_Links_can_t_have_names;
static PyObject *__pyx_n_u_NO_TYPE;
static PyObject *__pyx_kp_u_Need_Atom_object;
static PyObject *__pyx_n_s_Node;
static PyObject *__pyx_kp_u_Nodes_can_t_have_outgoing_sets;
static PyObject *__pyx_n_s_NotImplemented;
static PyObject *__pyx_kp_u_Only_Atom_instances_are_comparab;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_PtrHolder;
static PyObject *__pyx_kp_u_PtrHolder_contains_NULL_referenc;
static PyObject *__pyx_kp_u_Python_API_for;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_StringValue;
static PyObject *__pyx_n_s_TruthValue;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_u_Type_is_not_supported;
static PyObject *__pyx_kp_u_UTF_8;
static PyObject *__pyx_n_s_Value;
static PyObject *__pyx_kp_u_Value_can_be_compared_using_Py_E;
static PyObject *__pyx_kp_u_Value_cannot_be_compared_with;
static PyObject *__pyx_kp_u__10;
static PyObject *__pyx_kp_u__6;
static PyObject *__pyx_kp_u__7;
static PyObject *__pyx_n_s_add_link;
static PyObject *__pyx_n_s_add_node;
static PyObject *__pyx_n_s_addr;
static PyObject *__pyx_n_s_arg;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_asp;
static PyObject *__pyx_n_s_atom;
static PyObject *__pyx_n_s_atom_name;
static PyObject *__pyx_kp_u_atom_tv_property_needs_a_TruthVa;
static PyObject *__pyx_n_u_atom_types;
static PyObject *__pyx_n_s_atomspace;
static PyObject *__pyx_n_s_begin_type_decls;
static PyObject *__pyx_kp_u_cAtom_returned_NULL_TruthValue_p;
static PyObject *__pyx_n_s_c_ptr;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_confidence;
static PyObject *__pyx_n_s_contextlib;
static PyObject *__pyx_n_s_contextmanager;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_n_s_createFloatValue;
static PyObject *__pyx_n_s_createLinkValue;
static PyObject *__pyx_n_s_createStringValue;
static PyObject *__pyx_n_s_createTruthValue;
static PyObject *__pyx_n_s_create_child_atomspace;
static PyObject *__pyx_n_s_decl_type;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end_type_decls;
static PyObject *__pyx_n_s_eq;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_get_atoms_by_type;
static PyObject *__pyx_n_s_get_out;
static PyObject *__pyx_n_s_get_refreshed_types;
static PyObject *__pyx_n_s_get_type;
static PyObject *__pyx_n_s_get_type_name;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_hex;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_include_incoming;
static PyObject *__pyx_n_s_include_outgoing;
static PyObject *__pyx_n_s_incoming;
static PyObject *__pyx_n_s_is_a;
static PyObject *__pyx_n_s_is_atom;
static PyObject *__pyx_kp_u_is_not_implemented_yet;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_kp_u_key_should_be_an_instance_of_Ato;
static PyObject *__pyx_n_s_long_string;
static PyObject *__pyx_n_s_lt;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mean;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_modules;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_u_name_2;
static PyObject *__pyx_n_s_name_3;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_opencog_atomspace;
static PyObject *__pyx_n_s_out;
static PyObject *__pyx_n_s_outgoing;
static PyObject *__pyx_kp_u_outgoing_set_should_contain_atom;
static PyObject *__pyx_n_s_parent;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_ptr_holder;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_FloatValue;
static PyObject *__pyx_n_s_pyx_unpickle_LinkValue;
static PyObject *__pyx_n_s_pyx_unpickle_StringValue;
static PyObject *__pyx_n_s_pyx_unpickle_TruthValue;
static PyObject *__pyx_n_s_pyx_unpickle_Value;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_recursive;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_kp_s_self_asp_self_atomspace_cannot_b;
static PyObject *__pyx_kp_s_self_shared_ptr_cannot_be_conver;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_short_string;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_strength;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_subtype;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_t1;
static PyObject *__pyx_n_s_t2;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_tv;
static PyObject *__pyx_n_s_type;
static PyObject *__pyx_n_s_type_decl_context;
static PyObject *__pyx_n_s_type_id;
static PyObject *__pyx_n_s_types;
static PyObject *__pyx_kp_u_unexpected_comparison_kind_0;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_kp_s_workspaces_opencog_central_atom;
static PyObject *__pyx_kp_s_workspaces_opencog_central_atom_2;
static PyObject *__pyx_kp_s_workspaces_opencog_central_atom_3;
static PyObject *__pyx_kp_s_workspaces_opencog_central_atom_4;
static PyObject *__pyx_kp_s_workspaces_opencog_central_atom_5;
static PyObject *__pyx_kp_s_workspaces_opencog_central_atom_6;
static PyObject *__pyx_pf_7opencog_9atomspace_9PtrHolder___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opencog_9atomspace_PtrHolder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9PtrHolder_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opencog_9atomspace_PtrHolder *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7opencog_9atomspace_5Value___init__(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self, PyObject *__pyx_v_ptr_holder); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_5Value_2value_ptr(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_5Value_4type___get__(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_5Value_9type_name___get__(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_5Value_4is_atom(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_5Value_6is_node(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_5Value_8is_link(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_5Value_10is_a(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self, PyObject *__pyx_v_type); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_5Value_12to_list(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_5Value_14long_string(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_5Value_16short_string(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_5Value_18__str__(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_5Value_20__repr__(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_5Value_22__richcmp__(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_op); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_5Value_24__reduce_cython__(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_5Value_26__setstate_cython__(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7opencog_9atomspace_9AtomSpace___init__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, long __pyx_v_addr, PyObject *__pyx_v_parent); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_2__richcmp__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_as_1, PyObject *__pyx_v_as_2, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_4add(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t, PyObject *__pyx_v_name, PyObject *__pyx_v_out, struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_tv); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_6add_atom(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_atom); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_8add_node(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t, PyObject *__pyx_v_atom_name, struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_tv); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_10add_link(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t, PyObject *__pyx_v_outgoing, struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_tv); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_12is_valid(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, PyObject *__pyx_v_atom); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_14remove(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_atom, PyObject *__pyx_v_recursive); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_16clear(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_18set_value(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_atom, struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_key, struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_20set_truthvalue(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_atom, struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_tv); /* proto */
static int __pyx_pf_7opencog_9atomspace_9AtomSpace_22__contains__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, PyObject *__pyx_v_atom); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_24__str__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_7opencog_9atomspace_9AtomSpace_26__len__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_28__iter__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_30size(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_32get_atoms_by_type(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t, PyObject *__pyx_v_subtype); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_34include_incoming(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_atoms); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_36include_outgoing(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_atoms); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_38is_node_in_atomspace(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_40is_link_in_atomspace(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t, PyObject *__pyx_v_outgoing); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_42__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_44__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_create_child_atomspace(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atomspace); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_2createTruthValue(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_strength, PyObject *__pyx_v_confidence); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_10TruthValue_4mean___get__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_10TruthValue_10confidence___get__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_10TruthValue_5count___get__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_10TruthValue___reduce_cython__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_10TruthValue_2__setstate_cython__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4createFloatValue(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_10FloatValue_to_list(struct __pyx_obj_7opencog_9atomspace_FloatValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_10FloatValue_2__reduce_cython__(struct __pyx_obj_7opencog_9atomspace_FloatValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_10FloatValue_4__setstate_cython__(struct __pyx_obj_7opencog_9atomspace_FloatValue *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_6createStringValue(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_11StringValue_to_list(struct __pyx_obj_7opencog_9atomspace_StringValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_11StringValue_2__reduce_cython__(struct __pyx_obj_7opencog_9atomspace_StringValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_11StringValue_4__setstate_cython__(struct __pyx_obj_7opencog_9atomspace_StringValue *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7opencog_9atomspace_4Atom___cinit__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, struct __pyx_obj_7opencog_9atomspace_PtrHolder *__pyx_v_ptr_holder, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_9atomspace___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_4name___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_2tv___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static int __pyx_pf_7opencog_9atomspace_4Atom_2tv_2__set__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_truth_value); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_2id_string(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_4set_value(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_6get_value(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_8get_keys(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_10get_out(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_3out___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_5arity___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_8incoming___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_12incoming_by_type(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_type); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_14truth_value(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_mean, PyObject *__pyx_v_count); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_16__richcmp__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_18__lt(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_20__eq(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static Py_hash_t __pyx_pf_7opencog_9atomspace_4Atom_22__hash__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_8get_type_name(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_10get_type(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_12is_a(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t1, __pyx_t_7opencog_9atomspace_Type __pyx_v_t2); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_14begin_type_decls(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_module); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_16end_type_decls(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_18type_decl_context(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_module); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_21decl_type(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_parent, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_23get_refreshed_types(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_25createLinkValue(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9LinkValue_to_list(struct __pyx_obj_7opencog_9atomspace_LinkValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9LinkValue_2__reduce_cython__(struct __pyx_obj_7opencog_9atomspace_LinkValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_9LinkValue_4__setstate_cython__(struct __pyx_obj_7opencog_9atomspace_LinkValue *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_27__pyx_unpickle_Value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_29__pyx_unpickle_TruthValue(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_31__pyx_unpickle_FloatValue(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_33__pyx_unpickle_StringValue(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7opencog_9atomspace_35__pyx_unpickle_LinkValue(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_7opencog_9atomspace_PtrHolder(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opencog_9atomspace_Value(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opencog_9atomspace_TruthValue(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opencog_9atomspace_Atom(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opencog_9atomspace_AtomSpace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opencog_9atomspace_FloatValue(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opencog_9atomspace_StringValue(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opencog_9atomspace_LinkValue(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7opencog_9atomspace___pyx_scope_struct__type_decl_context(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_742357;
static PyObject *__pyx_int_60460970;
static PyObject *__pyx_int_81655694;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_codeobj__15;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__20;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__24;
static PyObject *__pyx_codeobj__26;
static PyObject *__pyx_codeobj__28;
static PyObject *__pyx_codeobj__30;
static PyObject *__pyx_codeobj__32;
static PyObject *__pyx_codeobj__33;
static PyObject *__pyx_codeobj__36;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__45;
static PyObject *__pyx_codeobj__47;
static PyObject *__pyx_codeobj__49;
/* Late includes */

/* "../../../../opencog/cython/opencog/value.pyx":13
 * 
 *     @staticmethod
 *     cdef PtrHolder create(shared_ptr[void]& ptr):             # <<<<<<<<<<<<<<
 *         """Factory method to construct PtrHolder from C++ shared_ptr"""
 *         cdef PtrHolder ptr_holder = PtrHolder.__new__(PtrHolder)
 */

static struct __pyx_obj_7opencog_9atomspace_PtrHolder *__pyx_f_7opencog_9atomspace_9PtrHolder_create(std::shared_ptr<void>  &__pyx_v_ptr) {
  struct __pyx_obj_7opencog_9atomspace_PtrHolder *__pyx_v_ptr_holder = 0;
  struct __pyx_obj_7opencog_9atomspace_PtrHolder *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "../../../../opencog/cython/opencog/value.pyx":15
 *     cdef PtrHolder create(shared_ptr[void]& ptr):
 *         """Factory method to construct PtrHolder from C++ shared_ptr"""
 *         cdef PtrHolder ptr_holder = PtrHolder.__new__(PtrHolder)             # <<<<<<<<<<<<<<
 *         ptr_holder.shared_ptr = ptr
 *         return ptr_holder
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_7opencog_9atomspace_PtrHolder(((PyTypeObject *)__pyx_ptype_7opencog_9atomspace_PtrHolder), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_ptr_holder = ((struct __pyx_obj_7opencog_9atomspace_PtrHolder *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/value.pyx":16
 *         """Factory method to construct PtrHolder from C++ shared_ptr"""
 *         cdef PtrHolder ptr_holder = PtrHolder.__new__(PtrHolder)
 *         ptr_holder.shared_ptr = ptr             # <<<<<<<<<<<<<<
 *         return ptr_holder
 * 
 */
  __pyx_v_ptr_holder->shared_ptr = __pyx_v_ptr;

  /* "../../../../opencog/cython/opencog/value.pyx":17
 *         cdef PtrHolder ptr_holder = PtrHolder.__new__(PtrHolder)
 *         ptr_holder.shared_ptr = ptr
 *         return ptr_holder             # <<<<<<<<<<<<<<
 * 
 * cdef class Value:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_ptr_holder));
  __pyx_r = __pyx_v_ptr_holder;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/value.pyx":13
 * 
 *     @staticmethod
 *     cdef PtrHolder create(shared_ptr[void]& ptr):             # <<<<<<<<<<<<<<
 *         """Factory method to construct PtrHolder from C++ shared_ptr"""
 *         cdef PtrHolder ptr_holder = PtrHolder.__new__(PtrHolder)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.PtrHolder.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ptr_holder);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.shared_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9PtrHolder_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_9PtrHolder_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9PtrHolder___reduce_cython__(((struct __pyx_obj_7opencog_9atomspace_PtrHolder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9PtrHolder___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opencog_9atomspace_PtrHolder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.shared_ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.shared_ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.shared_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.PtrHolder.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.shared_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.shared_ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9PtrHolder_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_9PtrHolder_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9PtrHolder_2__setstate_cython__(((struct __pyx_obj_7opencog_9atomspace_PtrHolder *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9PtrHolder_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opencog_9atomspace_PtrHolder *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.shared_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.shared_ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.shared_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.shared_ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.PtrHolder.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/value.pyx":22
 * 
 *     @staticmethod
 *     cdef Value create(cValuePtr& ptr):             # <<<<<<<<<<<<<<
 *         """Factory method to construct Value from C++ cValuePtr using
 *         PtrHolder instance."""
 */

static struct __pyx_obj_7opencog_9atomspace_Value *__pyx_f_7opencog_9atomspace_5Value_create(opencog::ValuePtr &__pyx_v_ptr) {
  struct __pyx_obj_7opencog_9atomspace_Value *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "../../../../opencog/cython/opencog/value.pyx":25
 *         """Factory method to construct Value from C++ cValuePtr using
 *         PtrHolder instance."""
 *         return Value(PtrHolder.create(<shared_ptr[void]&>ptr))             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, ptr_holder):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_7opencog_9atomspace_9PtrHolder_create(((std::shared_ptr<void>  &)__pyx_v_ptr))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7opencog_9atomspace_Value), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/value.pyx":22
 * 
 *     @staticmethod
 *     cdef Value create(cValuePtr& ptr):             # <<<<<<<<<<<<<<
 *         """Factory method to construct Value from C++ cValuePtr using
 *         PtrHolder instance."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.Value.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/value.pyx":27
 *         return Value(PtrHolder.create(<shared_ptr[void]&>ptr))
 * 
 *     def __init__(self, ptr_holder):             # <<<<<<<<<<<<<<
 *         if (<PtrHolder>ptr_holder).shared_ptr.get() == NULL:
 *             raise AttributeError('PtrHolder contains NULL reference')
 */

/* Python wrapper */
static int __pyx_pw_7opencog_9atomspace_5Value_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7opencog_9atomspace_5Value_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ptr_holder = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ptr_holder,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ptr_holder)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 27, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_ptr_holder = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 27, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.Value.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_5Value___init__(((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_self), __pyx_v_ptr_holder);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opencog_9atomspace_5Value___init__(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self, PyObject *__pyx_v_ptr_holder) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "../../../../opencog/cython/opencog/value.pyx":28
 * 
 *     def __init__(self, ptr_holder):
 *         if (<PtrHolder>ptr_holder).shared_ptr.get() == NULL:             # <<<<<<<<<<<<<<
 *             raise AttributeError('PtrHolder contains NULL reference')
 *         self.ptr_holder = ptr_holder
 */
  __pyx_t_1 = ((((struct __pyx_obj_7opencog_9atomspace_PtrHolder *)__pyx_v_ptr_holder)->shared_ptr.get() == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "../../../../opencog/cython/opencog/value.pyx":29
 *     def __init__(self, ptr_holder):
 *         if (<PtrHolder>ptr_holder).shared_ptr.get() == NULL:
 *             raise AttributeError('PtrHolder contains NULL reference')             # <<<<<<<<<<<<<<
 *         self.ptr_holder = ptr_holder
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_AttributeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 29, __pyx_L1_error)

    /* "../../../../opencog/cython/opencog/value.pyx":28
 * 
 *     def __init__(self, ptr_holder):
 *         if (<PtrHolder>ptr_holder).shared_ptr.get() == NULL:             # <<<<<<<<<<<<<<
 *             raise AttributeError('PtrHolder contains NULL reference')
 *         self.ptr_holder = ptr_holder
 */
  }

  /* "../../../../opencog/cython/opencog/value.pyx":30
 *         if (<PtrHolder>ptr_holder).shared_ptr.get() == NULL:
 *             raise AttributeError('PtrHolder contains NULL reference')
 *         self.ptr_holder = ptr_holder             # <<<<<<<<<<<<<<
 * 
 *     cdef cValuePtr get_c_value_ptr(self):
 */
  if (!(likely(((__pyx_v_ptr_holder) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_ptr_holder, __pyx_ptype_7opencog_9atomspace_PtrHolder))))) __PYX_ERR(1, 30, __pyx_L1_error)
  __pyx_t_2 = __pyx_v_ptr_holder;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->ptr_holder);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->ptr_holder));
  __pyx_v_self->ptr_holder = ((struct __pyx_obj_7opencog_9atomspace_PtrHolder *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "../../../../opencog/cython/opencog/value.pyx":27
 *         return Value(PtrHolder.create(<shared_ptr[void]&>ptr))
 * 
 *     def __init__(self, ptr_holder):             # <<<<<<<<<<<<<<
 *         if (<PtrHolder>ptr_holder).shared_ptr.get() == NULL:
 *             raise AttributeError('PtrHolder contains NULL reference')
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.Value.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/value.pyx":32
 *         self.ptr_holder = ptr_holder
 * 
 *     cdef cValuePtr get_c_value_ptr(self):             # <<<<<<<<<<<<<<
 *         """Return C++ shared_ptr from PtrHolder instance"""
 *         return <cValuePtr&>(self.ptr_holder.shared_ptr)
 */

static opencog::ValuePtr __pyx_f_7opencog_9atomspace_5Value_get_c_value_ptr(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self) {
  opencog::ValuePtr __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_c_value_ptr", 0);

  /* "../../../../opencog/cython/opencog/value.pyx":34
 *     cdef cValuePtr get_c_value_ptr(self):
 *         """Return C++ shared_ptr from PtrHolder instance"""
 *         return <cValuePtr&>(self.ptr_holder.shared_ptr)             # <<<<<<<<<<<<<<
 * 
 *     def value_ptr(self):
 */
  __pyx_r = ((opencog::ValuePtr &)__pyx_v_self->ptr_holder->shared_ptr);
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/value.pyx":32
 *         self.ptr_holder = ptr_holder
 * 
 *     cdef cValuePtr get_c_value_ptr(self):             # <<<<<<<<<<<<<<
 *         """Return C++ shared_ptr from PtrHolder instance"""
 *         return <cValuePtr&>(self.ptr_holder.shared_ptr)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/value.pyx":36
 *         return <cValuePtr&>(self.ptr_holder.shared_ptr)
 * 
 *     def value_ptr(self):             # <<<<<<<<<<<<<<
 *         return PyLong_FromVoidPtr(<cValuePtr*>&(self.ptr_holder.shared_ptr))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_3value_ptr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_3value_ptr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("value_ptr (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_5Value_2value_ptr(((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_5Value_2value_ptr(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("value_ptr", 0);

  /* "../../../../opencog/cython/opencog/value.pyx":37
 * 
 *     def value_ptr(self):
 *         return PyLong_FromVoidPtr(<cValuePtr*>&(self.ptr_holder.shared_ptr))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromVoidPtr(((opencog::ValuePtr *)(&__pyx_v_self->ptr_holder->shared_ptr))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/value.pyx":36
 *         return <cValuePtr&>(self.ptr_holder.shared_ptr)
 * 
 *     def value_ptr(self):             # <<<<<<<<<<<<<<
 *         return PyLong_FromVoidPtr(<cValuePtr*>&(self.ptr_holder.shared_ptr))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.Value.value_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/value.pyx":40
 * 
 *     @property
 *     def type(self):             # <<<<<<<<<<<<<<
 *         return self.get_c_value_ptr().get().get_type()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_4type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_4type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_5Value_4type___get__(((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_5Value_4type___get__(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../../../../opencog/cython/opencog/value.pyx":41
 *     @property
 *     def type(self):
 *         return self.get_c_value_ptr().get().get_type()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_short(((struct __pyx_vtabstruct_7opencog_9atomspace_Value *)__pyx_v_self->__pyx_vtab)->get_c_value_ptr(__pyx_v_self).get()->get_type()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/value.pyx":40
 * 
 *     @property
 *     def type(self):             # <<<<<<<<<<<<<<
 *         return self.get_c_value_ptr().get().get_type()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.Value.type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/value.pyx":44
 * 
 *     @property
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         return get_type_name(self.type)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_9type_name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_9type_name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_5Value_9type_name___get__(((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_5Value_9type_name___get__(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../../../../opencog/cython/opencog/value.pyx":45
 *     @property
 *     def type_name(self):
 *         return get_type_name(self.type)             # <<<<<<<<<<<<<<
 * 
 *     def is_atom(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_get_type_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/value.pyx":44
 * 
 *     @property
 *     def type_name(self):             # <<<<<<<<<<<<<<
 *         return get_type_name(self.type)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("opencog.atomspace.Value.type_name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/value.pyx":47
 *         return get_type_name(self.type)
 * 
 *     def is_atom(self):             # <<<<<<<<<<<<<<
 *         return is_a(self.type, types.Atom)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_5is_atom(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_5is_atom(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_atom (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_5Value_4is_atom(((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_5Value_4is_atom(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_atom", 0);

  /* "../../../../opencog/cython/opencog/value.pyx":48
 * 
 *     def is_atom(self):
 *         return is_a(self.type, types.Atom)             # <<<<<<<<<<<<<<
 * 
 *     def is_node(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_is_a); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_types); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Atom); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 48, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 48, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 48, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_5);
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 48, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/value.pyx":47
 *         return get_type_name(self.type)
 * 
 *     def is_atom(self):             # <<<<<<<<<<<<<<
 *         return is_a(self.type, types.Atom)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("opencog.atomspace.Value.is_atom", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/value.pyx":50
 *         return is_a(self.type, types.Atom)
 * 
 *     def is_node(self):             # <<<<<<<<<<<<<<
 *         return is_a(self.type, types.Node)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_7is_node(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_7is_node(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_node (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_5Value_6is_node(((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_5Value_6is_node(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_node", 0);

  /* "../../../../opencog/cython/opencog/value.pyx":51
 * 
 *     def is_node(self):
 *         return is_a(self.type, types.Node)             # <<<<<<<<<<<<<<
 * 
 *     def is_link(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_is_a); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_types); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Node); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 51, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 51, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_5);
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/value.pyx":50
 *         return is_a(self.type, types.Atom)
 * 
 *     def is_node(self):             # <<<<<<<<<<<<<<
 *         return is_a(self.type, types.Node)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("opencog.atomspace.Value.is_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/value.pyx":53
 *         return is_a(self.type, types.Node)
 * 
 *     def is_link(self):             # <<<<<<<<<<<<<<
 *         return is_a(self.type, types.Link)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_9is_link(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_9is_link(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_link (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_5Value_8is_link(((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_5Value_8is_link(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_link", 0);

  /* "../../../../opencog/cython/opencog/value.pyx":54
 * 
 *     def is_link(self):
 *         return is_a(self.type, types.Link)             # <<<<<<<<<<<<<<
 * 
 *     def is_a(self, type):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_is_a); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_types); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Link); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 54, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 54, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_5);
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/value.pyx":53
 *         return is_a(self.type, types.Node)
 * 
 *     def is_link(self):             # <<<<<<<<<<<<<<
 *         return is_a(self.type, types.Link)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("opencog.atomspace.Value.is_link", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/value.pyx":56
 *         return is_a(self.type, types.Link)
 * 
 *     def is_a(self, type):             # <<<<<<<<<<<<<<
 *         return is_a(self.type, type)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_11is_a(PyObject *__pyx_v_self, PyObject *__pyx_v_type); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_11is_a(PyObject *__pyx_v_self, PyObject *__pyx_v_type) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_a (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_5Value_10is_a(((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_self), ((PyObject *)__pyx_v_type));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_5Value_10is_a(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self, PyObject *__pyx_v_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_a", 0);

  /* "../../../../opencog/cython/opencog/value.pyx":57
 * 
 *     def is_a(self, type):
 *         return is_a(self.type, type)             # <<<<<<<<<<<<<<
 * 
 *     def to_list(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_is_a); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_v_type};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 57, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_v_type};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 57, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_type);
    __Pyx_GIVEREF(__pyx_v_type);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_type);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/value.pyx":56
 *         return is_a(self.type, types.Link)
 * 
 *     def is_a(self, type):             # <<<<<<<<<<<<<<
 *         return is_a(self.type, type)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("opencog.atomspace.Value.is_a", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/value.pyx":59
 *         return is_a(self.type, type)
 * 
 *     def to_list(self):             # <<<<<<<<<<<<<<
 *         raise TypeError('Type {} is not supported'.format(self.type()))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_13to_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_13to_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_list (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_5Value_12to_list(((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_5Value_12to_list(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_list", 0);

  /* "../../../../opencog/cython/opencog/value.pyx":60
 * 
 *     def to_list(self):
 *         raise TypeError('Type {} is not supported'.format(self.type()))             # <<<<<<<<<<<<<<
 * 
 *     def long_string(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Type_is_not_supported, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(1, 60, __pyx_L1_error)

  /* "../../../../opencog/cython/opencog/value.pyx":59
 *         return is_a(self.type, type)
 * 
 *     def to_list(self):             # <<<<<<<<<<<<<<
 *         raise TypeError('Type {} is not supported'.format(self.type()))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opencog.atomspace.Value.to_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/value.pyx":62
 *         raise TypeError('Type {} is not supported'.format(self.type()))
 * 
 *     def long_string(self):             # <<<<<<<<<<<<<<
 *         return self.get_c_value_ptr().get().to_string().decode('UTF-8')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_15long_string(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_15long_string(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("long_string (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_5Value_14long_string(((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_5Value_14long_string(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("long_string", 0);

  /* "../../../../opencog/cython/opencog/value.pyx":63
 * 
 *     def long_string(self):
 *         return self.get_c_value_ptr().get().to_string().decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *     def short_string(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(((struct __pyx_vtabstruct_7opencog_9atomspace_Value *)__pyx_v_self->__pyx_vtab)->get_c_value_ptr(__pyx_v_self).get()->to_string(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/value.pyx":62
 *         raise TypeError('Type {} is not supported'.format(self.type()))
 * 
 *     def long_string(self):             # <<<<<<<<<<<<<<
 *         return self.get_c_value_ptr().get().to_string().decode('UTF-8')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.Value.long_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/value.pyx":65
 *         return self.get_c_value_ptr().get().to_string().decode('UTF-8')
 * 
 *     def short_string(self):             # <<<<<<<<<<<<<<
 *         return self.get_c_value_ptr().get().to_short_string().decode('UTF-8')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_17short_string(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_17short_string(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("short_string (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_5Value_16short_string(((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_5Value_16short_string(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("short_string", 0);

  /* "../../../../opencog/cython/opencog/value.pyx":66
 * 
 *     def short_string(self):
 *         return self.get_c_value_ptr().get().to_short_string().decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *     # long_string() provides the atom, together with the hash, and
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(((struct __pyx_vtabstruct_7opencog_9atomspace_Value *)__pyx_v_self->__pyx_vtab)->get_c_value_ptr(__pyx_v_self).get()->to_short_string(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/value.pyx":65
 *         return self.get_c_value_ptr().get().to_string().decode('UTF-8')
 * 
 *     def short_string(self):             # <<<<<<<<<<<<<<
 *         return self.get_c_value_ptr().get().to_short_string().decode('UTF-8')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.Value.short_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/value.pyx":72
 *     # than what the typical python user might want. So use the short
 *     # string when printing.  This still prints in scheme format, BTW ...
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         if self.is_atom():
 *            return self.short_string()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_19__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_19__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_5Value_18__str__(((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_5Value_18__str__(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "../../../../opencog/cython/opencog/value.pyx":73
 *     # string when printing.  This still prints in scheme format, BTW ...
 *     def __str__(self):
 *         if self.is_atom():             # <<<<<<<<<<<<<<
 *            return self.short_string()
 *         return self.long_string()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_atom); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 73, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "../../../../opencog/cython/opencog/value.pyx":74
 *     def __str__(self):
 *         if self.is_atom():
 *            return self.short_string()             # <<<<<<<<<<<<<<
 *         return self.long_string()
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_short_string); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/value.pyx":73
 *     # string when printing.  This still prints in scheme format, BTW ...
 *     def __str__(self):
 *         if self.is_atom():             # <<<<<<<<<<<<<<
 *            return self.short_string()
 *         return self.long_string()
 */
  }

  /* "../../../../opencog/cython/opencog/value.pyx":75
 *         if self.is_atom():
 *            return self.short_string()
 *         return self.long_string()             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_long_string); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/value.pyx":72
 *     # than what the typical python user might want. So use the short
 *     # string when printing.  This still prints in scheme format, BTW ...
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         if self.is_atom():
 *            return self.short_string()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.Value.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/value.pyx":77
 *         return self.long_string()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         if self.is_atom():
 *            return self.short_string()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_21__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_21__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_5Value_20__repr__(((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_5Value_20__repr__(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "../../../../opencog/cython/opencog/value.pyx":78
 * 
 *     def __repr__(self):
 *         if self.is_atom():             # <<<<<<<<<<<<<<
 *            return self.short_string()
 *         return self.long_string()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_atom); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 78, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "../../../../opencog/cython/opencog/value.pyx":79
 *     def __repr__(self):
 *         if self.is_atom():
 *            return self.short_string()             # <<<<<<<<<<<<<<
 *         return self.long_string()
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_short_string); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/value.pyx":78
 * 
 *     def __repr__(self):
 *         if self.is_atom():             # <<<<<<<<<<<<<<
 *            return self.short_string()
 *         return self.long_string()
 */
  }

  /* "../../../../opencog/cython/opencog/value.pyx":80
 *         if self.is_atom():
 *            return self.short_string()
 *         return self.long_string()             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(self, other, op):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_long_string); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/value.pyx":77
 *         return self.long_string()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         if self.is_atom():
 *            return self.short_string()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.Value.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/value.pyx":82
 *         return self.long_string()
 * 
 *     def __richcmp__(self, other, op):             # <<<<<<<<<<<<<<
 *         if not isinstance(other, Value):
 *             raise TypeError('Value cannot be compared with {}'
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_23__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_op); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_23__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_op) {
  PyObject *__pyx_v_op = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_op = __Pyx_PyInt_From_int(__pyx_arg_op); if (unlikely(!__pyx_v_op)) __PYX_ERR(1, 82, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_op);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.Value.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_5Value_22__richcmp__(((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_op));

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_op);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_5Value_22__richcmp__(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_op) {
  opencog::Value *__pyx_v_self_ptr;
  opencog::Value *__pyx_v_other_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "../../../../opencog/cython/opencog/value.pyx":83
 * 
 *     def __richcmp__(self, other, op):
 *         if not isinstance(other, Value):             # <<<<<<<<<<<<<<
 *             raise TypeError('Value cannot be compared with {}'
 *                             .format(type(other)))
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_7opencog_9atomspace_Value); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "../../../../opencog/cython/opencog/value.pyx":85
 *         if not isinstance(other, Value):
 *             raise TypeError('Value cannot be compared with {}'
 *                             .format(type(other)))             # <<<<<<<<<<<<<<
 *         cdef cValue* self_ptr = (<Value>self).get_c_value_ptr().get()
 *         cdef cValue* other_ptr = (<Value>other).get_c_value_ptr().get()
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Value_cannot_be_compared_with, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, ((PyObject *)Py_TYPE(__pyx_v_other))) : __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)Py_TYPE(__pyx_v_other)));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "../../../../opencog/cython/opencog/value.pyx":84
 *     def __richcmp__(self, other, op):
 *         if not isinstance(other, Value):
 *             raise TypeError('Value cannot be compared with {}'             # <<<<<<<<<<<<<<
 *                             .format(type(other)))
 *         cdef cValue* self_ptr = (<Value>self).get_c_value_ptr().get()
 */
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 84, __pyx_L1_error)

    /* "../../../../opencog/cython/opencog/value.pyx":83
 * 
 *     def __richcmp__(self, other, op):
 *         if not isinstance(other, Value):             # <<<<<<<<<<<<<<
 *             raise TypeError('Value cannot be compared with {}'
 *                             .format(type(other)))
 */
  }

  /* "../../../../opencog/cython/opencog/value.pyx":86
 *             raise TypeError('Value cannot be compared with {}'
 *                             .format(type(other)))
 *         cdef cValue* self_ptr = (<Value>self).get_c_value_ptr().get()             # <<<<<<<<<<<<<<
 *         cdef cValue* other_ptr = (<Value>other).get_c_value_ptr().get()
 *         if op == Py_EQ:
 */
  __pyx_v_self_ptr = ((struct __pyx_vtabstruct_7opencog_9atomspace_Value *)((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_self)->__pyx_vtab)->get_c_value_ptr(((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_self)).get();

  /* "../../../../opencog/cython/opencog/value.pyx":87
 *                             .format(type(other)))
 *         cdef cValue* self_ptr = (<Value>self).get_c_value_ptr().get()
 *         cdef cValue* other_ptr = (<Value>other).get_c_value_ptr().get()             # <<<<<<<<<<<<<<
 *         if op == Py_EQ:
 *             return deref(self_ptr) == deref(other_ptr)
 */
  __pyx_v_other_ptr = ((struct __pyx_vtabstruct_7opencog_9atomspace_Value *)((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_other)->__pyx_vtab)->get_c_value_ptr(((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_other)).get();

  /* "../../../../opencog/cython/opencog/value.pyx":88
 *         cdef cValue* self_ptr = (<Value>self).get_c_value_ptr().get()
 *         cdef cValue* other_ptr = (<Value>other).get_c_value_ptr().get()
 *         if op == Py_EQ:             # <<<<<<<<<<<<<<
 *             return deref(self_ptr) == deref(other_ptr)
 *         elif op == Py_NE:
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(Py_EQ); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_op, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_2) {

    /* "../../../../opencog/cython/opencog/value.pyx":89
 *         cdef cValue* other_ptr = (<Value>other).get_c_value_ptr().get()
 *         if op == Py_EQ:
 *             return deref(self_ptr) == deref(other_ptr)             # <<<<<<<<<<<<<<
 *         elif op == Py_NE:
 *             return deref(self_ptr) != deref(other_ptr)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong(((*__pyx_v_self_ptr) == (*__pyx_v_other_ptr))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/value.pyx":88
 *         cdef cValue* self_ptr = (<Value>self).get_c_value_ptr().get()
 *         cdef cValue* other_ptr = (<Value>other).get_c_value_ptr().get()
 *         if op == Py_EQ:             # <<<<<<<<<<<<<<
 *             return deref(self_ptr) == deref(other_ptr)
 *         elif op == Py_NE:
 */
  }

  /* "../../../../opencog/cython/opencog/value.pyx":90
 *         if op == Py_EQ:
 *             return deref(self_ptr) == deref(other_ptr)
 *         elif op == Py_NE:             # <<<<<<<<<<<<<<
 *             return deref(self_ptr) != deref(other_ptr)
 *         else:
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(Py_NE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_op, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 90, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 90, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(__pyx_t_2)) {

    /* "../../../../opencog/cython/opencog/value.pyx":91
 *             return deref(self_ptr) == deref(other_ptr)
 *         elif op == Py_NE:
 *             return deref(self_ptr) != deref(other_ptr)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('Value can be compared using '
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyBool_FromLong(((*__pyx_v_self_ptr) != (*__pyx_v_other_ptr))); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/value.pyx":90
 *         if op == Py_EQ:
 *             return deref(self_ptr) == deref(other_ptr)
 *         elif op == Py_NE:             # <<<<<<<<<<<<<<
 *             return deref(self_ptr) != deref(other_ptr)
 *         else:
 */
  }

  /* "../../../../opencog/cython/opencog/value.pyx":93
 *             return deref(self_ptr) != deref(other_ptr)
 *         else:
 *             raise TypeError('Value can be compared using '             # <<<<<<<<<<<<<<
 *                             + 'Py_EQ and Py_NE only')
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 93, __pyx_L1_error)
  }

  /* "../../../../opencog/cython/opencog/value.pyx":82
 *         return self.long_string()
 * 
 *     def __richcmp__(self, other, op):             # <<<<<<<<<<<<<<
 *         if not isinstance(other, Value):
 *             raise TypeError('Value cannot be compared with {}'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opencog.atomspace.Value.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_5Value_24__reduce_cython__(((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_5Value_24__reduce_cython__(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.ptr_holder,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->ptr_holder));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->ptr_holder));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->ptr_holder));
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.ptr_holder,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.ptr_holder,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.ptr_holder is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.ptr_holder,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.ptr_holder is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Value, (type(self), 0x4ddf78e, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->ptr_holder) != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.ptr_holder is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Value, (type(self), 0x4ddf78e, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.ptr_holder is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Value, (type(self), 0x4ddf78e, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Value, (type(self), 0x4ddf78e, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_81655694);
    __Pyx_GIVEREF(__pyx_int_81655694);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_81655694);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.ptr_holder is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Value, (type(self), 0x4ddf78e, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Value, (type(self), 0x4ddf78e, None), state
 *     else:
 *         return __pyx_unpickle_Value, (type(self), 0x4ddf78e, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Value__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_81655694);
    __Pyx_GIVEREF(__pyx_int_81655694);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_81655694);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opencog.atomspace.Value.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Value, (type(self), 0x4ddf78e, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Value__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_5Value_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_5Value_26__setstate_cython__(((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_5Value_26__setstate_cython__(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Value, (type(self), 0x4ddf78e, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Value__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_7opencog_9atomspace___pyx_unpickle_Value__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Value, (type(self), 0x4ddf78e, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Value__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.Value.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":12
 * # http://wiki.cython.org/PackageHierarchy
 * 
 * cdef api string get_path_as_string() with gil:             # <<<<<<<<<<<<<<
 *     import sys
 *     return str(sys.path).encode('UTF-8')
 */

static std::string __pyx_f_7opencog_9atomspace_get_path_as_string(void) {
  PyObject *__pyx_v_sys = NULL;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("get_path_as_string", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":13
 * 
 * cdef api string get_path_as_string() with gil:
 *     import sys             # <<<<<<<<<<<<<<
 *     return str(sys.path).encode('UTF-8')
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_sys = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":14
 * cdef api string get_path_as_string() with gil:
 *     import sys
 *     return str(sys.path).encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * cdef convert_handle_seq_to_python_list(vector[cHandle] handles):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_sys, __pyx_n_s_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyUnicode_AsUTF8String(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":12
 * # http://wiki.cython.org/PackageHierarchy
 * 
 * cdef api string get_path_as_string() with gil:             # <<<<<<<<<<<<<<
 *     import sys
 *     return str(sys.path).encode('UTF-8')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("opencog.atomspace.get_path_as_string", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sys);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":16
 *     return str(sys.path).encode('UTF-8')
 * 
 * cdef convert_handle_seq_to_python_list(vector[cHandle] handles):             # <<<<<<<<<<<<<<
 *     cdef vector[cHandle].iterator handle_iter
 *     cdef cHandle handle
 */

static PyObject *__pyx_f_7opencog_9atomspace_convert_handle_seq_to_python_list(std::vector<opencog::Handle>  __pyx_v_handles) {
  std::vector<opencog::Handle> ::iterator __pyx_v_handle_iter;
  opencog::Handle __pyx_v_handle;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_handle_seq_to_python_list", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":19
 *     cdef vector[cHandle].iterator handle_iter
 *     cdef cHandle handle
 *     result = []             # <<<<<<<<<<<<<<
 *     handle_iter = handles.begin()
 *     while handle_iter != handles.end():
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":20
 *     cdef cHandle handle
 *     result = []
 *     handle_iter = handles.begin()             # <<<<<<<<<<<<<<
 *     while handle_iter != handles.end():
 *         handle = deref(handle_iter)
 */
  __pyx_v_handle_iter = __pyx_v_handles.begin();

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":21
 *     result = []
 *     handle_iter = handles.begin()
 *     while handle_iter != handles.end():             # <<<<<<<<<<<<<<
 *         handle = deref(handle_iter)
 *         value = create_python_value_from_c_value(<cValuePtr&>handle)
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_handle_iter != __pyx_v_handles.end()) != 0);
    if (!__pyx_t_2) break;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":22
 *     handle_iter = handles.begin()
 *     while handle_iter != handles.end():
 *         handle = deref(handle_iter)             # <<<<<<<<<<<<<<
 *         value = create_python_value_from_c_value(<cValuePtr&>handle)
 *         result.append(value)
 */
    __pyx_v_handle = (*__pyx_v_handle_iter);

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":23
 *     while handle_iter != handles.end():
 *         handle = deref(handle_iter)
 *         value = create_python_value_from_c_value(<cValuePtr&>handle)             # <<<<<<<<<<<<<<
 *         result.append(value)
 *         inc(handle_iter)
 */
    __pyx_t_1 = __pyx_f_7opencog_9atomspace_create_python_value_from_c_value(((opencog::ValuePtr &)__pyx_v_handle)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 23, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":24
 *         handle = deref(handle_iter)
 *         value = create_python_value_from_c_value(<cValuePtr&>handle)
 *         result.append(value)             # <<<<<<<<<<<<<<
 *         inc(handle_iter)
 *     return result
 */
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_value); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(2, 24, __pyx_L1_error)

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":25
 *         value = create_python_value_from_c_value(<cValuePtr&>handle)
 *         result.append(value)
 *         inc(handle_iter)             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
    (void)((++__pyx_v_handle_iter));
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":26
 *         result.append(value)
 *         inc(handle_iter)
 *     return result             # <<<<<<<<<<<<<<
 * 
 * cdef convert_handle_set_to_python_list(cpp_set[cHandle] handles):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":16
 *     return str(sys.path).encode('UTF-8')
 * 
 * cdef convert_handle_seq_to_python_list(vector[cHandle] handles):             # <<<<<<<<<<<<<<
 *     cdef vector[cHandle].iterator handle_iter
 *     cdef cHandle handle
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.convert_handle_seq_to_python_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":28
 *     return result
 * 
 * cdef convert_handle_set_to_python_list(cpp_set[cHandle] handles):             # <<<<<<<<<<<<<<
 *     return [create_python_value_from_c_value(<cValuePtr&> h) for h in handles]
 * 
 */

static PyObject *__pyx_f_7opencog_9atomspace_convert_handle_set_to_python_list(std::set<opencog::Handle>  __pyx_v_handles) {
  opencog::Handle __pyx_7genexpr__pyx_v_h;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::set<opencog::Handle> ::iterator __pyx_t_2;
  opencog::Handle __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_handle_set_to_python_list", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":29
 * 
 * cdef convert_handle_set_to_python_list(cpp_set[cHandle] handles):
 *     return [create_python_value_from_c_value(<cValuePtr&> h) for h in handles]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_v_handles.begin();
    for (;;) {
      if (!(__pyx_t_2 != __pyx_v_handles.end())) break;
      __pyx_t_3 = *__pyx_t_2;
      ++__pyx_t_2;
      __pyx_7genexpr__pyx_v_h = __pyx_t_3;
      __pyx_t_4 = __pyx_f_7opencog_9atomspace_create_python_value_from_c_value(((opencog::ValuePtr &)__pyx_7genexpr__pyx_v_h)); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 29, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(2, 29, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":28
 *     return result
 * 
 * cdef convert_handle_set_to_python_list(cpp_set[cHandle] handles):             # <<<<<<<<<<<<<<
 *     return [create_python_value_from_c_value(<cValuePtr&> h) for h in handles]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("opencog.atomspace.convert_handle_set_to_python_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":32
 * 
 * 
 * cdef vector[cHandle] atom_list_to_vector(list lst):             # <<<<<<<<<<<<<<
 *     cdef vector[cHandle] handle_vector
 *     for atom in lst:
 */

static std::vector<opencog::Handle>  __pyx_f_7opencog_9atomspace_atom_list_to_vector(PyObject *__pyx_v_lst) {
  std::vector<opencog::Handle>  __pyx_v_handle_vector;
  PyObject *__pyx_v_atom = NULL;
  std::vector<opencog::Handle>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("atom_list_to_vector", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":34
 * cdef vector[cHandle] atom_list_to_vector(list lst):
 *     cdef vector[cHandle] handle_vector
 *     for atom in lst:             # <<<<<<<<<<<<<<
 *         if isinstance(atom, Atom):
 *             handle_vector.push_back(deref((<Atom>(atom)).handle))
 */
  if (unlikely(__pyx_v_lst == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(2, 34, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_lst; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 34, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_atom, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":35
 *     cdef vector[cHandle] handle_vector
 *     for atom in lst:
 *         if isinstance(atom, Atom):             # <<<<<<<<<<<<<<
 *             handle_vector.push_back(deref((<Atom>(atom)).handle))
 *         else:
 */
    __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_atom, __pyx_ptype_7opencog_9atomspace_Atom); 
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (likely(__pyx_t_5)) {

      /* "../../../../opencog/cython/opencog/atomspace_details.pyx":36
 *     for atom in lst:
 *         if isinstance(atom, Atom):
 *             handle_vector.push_back(deref((<Atom>(atom)).handle))             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("outgoing set should contain atoms, got {0} instead".format(type(atom)))
 */
      try {
        __pyx_v_handle_vector.push_back((*((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_atom)->handle));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(2, 36, __pyx_L1_error)
      }

      /* "../../../../opencog/cython/opencog/atomspace_details.pyx":35
 *     cdef vector[cHandle] handle_vector
 *     for atom in lst:
 *         if isinstance(atom, Atom):             # <<<<<<<<<<<<<<
 *             handle_vector.push_back(deref((<Atom>(atom)).handle))
 *         else:
 */
      goto __pyx_L5;
    }

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":38
 *             handle_vector.push_back(deref((<Atom>(atom)).handle))
 *         else:
 *             raise TypeError("outgoing set should contain atoms, got {0} instead".format(type(atom)))             # <<<<<<<<<<<<<<
 *     return handle_vector
 * 
 */
    /*else*/ {
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_outgoing_set_should_contain_atom, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 38, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, ((PyObject *)Py_TYPE(__pyx_v_atom))) : __Pyx_PyObject_CallOneArg(__pyx_t_6, ((PyObject *)Py_TYPE(__pyx_v_atom)));
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 38, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 38, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(2, 38, __pyx_L1_error)
    }
    __pyx_L5:;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":34
 * cdef vector[cHandle] atom_list_to_vector(list lst):
 *     cdef vector[cHandle] handle_vector
 *     for atom in lst:             # <<<<<<<<<<<<<<
 *         if isinstance(atom, Atom):
 *             handle_vector.push_back(deref((<Atom>(atom)).handle))
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":39
 *         else:
 *             raise TypeError("outgoing set should contain atoms, got {0} instead".format(type(atom)))
 *     return handle_vector             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_handle_vector;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":32
 * 
 * 
 * cdef vector[cHandle] atom_list_to_vector(list lst):             # <<<<<<<<<<<<<<
 *     cdef vector[cHandle] handle_vector
 *     for atom in lst:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("opencog.atomspace.atom_list_to_vector", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_atom);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":42
 * 
 * 
 * cdef AtomSpace_factory(cAtomSpace *to_wrap):             # <<<<<<<<<<<<<<
 *     cdef AtomSpace instance = AtomSpace.__new__(AtomSpace)
 *     instance.atomspace = to_wrap
 */

static PyObject *__pyx_f_7opencog_9atomspace_AtomSpace_factory(opencog::AtomSpace *__pyx_v_to_wrap) {
  struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_instance = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("AtomSpace_factory", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":43
 * 
 * cdef AtomSpace_factory(cAtomSpace *to_wrap):
 *     cdef AtomSpace instance = AtomSpace.__new__(AtomSpace)             # <<<<<<<<<<<<<<
 *     instance.atomspace = to_wrap
 *     # print "Debug: atomspace factory={0:x}".format(<long unsigned int>to_wrap)
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_7opencog_9atomspace_AtomSpace(((PyTypeObject *)__pyx_ptype_7opencog_9atomspace_AtomSpace), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 43, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_instance = ((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":44
 * cdef AtomSpace_factory(cAtomSpace *to_wrap):
 *     cdef AtomSpace instance = AtomSpace.__new__(AtomSpace)
 *     instance.atomspace = to_wrap             # <<<<<<<<<<<<<<
 *     # print "Debug: atomspace factory={0:x}".format(<long unsigned int>to_wrap)
 *     return instance
 */
  __pyx_v_instance->atomspace = __pyx_v_to_wrap;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":46
 *     instance.atomspace = to_wrap
 *     # print "Debug: atomspace factory={0:x}".format(<long unsigned int>to_wrap)
 *     return instance             # <<<<<<<<<<<<<<
 * 
 * cdef AtomSpace_factoid(cValuePtr to_wrap):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = ((PyObject *)__pyx_v_instance);
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":42
 * 
 * 
 * cdef AtomSpace_factory(cAtomSpace *to_wrap):             # <<<<<<<<<<<<<<
 *     cdef AtomSpace instance = AtomSpace.__new__(AtomSpace)
 *     instance.atomspace = to_wrap
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace_factory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":48
 *     return instance
 * 
 * cdef AtomSpace_factoid(cValuePtr to_wrap):             # <<<<<<<<<<<<<<
 *     cdef AtomSpace instance = AtomSpace.__new__(AtomSpace)
 *     instance.asp = to_wrap
 */

static PyObject *__pyx_f_7opencog_9atomspace_AtomSpace_factoid(opencog::ValuePtr __pyx_v_to_wrap) {
  struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_instance = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("AtomSpace_factoid", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":49
 * 
 * cdef AtomSpace_factoid(cValuePtr to_wrap):
 *     cdef AtomSpace instance = AtomSpace.__new__(AtomSpace)             # <<<<<<<<<<<<<<
 *     instance.asp = to_wrap
 *     instance.atomspace = <cAtomSpace*> to_wrap.get()
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_7opencog_9atomspace_AtomSpace(((PyTypeObject *)__pyx_ptype_7opencog_9atomspace_AtomSpace), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 49, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_instance = ((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":50
 * cdef AtomSpace_factoid(cValuePtr to_wrap):
 *     cdef AtomSpace instance = AtomSpace.__new__(AtomSpace)
 *     instance.asp = to_wrap             # <<<<<<<<<<<<<<
 *     instance.atomspace = <cAtomSpace*> to_wrap.get()
 *     # print "Debug: atomspace factory={0:x}".format(<long unsigned int>to_wrap.get())
 */
  __pyx_v_instance->asp = __pyx_v_to_wrap;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":51
 *     cdef AtomSpace instance = AtomSpace.__new__(AtomSpace)
 *     instance.asp = to_wrap
 *     instance.atomspace = <cAtomSpace*> to_wrap.get()             # <<<<<<<<<<<<<<
 *     # print "Debug: atomspace factory={0:x}".format(<long unsigned int>to_wrap.get())
 *     return instance
 */
  __pyx_v_instance->atomspace = ((opencog::AtomSpace *)__pyx_v_to_wrap.get());

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":53
 *     instance.atomspace = <cAtomSpace*> to_wrap.get()
 *     # print "Debug: atomspace factory={0:x}".format(<long unsigned int>to_wrap.get())
 *     return instance             # <<<<<<<<<<<<<<
 * 
 * cdef class AtomSpace(Value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_instance));
  __pyx_r = ((PyObject *)__pyx_v_instance);
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":48
 *     return instance
 * 
 * cdef AtomSpace_factoid(cValuePtr to_wrap):             # <<<<<<<<<<<<<<
 *     cdef AtomSpace instance = AtomSpace.__new__(AtomSpace)
 *     instance.asp = to_wrap
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace_factoid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_instance);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":67
 *     # works, but is not very safe, and has a certain feeling of "ick"
 *     # about it.  But I can't find any better way.
 *     def __init__(self, long addr = 0, object parent=None):             # <<<<<<<<<<<<<<
 *         if (addr == 0) :
 *             self.asp = createAtomSpace(<cAtomSpace*> NULL)
 */

/* Python wrapper */
static int __pyx_pw_7opencog_9atomspace_9AtomSpace_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7opencog_9atomspace_9AtomSpace_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_addr;
  PyObject *__pyx_v_parent = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_addr,&__pyx_n_s_parent,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_addr);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parent);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(2, 67, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_addr = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_addr == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 67, __pyx_L3_error)
    } else {
      __pyx_v_addr = ((long)0);
    }
    __pyx_v_parent = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 67, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace___init__(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), __pyx_v_addr, __pyx_v_parent);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opencog_9atomspace_9AtomSpace___init__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, long __pyx_v_addr, PyObject *__pyx_v_parent) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":68
 *     # about it.  But I can't find any better way.
 *     def __init__(self, long addr = 0, object parent=None):
 *         if (addr == 0) :             # <<<<<<<<<<<<<<
 *             self.asp = createAtomSpace(<cAtomSpace*> NULL)
 *             self.atomspace = <cAtomSpace*> self.asp.get()
 */
  __pyx_t_1 = ((__pyx_v_addr == 0) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":69
 *     def __init__(self, long addr = 0, object parent=None):
 *         if (addr == 0) :
 *             self.asp = createAtomSpace(<cAtomSpace*> NULL)             # <<<<<<<<<<<<<<
 *             self.atomspace = <cAtomSpace*> self.asp.get()
 *         else :
 */
    __pyx_v_self->asp = opencog::createAtomSpace(((opencog::AtomSpace *)NULL));

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":70
 *         if (addr == 0) :
 *             self.asp = createAtomSpace(<cAtomSpace*> NULL)
 *             self.atomspace = <cAtomSpace*> self.asp.get()             # <<<<<<<<<<<<<<
 *         else :
 *             self.atomspace = <cAtomSpace*> PyLong_AsVoidPtr(addr)
 */
    __pyx_v_self->atomspace = ((opencog::AtomSpace *)__pyx_v_self->asp.get());

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":68
 *     # about it.  But I can't find any better way.
 *     def __init__(self, long addr = 0, object parent=None):
 *         if (addr == 0) :             # <<<<<<<<<<<<<<
 *             self.asp = createAtomSpace(<cAtomSpace*> NULL)
 *             self.atomspace = <cAtomSpace*> self.asp.get()
 */
    goto __pyx_L3;
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":72
 *             self.atomspace = <cAtomSpace*> self.asp.get()
 *         else :
 *             self.atomspace = <cAtomSpace*> PyLong_AsVoidPtr(addr)             # <<<<<<<<<<<<<<
 *         self.parent_atomspace = parent
 * 
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_addr); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 72, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_self->atomspace = ((opencog::AtomSpace *)PyLong_AsVoidPtr(__pyx_t_2));
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":73
 *         else :
 *             self.atomspace = <cAtomSpace*> PyLong_AsVoidPtr(addr)
 *         self.parent_atomspace = parent             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(as_1, as_2, int op):
 */
  __Pyx_INCREF(__pyx_v_parent);
  __Pyx_GIVEREF(__pyx_v_parent);
  __Pyx_GOTREF(__pyx_v_self->parent_atomspace);
  __Pyx_DECREF(__pyx_v_self->parent_atomspace);
  __pyx_v_self->parent_atomspace = __pyx_v_parent;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":67
 *     # works, but is not very safe, and has a certain feeling of "ick"
 *     # about it.  But I can't find any better way.
 *     def __init__(self, long addr = 0, object parent=None):             # <<<<<<<<<<<<<<
 *         if (addr == 0) :
 *             self.asp = createAtomSpace(<cAtomSpace*> NULL)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":75
 *         self.parent_atomspace = parent
 * 
 *     def __richcmp__(as_1, as_2, int op):             # <<<<<<<<<<<<<<
 *         if not isinstance(as_1, AtomSpace) or not isinstance(as_2, AtomSpace):
 *             return NotImplemented
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_3__richcmp__(PyObject *__pyx_v_as_1, PyObject *__pyx_v_as_2, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_3__richcmp__(PyObject *__pyx_v_as_1, PyObject *__pyx_v_as_2, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_2__richcmp__(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_as_1), ((PyObject *)__pyx_v_as_2), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_2__richcmp__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_as_1, PyObject *__pyx_v_as_2, int __pyx_v_op) {
  struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_atomspace_1 = 0;
  struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_atomspace_2 = 0;
  opencog::AtomSpace *__pyx_v_c_atomspace_1;
  opencog::AtomSpace *__pyx_v_c_atomspace_2;
  int __pyx_v_is_equal;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  opencog::AtomSpace *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":76
 * 
 *     def __richcmp__(as_1, as_2, int op):
 *         if not isinstance(as_1, AtomSpace) or not isinstance(as_2, AtomSpace):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         cdef AtomSpace atomspace_1 = <AtomSpace>as_1
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_as_1), __pyx_ptype_7opencog_9atomspace_AtomSpace); 
  __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_as_2, __pyx_ptype_7opencog_9atomspace_AtomSpace); 
  __pyx_t_2 = ((!(__pyx_t_3 != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":77
 *     def __richcmp__(as_1, as_2, int op):
 *         if not isinstance(as_1, AtomSpace) or not isinstance(as_2, AtomSpace):
 *             return NotImplemented             # <<<<<<<<<<<<<<
 *         cdef AtomSpace atomspace_1 = <AtomSpace>as_1
 *         cdef AtomSpace atomspace_2 = <AtomSpace>as_1
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_builtin_NotImplemented);
    __pyx_r = __pyx_builtin_NotImplemented;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":76
 * 
 *     def __richcmp__(as_1, as_2, int op):
 *         if not isinstance(as_1, AtomSpace) or not isinstance(as_2, AtomSpace):             # <<<<<<<<<<<<<<
 *             return NotImplemented
 *         cdef AtomSpace atomspace_1 = <AtomSpace>as_1
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":78
 *         if not isinstance(as_1, AtomSpace) or not isinstance(as_2, AtomSpace):
 *             return NotImplemented
 *         cdef AtomSpace atomspace_1 = <AtomSpace>as_1             # <<<<<<<<<<<<<<
 *         cdef AtomSpace atomspace_2 = <AtomSpace>as_1
 * 
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_as_1);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_atomspace_1 = ((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":79
 *             return NotImplemented
 *         cdef AtomSpace atomspace_1 = <AtomSpace>as_1
 *         cdef AtomSpace atomspace_2 = <AtomSpace>as_1             # <<<<<<<<<<<<<<
 * 
 *         cdef cAtomSpace* c_atomspace_1 = atomspace_1.atomspace
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_as_1);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_atomspace_2 = ((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":81
 *         cdef AtomSpace atomspace_2 = <AtomSpace>as_1
 * 
 *         cdef cAtomSpace* c_atomspace_1 = atomspace_1.atomspace             # <<<<<<<<<<<<<<
 *         cdef cAtomSpace* c_atomspace_2 = atomspace_2.atomspace
 * 
 */
  __pyx_t_5 = __pyx_v_atomspace_1->atomspace;
  __pyx_v_c_atomspace_1 = __pyx_t_5;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":82
 * 
 *         cdef cAtomSpace* c_atomspace_1 = atomspace_1.atomspace
 *         cdef cAtomSpace* c_atomspace_2 = atomspace_2.atomspace             # <<<<<<<<<<<<<<
 * 
 *         is_equal = True
 */
  __pyx_t_5 = __pyx_v_atomspace_2->atomspace;
  __pyx_v_c_atomspace_2 = __pyx_t_5;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":84
 *         cdef cAtomSpace* c_atomspace_2 = atomspace_2.atomspace
 * 
 *         is_equal = True             # <<<<<<<<<<<<<<
 *         if c_atomspace_1 != c_atomspace_2:
 *             is_equal = False
 */
  __pyx_v_is_equal = 1;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":85
 * 
 *         is_equal = True
 *         if c_atomspace_1 != c_atomspace_2:             # <<<<<<<<<<<<<<
 *             is_equal = False
 *         if op == 2: # ==
 */
  __pyx_t_1 = ((__pyx_v_c_atomspace_1 != __pyx_v_c_atomspace_2) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":86
 *         is_equal = True
 *         if c_atomspace_1 != c_atomspace_2:
 *             is_equal = False             # <<<<<<<<<<<<<<
 *         if op == 2: # ==
 *             return is_equal
 */
    __pyx_v_is_equal = 0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":85
 * 
 *         is_equal = True
 *         if c_atomspace_1 != c_atomspace_2:             # <<<<<<<<<<<<<<
 *             is_equal = False
 *         if op == 2: # ==
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":87
 *         if c_atomspace_1 != c_atomspace_2:
 *             is_equal = False
 *         if op == 2: # ==             # <<<<<<<<<<<<<<
 *             return is_equal
 *         elif op == 3: # !=
 */
  switch (__pyx_v_op) {
    case 2:

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":88
 *             is_equal = False
 *         if op == 2: # ==
 *             return is_equal             # <<<<<<<<<<<<<<
 *         elif op == 3: # !=
 *             return not is_equal
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_is_equal); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":87
 *         if c_atomspace_1 != c_atomspace_2:
 *             is_equal = False
 *         if op == 2: # ==             # <<<<<<<<<<<<<<
 *             return is_equal
 *         elif op == 3: # !=
 */
    break;
    case 3:

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":90
 *             return is_equal
 *         elif op == 3: # !=
 *             return not is_equal             # <<<<<<<<<<<<<<
 * 
 *     def add(self, Type t, name=None, out=None, TruthValue tv=None):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyBool_FromLong((!(__pyx_v_is_equal != 0))); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":89
 *         if op == 2: # ==
 *             return is_equal
 *         elif op == 3: # !=             # <<<<<<<<<<<<<<
 *             return not is_equal
 * 
 */
    break;
    default: break;
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":75
 *         self.parent_atomspace = parent
 * 
 *     def __richcmp__(as_1, as_2, int op):             # <<<<<<<<<<<<<<
 *         if not isinstance(as_1, AtomSpace) or not isinstance(as_2, AtomSpace):
 *             return NotImplemented
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atomspace_1);
  __Pyx_XDECREF((PyObject *)__pyx_v_atomspace_2);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":92
 *             return not is_equal
 * 
 *     def add(self, Type t, name=None, out=None, TruthValue tv=None):             # <<<<<<<<<<<<<<
 *         """ add method that determines exact method to call from type """
 *         if is_a(t, types.Node):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_5add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_4add[] = " add method that determines exact method to call from type ";
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_5add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_7opencog_9atomspace_Type __pyx_v_t;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_out = 0;
  struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_tv = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_name,&__pyx_n_s_out,&__pyx_n_s_tv,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = (PyObject *)((struct __pyx_obj_7opencog_9atomspace_TruthValue *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tv);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add") < 0)) __PYX_ERR(2, 92, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_t = __Pyx_PyInt_As_short(values[0]); if (unlikely((__pyx_v_t == (short)-1) && PyErr_Occurred())) __PYX_ERR(2, 92, __pyx_L3_error)
    __pyx_v_name = values[1];
    __pyx_v_out = values[2];
    __pyx_v_tv = ((struct __pyx_obj_7opencog_9atomspace_TruthValue *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 92, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tv), __pyx_ptype_7opencog_9atomspace_TruthValue, 1, "tv", 0))) __PYX_ERR(2, 92, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_4add(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), __pyx_v_t, __pyx_v_name, __pyx_v_out, __pyx_v_tv);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_4add(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t, PyObject *__pyx_v_name, PyObject *__pyx_v_out, struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_tv) {
  PyObject *__pyx_v_atom = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":94
 *     def add(self, Type t, name=None, out=None, TruthValue tv=None):
 *         """ add method that determines exact method to call from type """
 *         if is_a(t, types.Node):             # <<<<<<<<<<<<<<
 *             assert out is None, "Nodes can't have outgoing sets"
 *             atom = self.add_node(t, name, tv)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_is_a); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_short(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_types); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Node); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 94, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 94, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_5);
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(2, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_8) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":95
 *         """ add method that determines exact method to call from type """
 *         if is_a(t, types.Node):
 *             assert out is None, "Nodes can't have outgoing sets"             # <<<<<<<<<<<<<<
 *             atom = self.add_node(t, name, tv)
 *         else:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_8 = (__pyx_v_out == Py_None);
      if (unlikely(!(__pyx_t_8 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_Nodes_can_t_have_outgoing_sets);
        __PYX_ERR(2, 95, __pyx_L1_error)
      }
    }
    #endif

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":96
 *         if is_a(t, types.Node):
 *             assert out is None, "Nodes can't have outgoing sets"
 *             atom = self.add_node(t, name, tv)             # <<<<<<<<<<<<<<
 *         else:
 *             assert name is None, "Links can't have names"
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_node); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyInt_From_short(__pyx_v_t); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_t_7, __pyx_v_name, ((PyObject *)__pyx_v_tv)};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 96, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_t_7, __pyx_v_name, ((PyObject *)__pyx_v_tv)};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 96, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 96, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_6, __pyx_t_7);
      __Pyx_INCREF(__pyx_v_name);
      __Pyx_GIVEREF(__pyx_v_name);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_6, __pyx_v_name);
      __Pyx_INCREF(((PyObject *)__pyx_v_tv));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_tv));
      PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_6, ((PyObject *)__pyx_v_tv));
      __pyx_t_7 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 96, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_atom = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":94
 *     def add(self, Type t, name=None, out=None, TruthValue tv=None):
 *         """ add method that determines exact method to call from type """
 *         if is_a(t, types.Node):             # <<<<<<<<<<<<<<
 *             assert out is None, "Nodes can't have outgoing sets"
 *             atom = self.add_node(t, name, tv)
 */
    goto __pyx_L3;
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":98
 *             atom = self.add_node(t, name, tv)
 *         else:
 *             assert name is None, "Links can't have names"             # <<<<<<<<<<<<<<
 *             atom = self.add_link(t, out, tv)
 *         return atom
 */
  /*else*/ {
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_8 = (__pyx_v_name == Py_None);
      if (unlikely(!(__pyx_t_8 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_Links_can_t_have_names);
        __PYX_ERR(2, 98, __pyx_L1_error)
      }
    }
    #endif

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":99
 *         else:
 *             assert name is None, "Links can't have names"
 *             atom = self.add_link(t, out, tv)             # <<<<<<<<<<<<<<
 *         return atom
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_link); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_From_short(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_3, __pyx_v_out, ((PyObject *)__pyx_v_tv)};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 99, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_3, __pyx_v_out, ((PyObject *)__pyx_v_tv)};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 99, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 99, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, __pyx_t_3);
      __Pyx_INCREF(__pyx_v_out);
      __Pyx_GIVEREF(__pyx_v_out);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, __pyx_v_out);
      __Pyx_INCREF(((PyObject *)__pyx_v_tv));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_tv));
      PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_6, ((PyObject *)__pyx_v_tv));
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 99, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_atom = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":100
 *             assert name is None, "Links can't have names"
 *             atom = self.add_link(t, out, tv)
 *         return atom             # <<<<<<<<<<<<<<
 * 
 *     def add_atom(self, Atom atom):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_atom);
  __pyx_r = __pyx_v_atom;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":92
 *             return not is_equal
 * 
 *     def add(self, Type t, name=None, out=None, TruthValue tv=None):             # <<<<<<<<<<<<<<
 *         """ add method that determines exact method to call from type """
 *         if is_a(t, types.Node):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_atom);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":102
 *         return atom
 * 
 *     def add_atom(self, Atom atom):             # <<<<<<<<<<<<<<
 *         cdef cHandle result = self.atomspace.add_atom(atom.get_c_handle())
 *         if result == result.UNDEFINED:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_7add_atom(PyObject *__pyx_v_self, PyObject *__pyx_v_atom); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_7add_atom(PyObject *__pyx_v_self, PyObject *__pyx_v_atom) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_atom (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_atom), __pyx_ptype_7opencog_9atomspace_Atom, 1, "atom", 0))) __PYX_ERR(2, 102, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_6add_atom(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), ((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_atom));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_6add_atom(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_atom) {
  opencog::Handle __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  opencog::Handle __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_atom", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":103
 * 
 *     def add_atom(self, Atom atom):
 *         cdef cHandle result = self.atomspace.add_atom(atom.get_c_handle())             # <<<<<<<<<<<<<<
 *         if result == result.UNDEFINED:
 *             return None
 */
  try {
    __pyx_t_1 = __pyx_v_self->atomspace->add_atom(((struct __pyx_vtabstruct_7opencog_9atomspace_Atom *)__pyx_v_atom->__pyx_base.__pyx_vtab)->get_c_handle(__pyx_v_atom));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 103, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_1;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":104
 *     def add_atom(self, Atom atom):
 *         cdef cHandle result = self.atomspace.add_atom(atom.get_c_handle())
 *         if result == result.UNDEFINED:             # <<<<<<<<<<<<<<
 *             return None
 *         return create_python_value_from_c_value(<cValuePtr&>result)
 */
  __pyx_t_2 = ((__pyx_v_result == __pyx_v_result.UNDEFINED) != 0);
  if (__pyx_t_2) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":105
 *         cdef cHandle result = self.atomspace.add_atom(atom.get_c_handle())
 *         if result == result.UNDEFINED:
 *             return None             # <<<<<<<<<<<<<<
 *         return create_python_value_from_c_value(<cValuePtr&>result)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":104
 *     def add_atom(self, Atom atom):
 *         cdef cHandle result = self.atomspace.add_atom(atom.get_c_handle())
 *         if result == result.UNDEFINED:             # <<<<<<<<<<<<<<
 *             return None
 *         return create_python_value_from_c_value(<cValuePtr&>result)
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":106
 *         if result == result.UNDEFINED:
 *             return None
 *         return create_python_value_from_c_value(<cValuePtr&>result)             # <<<<<<<<<<<<<<
 * 
 *     def add_node(self, Type t, atom_name, TruthValue tv=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_f_7opencog_9atomspace_create_python_value_from_c_value(((opencog::ValuePtr &)__pyx_v_result)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":102
 *         return atom
 * 
 *     def add_atom(self, Atom atom):             # <<<<<<<<<<<<<<
 *         cdef cHandle result = self.atomspace.add_atom(atom.get_c_handle())
 *         if result == result.UNDEFINED:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.add_atom", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":108
 *         return create_python_value_from_c_value(<cValuePtr&>result)
 * 
 *     def add_node(self, Type t, atom_name, TruthValue tv=None):             # <<<<<<<<<<<<<<
 *         """ Add Node to AtomSpace
 *         @todo support [0.5,0.5] format for TruthValue.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_9add_node(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_8add_node[] = " Add Node to AtomSpace\n        @todo support [0.5,0.5] format for TruthValue.\n        @todo support type name for type.\n        @returns the newly created Atom\n        ";
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_9add_node(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_7opencog_9atomspace_Type __pyx_v_t;
  PyObject *__pyx_v_atom_name = 0;
  struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_tv = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_node (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_atom_name,&__pyx_n_s_tv,0};
    PyObject* values[3] = {0,0,0};
    values[2] = (PyObject *)((struct __pyx_obj_7opencog_9atomspace_TruthValue *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atom_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_node", 0, 2, 3, 1); __PYX_ERR(2, 108, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tv);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_node") < 0)) __PYX_ERR(2, 108, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_t = __Pyx_PyInt_As_short(values[0]); if (unlikely((__pyx_v_t == (short)-1) && PyErr_Occurred())) __PYX_ERR(2, 108, __pyx_L3_error)
    __pyx_v_atom_name = values[1];
    __pyx_v_tv = ((struct __pyx_obj_7opencog_9atomspace_TruthValue *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_node", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 108, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.add_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tv), __pyx_ptype_7opencog_9atomspace_TruthValue, 1, "tv", 0))) __PYX_ERR(2, 108, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_8add_node(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), __pyx_v_t, __pyx_v_atom_name, __pyx_v_tv);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_8add_node(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t, PyObject *__pyx_v_atom_name, struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_tv) {
  std::string __pyx_v_name;
  opencog::Handle __pyx_v_result;
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_atom = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  opencog::Handle __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_node", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":114
 *         @returns the newly created Atom
 *         """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef string name = atom_name.encode('UTF-8')
 */
  __pyx_t_1 = ((__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":115
 *         """
 *         if self.atomspace == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef string name = atom_name.encode('UTF-8')
 *         cdef cHandle result = self.atomspace.xadd_node(t, name)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":114
 *         @returns the newly created Atom
 *         """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef string name = atom_name.encode('UTF-8')
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":116
 *         if self.atomspace == NULL:
 *             return None
 *         cdef string name = atom_name.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         cdef cHandle result = self.atomspace.xadd_node(t, name)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_atom_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_kp_u_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_u_UTF_8);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_name = __pyx_t_5;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":117
 *             return None
 *         cdef string name = atom_name.encode('UTF-8')
 *         cdef cHandle result = self.atomspace.xadd_node(t, name)             # <<<<<<<<<<<<<<
 * 
 *         if result == result.UNDEFINED: return None
 */
  try {
    __pyx_t_6 = __pyx_v_self->atomspace->xadd_node(__pyx_v_t, __pyx_v_name);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 117, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_6;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":119
 *         cdef cHandle result = self.atomspace.xadd_node(t, name)
 * 
 *         if result == result.UNDEFINED: return None             # <<<<<<<<<<<<<<
 *         atom = Atom.createAtom(result);
 *         if tv :
 */
  __pyx_t_1 = ((__pyx_v_result == __pyx_v_result.UNDEFINED) != 0);
  if (__pyx_t_1) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":120
 * 
 *         if result == result.UNDEFINED: return None
 *         atom = Atom.createAtom(result);             # <<<<<<<<<<<<<<
 *         if tv :
 *             atom.tv = tv
 */
  __pyx_t_2 = ((PyObject *)__pyx_f_7opencog_9atomspace_4Atom_createAtom(__pyx_v_result)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_atom = ((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":121
 *         if result == result.UNDEFINED: return None
 *         atom = Atom.createAtom(result);
 *         if tv :             # <<<<<<<<<<<<<<
 *             atom.tv = tv
 *         return atom
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_tv)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 121, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":122
 *         atom = Atom.createAtom(result);
 *         if tv :
 *             atom.tv = tv             # <<<<<<<<<<<<<<
 *         return atom
 * 
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_atom), __pyx_n_s_tv, ((PyObject *)__pyx_v_tv)) < 0) __PYX_ERR(2, 122, __pyx_L1_error)

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":121
 *         if result == result.UNDEFINED: return None
 *         atom = Atom.createAtom(result);
 *         if tv :             # <<<<<<<<<<<<<<
 *             atom.tv = tv
 *         return atom
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":123
 *         if tv :
 *             atom.tv = tv
 *         return atom             # <<<<<<<<<<<<<<
 * 
 *     def add_link(self, Type t, outgoing, TruthValue tv=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_atom));
  __pyx_r = ((PyObject *)__pyx_v_atom);
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":108
 *         return create_python_value_from_c_value(<cValuePtr&>result)
 * 
 *     def add_node(self, Type t, atom_name, TruthValue tv=None):             # <<<<<<<<<<<<<<
 *         """ Add Node to AtomSpace
 *         @todo support [0.5,0.5] format for TruthValue.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.add_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atom);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":125
 *         return atom
 * 
 *     def add_link(self, Type t, outgoing, TruthValue tv=None):             # <<<<<<<<<<<<<<
 *         """ Add Link to AtomSpace
 *         @todo support [0.5,0.5] format for TruthValue.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_11add_link(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_10add_link[] = " Add Link to AtomSpace\n        @todo support [0.5,0.5] format for TruthValue.\n        @todo support type name for type.\n        @returns handle referencing the newly created Atom\n        ";
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_11add_link(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_7opencog_9atomspace_Type __pyx_v_t;
  PyObject *__pyx_v_outgoing = 0;
  struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_tv = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_link (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_outgoing,&__pyx_n_s_tv,0};
    PyObject* values[3] = {0,0,0};
    values[2] = (PyObject *)((struct __pyx_obj_7opencog_9atomspace_TruthValue *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_outgoing)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_link", 0, 2, 3, 1); __PYX_ERR(2, 125, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tv);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_link") < 0)) __PYX_ERR(2, 125, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_t = __Pyx_PyInt_As_short(values[0]); if (unlikely((__pyx_v_t == (short)-1) && PyErr_Occurred())) __PYX_ERR(2, 125, __pyx_L3_error)
    __pyx_v_outgoing = values[1];
    __pyx_v_tv = ((struct __pyx_obj_7opencog_9atomspace_TruthValue *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_link", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 125, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.add_link", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tv), __pyx_ptype_7opencog_9atomspace_TruthValue, 1, "tv", 0))) __PYX_ERR(2, 125, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_10add_link(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), __pyx_v_t, __pyx_v_outgoing, __pyx_v_tv);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_10add_link(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t, PyObject *__pyx_v_outgoing, struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_tv) {
  std::vector<opencog::Handle>  __pyx_v_handle_vector;
  opencog::Handle __pyx_v_result;
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_atom = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  opencog::Handle __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_link", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":131
 *         @returns handle referencing the newly created Atom
 *         """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         # create temporary cpp vector
 */
  __pyx_t_1 = ((__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":132
 *         """
 *         if self.atomspace == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         # create temporary cpp vector
 *         cdef vector[cHandle] handle_vector = atom_list_to_vector(outgoing)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":131
 *         @returns handle referencing the newly created Atom
 *         """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         # create temporary cpp vector
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":134
 *             return None
 *         # create temporary cpp vector
 *         cdef vector[cHandle] handle_vector = atom_list_to_vector(outgoing)             # <<<<<<<<<<<<<<
 *         cdef cHandle result
 *         result = self.atomspace.xadd_link(t, handle_vector)
 */
  if (!(likely(PyList_CheckExact(__pyx_v_outgoing))||((__pyx_v_outgoing) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_outgoing)->tp_name), 0))) __PYX_ERR(2, 134, __pyx_L1_error)
  __pyx_v_handle_vector = __pyx_f_7opencog_9atomspace_atom_list_to_vector(((PyObject*)__pyx_v_outgoing));

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":136
 *         cdef vector[cHandle] handle_vector = atom_list_to_vector(outgoing)
 *         cdef cHandle result
 *         result = self.atomspace.xadd_link(t, handle_vector)             # <<<<<<<<<<<<<<
 *         if result == result.UNDEFINED: return None
 *         atom = Atom.createAtom(result);
 */
  try {
    __pyx_t_2 = __pyx_v_self->atomspace->xadd_link(__pyx_v_t, __pyx_v_handle_vector);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 136, __pyx_L1_error)
  }
  __pyx_v_result = __pyx_t_2;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":137
 *         cdef cHandle result
 *         result = self.atomspace.xadd_link(t, handle_vector)
 *         if result == result.UNDEFINED: return None             # <<<<<<<<<<<<<<
 *         atom = Atom.createAtom(result);
 *         if tv :
 */
  __pyx_t_1 = ((__pyx_v_result == __pyx_v_result.UNDEFINED) != 0);
  if (__pyx_t_1) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":138
 *         result = self.atomspace.xadd_link(t, handle_vector)
 *         if result == result.UNDEFINED: return None
 *         atom = Atom.createAtom(result);             # <<<<<<<<<<<<<<
 *         if tv :
 *             atom.tv = tv
 */
  __pyx_t_3 = ((PyObject *)__pyx_f_7opencog_9atomspace_4Atom_createAtom(__pyx_v_result)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_atom = ((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":139
 *         if result == result.UNDEFINED: return None
 *         atom = Atom.createAtom(result);
 *         if tv :             # <<<<<<<<<<<<<<
 *             atom.tv = tv
 *         return atom
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_tv)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 139, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":140
 *         atom = Atom.createAtom(result);
 *         if tv :
 *             atom.tv = tv             # <<<<<<<<<<<<<<
 *         return atom
 * 
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_atom), __pyx_n_s_tv, ((PyObject *)__pyx_v_tv)) < 0) __PYX_ERR(2, 140, __pyx_L1_error)

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":139
 *         if result == result.UNDEFINED: return None
 *         atom = Atom.createAtom(result);
 *         if tv :             # <<<<<<<<<<<<<<
 *             atom.tv = tv
 *         return atom
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":141
 *         if tv :
 *             atom.tv = tv
 *         return atom             # <<<<<<<<<<<<<<
 * 
 *     def is_valid(self, atom):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_atom));
  __pyx_r = ((PyObject *)__pyx_v_atom);
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":125
 *         return atom
 * 
 *     def add_link(self, Type t, outgoing, TruthValue tv=None):             # <<<<<<<<<<<<<<
 *         """ Add Link to AtomSpace
 *         @todo support [0.5,0.5] format for TruthValue.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.add_link", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atom);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":143
 *         return atom
 * 
 *     def is_valid(self, atom):             # <<<<<<<<<<<<<<
 *         """ Check whether the passed handle refers to an actual atom
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_13is_valid(PyObject *__pyx_v_self, PyObject *__pyx_v_atom); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_12is_valid[] = " Check whether the passed handle refers to an actual atom\n        ";
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_13is_valid(PyObject *__pyx_v_self, PyObject *__pyx_v_atom) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_valid (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_12is_valid(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), ((PyObject *)__pyx_v_atom));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_12is_valid(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, PyObject *__pyx_v_atom) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_valid", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":146
 *         """ Check whether the passed handle refers to an actual atom
 *         """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return False
 *         try:
 */
  __pyx_t_1 = ((__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":147
 *         """
 *         if self.atomspace == NULL:
 *             return False             # <<<<<<<<<<<<<<
 *         try:
 *             assert isinstance(atom, Atom)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":146
 *         """ Check whether the passed handle refers to an actual atom
 *         """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return False
 *         try:
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":148
 *         if self.atomspace == NULL:
 *             return False
 *         try:             # <<<<<<<<<<<<<<
 *             assert isinstance(atom, Atom)
 *         except AssertionError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "../../../../opencog/cython/opencog/atomspace_details.pyx":149
 *             return False
 *         try:
 *             assert isinstance(atom, Atom)             # <<<<<<<<<<<<<<
 *         except AssertionError:
 *             raise TypeError("Need Atom object")
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_atom, __pyx_ptype_7opencog_9atomspace_Atom); 
        if (unlikely(!(__pyx_t_1 != 0))) {
          PyErr_SetNone(PyExc_AssertionError);
          __PYX_ERR(2, 149, __pyx_L4_error)
        }
      }
      #endif

      /* "../../../../opencog/cython/opencog/atomspace_details.pyx":148
 *         if self.atomspace == NULL:
 *             return False
 *         try:             # <<<<<<<<<<<<<<
 *             assert isinstance(atom, Atom)
 *         except AssertionError:
 */
    }
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":150
 *         try:
 *             assert isinstance(atom, Atom)
 *         except AssertionError:             # <<<<<<<<<<<<<<
 *             raise TypeError("Need Atom object")
 *         if self.atomspace.is_valid_handle(deref((<Atom>atom).handle)):
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AssertionError);
    if (__pyx_t_5) {
      __Pyx_AddTraceback("opencog.atomspace.AtomSpace.is_valid", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(2, 150, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "../../../../opencog/cython/opencog/atomspace_details.pyx":151
 *             assert isinstance(atom, Atom)
 *         except AssertionError:
 *             raise TypeError("Need Atom object")             # <<<<<<<<<<<<<<
 *         if self.atomspace.is_valid_handle(deref((<Atom>atom).handle)):
 *             return True
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 151, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(2, 151, __pyx_L6_except_error)
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":148
 *         if self.atomspace == NULL:
 *             return False
 *         try:             # <<<<<<<<<<<<<<
 *             assert isinstance(atom, Atom)
 *         except AssertionError:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L9_try_end:;
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":152
 *         except AssertionError:
 *             raise TypeError("Need Atom object")
 *         if self.atomspace.is_valid_handle(deref((<Atom>atom).handle)):             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
  __pyx_t_1 = (__pyx_v_self->atomspace->is_valid_handle((*((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_atom)->handle)) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":153
 *             raise TypeError("Need Atom object")
 *         if self.atomspace.is_valid_handle(deref((<Atom>atom).handle)):
 *             return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":152
 *         except AssertionError:
 *             raise TypeError("Need Atom object")
 *         if self.atomspace.is_valid_handle(deref((<Atom>atom).handle)):             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":154
 *         if self.atomspace.is_valid_handle(deref((<Atom>atom).handle)):
 *             return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     def remove(self, Atom atom, recursive=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":143
 *         return atom
 * 
 *     def is_valid(self, atom):             # <<<<<<<<<<<<<<
 *         """ Check whether the passed handle refers to an actual atom
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.is_valid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":156
 *         return False
 * 
 *     def remove(self, Atom atom, recursive=False):             # <<<<<<<<<<<<<<
 *         """ Removes an atom from the atomspace
 *         atom --  The Atom of the atom to be removed.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_15remove(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_14remove[] = " Removes an atom from the atomspace\n        atom --  The Atom of the atom to be removed.\n        recursive -- Recursive-removal flag; if set, then all links\n            that contain this atom will be removed. If not set, the\n            incoming set of this atom must be empty, as otherwise\n            the atom cannot be removed.\n\n        Returns True if the Atom was successfully removed. False, otherwise.\n\n        ";
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_15remove(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_atom = 0;
  PyObject *__pyx_v_recursive = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_atom,&__pyx_n_s_recursive,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atom)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_recursive);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "remove") < 0)) __PYX_ERR(2, 156, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_atom = ((struct __pyx_obj_7opencog_9atomspace_Atom *)values[0]);
    __pyx_v_recursive = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("remove", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 156, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.remove", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_atom), __pyx_ptype_7opencog_9atomspace_Atom, 1, "atom", 0))) __PYX_ERR(2, 156, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_14remove(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), __pyx_v_atom, __pyx_v_recursive);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_14remove(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_atom, PyObject *__pyx_v_recursive) {
  int __pyx_v_recurse;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":167
 * 
 *         """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef bint recurse = recursive
 */
  __pyx_t_1 = ((__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":168
 *         """
 *         if self.atomspace == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef bint recurse = recursive
 *         return self.atomspace.extract_atom(deref(atom.handle),recurse)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":167
 * 
 *         """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef bint recurse = recursive
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":169
 *         if self.atomspace == NULL:
 *             return None
 *         cdef bint recurse = recursive             # <<<<<<<<<<<<<<
 *         return self.atomspace.extract_atom(deref(atom.handle),recurse)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_recursive); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 169, __pyx_L1_error)
  __pyx_v_recurse = __pyx_t_1;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":170
 *             return None
 *         cdef bint recurse = recursive
 *         return self.atomspace.extract_atom(deref(atom.handle),recurse)             # <<<<<<<<<<<<<<
 * 
 *     def clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->atomspace->extract_atom((*__pyx_v_atom->handle), __pyx_v_recurse)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":156
 *         return False
 * 
 *     def remove(self, Atom atom, recursive=False):             # <<<<<<<<<<<<<<
 *         """ Removes an atom from the atomspace
 *         atom --  The Atom of the atom to be removed.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.remove", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":172
 *         return self.atomspace.extract_atom(deref(atom.handle),recurse)
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         """ Remove all atoms from the AtomSpace """
 *         if self.atomspace == NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_17clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_16clear[] = " Remove all atoms from the AtomSpace ";
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_17clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_16clear(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_16clear(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("clear", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":174
 *     def clear(self):
 *         """ Remove all atoms from the AtomSpace """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         self.atomspace.clear()
 */
  __pyx_t_1 = ((__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":175
 *         """ Remove all atoms from the AtomSpace """
 *         if self.atomspace == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         self.atomspace.clear()
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":174
 *     def clear(self):
 *         """ Remove all atoms from the AtomSpace """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         self.atomspace.clear()
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":176
 *         if self.atomspace == NULL:
 *             return None
 *         self.atomspace.clear()             # <<<<<<<<<<<<<<
 * 
 *     def set_value(self, Atom atom, Atom key, Value value):
 */
  __pyx_v_self->atomspace->clear();

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":172
 *         return self.atomspace.extract_atom(deref(atom.handle),recurse)
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         """ Remove all atoms from the AtomSpace """
 *         if self.atomspace == NULL:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":178
 *         self.atomspace.clear()
 * 
 *     def set_value(self, Atom atom, Atom key, Value value):             # <<<<<<<<<<<<<<
 *         """ Set the value on the atom at key
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_19set_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_18set_value[] = " Set the value on the atom at key\n        ";
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_19set_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_atom = 0;
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_key = 0;
  struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_atom,&__pyx_n_s_key,&__pyx_n_s_value,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atom)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_value", 1, 3, 3, 1); __PYX_ERR(2, 178, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_value", 1, 3, 3, 2); __PYX_ERR(2, 178, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_value") < 0)) __PYX_ERR(2, 178, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_atom = ((struct __pyx_obj_7opencog_9atomspace_Atom *)values[0]);
    __pyx_v_key = ((struct __pyx_obj_7opencog_9atomspace_Atom *)values[1]);
    __pyx_v_value = ((struct __pyx_obj_7opencog_9atomspace_Value *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_value", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 178, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.set_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_atom), __pyx_ptype_7opencog_9atomspace_Atom, 1, "atom", 0))) __PYX_ERR(2, 178, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_7opencog_9atomspace_Atom, 1, "key", 0))) __PYX_ERR(2, 178, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7opencog_9atomspace_Value, 1, "value", 0))) __PYX_ERR(2, 178, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_18set_value(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), __pyx_v_atom, __pyx_v_key, __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_18set_value(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_atom, struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_key, struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("set_value", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":181
 *         """ Set the value on the atom at key
 *         """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         self.atomspace.set_value(deref(atom.handle), deref(key.handle),
 */
  __pyx_t_1 = ((__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":182
 *         """
 *         if self.atomspace == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         self.atomspace.set_value(deref(atom.handle), deref(key.handle),
 *                                  value.get_c_value_ptr())
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":181
 *         """ Set the value on the atom at key
 *         """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         self.atomspace.set_value(deref(atom.handle), deref(key.handle),
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":183
 *         if self.atomspace == NULL:
 *             return None
 *         self.atomspace.set_value(deref(atom.handle), deref(key.handle),             # <<<<<<<<<<<<<<
 *                                  value.get_c_value_ptr())
 * 
 */
  (void)(__pyx_v_self->atomspace->set_value((*__pyx_v_atom->handle), (*__pyx_v_key->handle), ((struct __pyx_vtabstruct_7opencog_9atomspace_Value *)__pyx_v_value->__pyx_vtab)->get_c_value_ptr(__pyx_v_value)));

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":178
 *         self.atomspace.clear()
 * 
 *     def set_value(self, Atom atom, Atom key, Value value):             # <<<<<<<<<<<<<<
 *         """ Set the value on the atom at key
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":186
 *                                  value.get_c_value_ptr())
 * 
 *     def set_truthvalue(self, Atom atom, TruthValue tv):             # <<<<<<<<<<<<<<
 *         """ Set the truth value on atom
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_21set_truthvalue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_20set_truthvalue[] = " Set the truth value on atom\n        ";
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_21set_truthvalue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_atom = 0;
  struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_tv = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_truthvalue (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_atom,&__pyx_n_s_tv,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_atom)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tv)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_truthvalue", 1, 2, 2, 1); __PYX_ERR(2, 186, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_truthvalue") < 0)) __PYX_ERR(2, 186, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_atom = ((struct __pyx_obj_7opencog_9atomspace_Atom *)values[0]);
    __pyx_v_tv = ((struct __pyx_obj_7opencog_9atomspace_TruthValue *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_truthvalue", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 186, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.set_truthvalue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_atom), __pyx_ptype_7opencog_9atomspace_Atom, 1, "atom", 0))) __PYX_ERR(2, 186, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tv), __pyx_ptype_7opencog_9atomspace_TruthValue, 1, "tv", 0))) __PYX_ERR(2, 186, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_20set_truthvalue(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), __pyx_v_atom, __pyx_v_tv);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_20set_truthvalue(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_atom, struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_tv) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("set_truthvalue", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":189
 *         """ Set the truth value on atom
 *         """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         self.atomspace.set_truthvalue(deref(atom.handle), deref(tv._tvptr()))
 */
  __pyx_t_1 = ((__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":190
 *         """
 *         if self.atomspace == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         self.atomspace.set_truthvalue(deref(atom.handle), deref(tv._tvptr()))
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":189
 *         """ Set the truth value on atom
 *         """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         self.atomspace.set_truthvalue(deref(atom.handle), deref(tv._tvptr()))
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":191
 *         if self.atomspace == NULL:
 *             return None
 *         self.atomspace.set_truthvalue(deref(atom.handle), deref(tv._tvptr()))             # <<<<<<<<<<<<<<
 * 
 *     # Methods to make the atomspace act more like a standard Python container
 */
  (void)(__pyx_v_self->atomspace->set_truthvalue((*__pyx_v_atom->handle), (*((struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue *)__pyx_v_tv->__pyx_base.__pyx_vtab)->_tvptr(__pyx_v_tv))));

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":186
 *                                  value.get_c_value_ptr())
 * 
 *     def set_truthvalue(self, Atom atom, TruthValue tv):             # <<<<<<<<<<<<<<
 *         """ Set the truth value on atom
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":194
 * 
 *     # Methods to make the atomspace act more like a standard Python container
 *     def __contains__(self, atom):             # <<<<<<<<<<<<<<
 *         """ Custom checker to see if object is in AtomSpace """
 *         cdef cHandle result
 */

/* Python wrapper */
static int __pyx_pw_7opencog_9atomspace_9AtomSpace_23__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_atom); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_22__contains__[] = " Custom checker to see if object is in AtomSpace ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_22__contains__;
#endif
static int __pyx_pw_7opencog_9atomspace_9AtomSpace_23__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_atom) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_22__contains__(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), ((PyObject *)__pyx_v_atom));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opencog_9atomspace_9AtomSpace_22__contains__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, PyObject *__pyx_v_atom) {
  opencog::Handle __pyx_v_result;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":197
 *         """ Custom checker to see if object is in AtomSpace """
 *         cdef cHandle result
 *         result = self.atomspace.get_atom(deref((<Atom>(atom)).handle))             # <<<<<<<<<<<<<<
 *         return result != result.UNDEFINED
 * 
 */
  __pyx_v_result = __pyx_v_self->atomspace->get_atom((*((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_atom)->handle));

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":198
 *         cdef cHandle result
 *         result = self.atomspace.get_atom(deref((<Atom>(atom)).handle))
 *         return result != result.UNDEFINED             # <<<<<<<<<<<<<<
 * 
 *     # Maybe this should be called __repr__ ???
 */
  __pyx_r = (__pyx_v_result != __pyx_v_result.UNDEFINED);
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":194
 * 
 *     # Methods to make the atomspace act more like a standard Python container
 *     def __contains__(self, atom):             # <<<<<<<<<<<<<<
 *         """ Custom checker to see if object is in AtomSpace """
 *         cdef cHandle result
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":201
 * 
 *     # Maybe this should be called __repr__ ???
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         """ Description of the atomspace """
 *         return ("<AtomSpace\n" +
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_25__str__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_24__str__[] = " Description of the atomspace ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_24__str__;
#endif
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_25__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_24__str__(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_24__str__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":203
 *     def __str__(self):
 *         """ Description of the atomspace """
 *         return ("<AtomSpace\n" +             # <<<<<<<<<<<<<<
 *                 "   addr: " + hex(<long>self.atomspace) + "\n" +
 *                 "   name: " + self.atomspace.get_name().decode('UTF-8') + ">\n"
 */
  __Pyx_XDECREF(__pyx_r);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":204
 *         """ Description of the atomspace """
 *         return ("<AtomSpace\n" +
 *                 "   addr: " + hex(<long>self.atomspace) + "\n" +             # <<<<<<<<<<<<<<
 *                 "   name: " + self.atomspace.get_name().decode('UTF-8') + ">\n"
 *                )
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(((long)__pyx_v_self->atomspace)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_hex, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_kp_u_AtomSpace_addr, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_u__6); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_u_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":205
 *         return ("<AtomSpace\n" +
 *                 "   addr: " + hex(<long>self.atomspace) + "\n" +
 *                 "   name: " + self.atomspace.get_name().decode('UTF-8') + ">\n"             # <<<<<<<<<<<<<<
 *                )
 * 
 */
  __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_v_self->atomspace->get_name(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_u__7); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":201
 * 
 *     # Maybe this should be called __repr__ ???
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         """ Description of the atomspace """
 *         return ("<AtomSpace\n" +
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":208
 *                )
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         """ Return the number of atoms in the AtomSpace """
 *         return self.size()
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_7opencog_9atomspace_9AtomSpace_27__len__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_26__len__[] = " Return the number of atoms in the AtomSpace ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_26__len__;
#endif
static Py_ssize_t __pyx_pw_7opencog_9atomspace_9AtomSpace_27__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_26__len__(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_7opencog_9atomspace_9AtomSpace_26__len__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":210
 *     def __len__(self):
 *         """ Return the number of atoms in the AtomSpace """
 *         return self.size()             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":208
 *                )
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         """ Return the number of atoms in the AtomSpace """
 *         return self.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":212
 *         return self.size()
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         """ Support iterating across all atoms in the atomspace """
 *         if self.atomspace == NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_29__iter__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_28__iter__[] = " Support iterating across all atoms in the atomspace ";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_28__iter__;
#endif
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_29__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_28__iter__(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_28__iter__(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":214
 *     def __iter__(self):
 *         """ Support iterating across all atoms in the atomspace """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         return iter(self.get_atoms_by_type(0))
 */
  __pyx_t_1 = ((__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":215
 *         """ Support iterating across all atoms in the atomspace """
 *         if self.atomspace == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         return iter(self.get_atoms_by_type(0))
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":214
 *     def __iter__(self):
 *         """ Support iterating across all atoms in the atomspace """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         return iter(self.get_atoms_by_type(0))
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":216
 *         if self.atomspace == NULL:
 *             return None
 *         return iter(self.get_atoms_by_type(0))             # <<<<<<<<<<<<<<
 * 
 *     def size(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_atoms_by_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_int_0) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_int_0);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":212
 *         return self.size()
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         """ Support iterating across all atoms in the atomspace """
 *         if self.atomspace == NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":218
 *         return iter(self.get_atoms_by_type(0))
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         """ Return the number of atoms in the AtomSpace """
 *         if self.atomspace == NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_31size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_30size[] = " Return the number of atoms in the AtomSpace ";
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_31size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_30size(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_30size(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":220
 *     def size(self):
 *         """ Return the number of atoms in the AtomSpace """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return 0
 *         return self.atomspace.get_size()
 */
  __pyx_t_1 = ((__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":221
 *         """ Return the number of atoms in the AtomSpace """
 *         if self.atomspace == NULL:
 *             return 0             # <<<<<<<<<<<<<<
 *         return self.atomspace.get_size()
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":220
 *     def size(self):
 *         """ Return the number of atoms in the AtomSpace """
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return 0
 *         return self.atomspace.get_size()
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":222
 *         if self.atomspace == NULL:
 *             return 0
 *         return self.atomspace.get_size()             # <<<<<<<<<<<<<<
 * 
 *     # query methods
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->atomspace->get_size()); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":218
 *         return iter(self.get_atoms_by_type(0))
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         """ Return the number of atoms in the AtomSpace """
 *         if self.atomspace == NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":225
 * 
 *     # query methods
 *     def get_atoms_by_type(self, Type t, subtype = True):             # <<<<<<<<<<<<<<
 *         if self.atomspace == NULL:
 *             return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_33get_atoms_by_type(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_33get_atoms_by_type(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_7opencog_9atomspace_Type __pyx_v_t;
  PyObject *__pyx_v_subtype = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_atoms_by_type (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_subtype,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_subtype);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_atoms_by_type") < 0)) __PYX_ERR(2, 225, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_t = __Pyx_PyInt_As_short(values[0]); if (unlikely((__pyx_v_t == (short)-1) && PyErr_Occurred())) __PYX_ERR(2, 225, __pyx_L3_error)
    __pyx_v_subtype = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_atoms_by_type", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 225, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.get_atoms_by_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_32get_atoms_by_type(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), __pyx_v_t, __pyx_v_subtype);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_32get_atoms_by_type(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t, PyObject *__pyx_v_subtype) {
  std::vector<opencog::Handle>  __pyx_v_handle_vector;
  int __pyx_v_subt;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_atoms_by_type", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":226
 *     # query methods
 *     def get_atoms_by_type(self, Type t, subtype = True):
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector
 */
  __pyx_t_1 = ((__pyx_v_self->atomspace == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":227
 *     def get_atoms_by_type(self, Type t, subtype = True):
 *         if self.atomspace == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         cdef vector[cHandle] handle_vector
 *         cdef bint subt = subtype
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":226
 *     # query methods
 *     def get_atoms_by_type(self, Type t, subtype = True):
 *         if self.atomspace == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector
 */
  }

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":229
 *             return None
 *         cdef vector[cHandle] handle_vector
 *         cdef bint subt = subtype             # <<<<<<<<<<<<<<
 *         self.atomspace.get_handles_by_type(handle_vector,t,subt)
 *         return convert_handle_seq_to_python_list(handle_vector)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_subtype); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 229, __pyx_L1_error)
  __pyx_v_subt = __pyx_t_1;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":230
 *         cdef vector[cHandle] handle_vector
 *         cdef bint subt = subtype
 *         self.atomspace.get_handles_by_type(handle_vector,t,subt)             # <<<<<<<<<<<<<<
 *         return convert_handle_seq_to_python_list(handle_vector)
 * 
 */
  __pyx_v_self->atomspace->get_handles_by_type(__pyx_v_handle_vector, __pyx_v_t, __pyx_v_subt);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":231
 *         cdef bint subt = subtype
 *         self.atomspace.get_handles_by_type(handle_vector,t,subt)
 *         return convert_handle_seq_to_python_list(handle_vector)             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_7opencog_9atomspace_convert_handle_seq_to_python_list(__pyx_v_handle_vector); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":225
 * 
 *     # query methods
 *     def get_atoms_by_type(self, Type t, subtype = True):             # <<<<<<<<<<<<<<
 *         if self.atomspace == NULL:
 *             return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.get_atoms_by_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":234
 * 
 *     @classmethod
 *     def include_incoming(cls, atoms):             # <<<<<<<<<<<<<<
 *         """
 *         Deprecated. Who uses this? Anyone? Is it useful for anyone?
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_35include_incoming(PyObject *__pyx_v_cls, PyObject *__pyx_v_atoms); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_34include_incoming[] = "\n        Deprecated. Who uses this? Anyone? Is it useful for anyone?\n        Returns the conjunction of a set of atoms and their incoming sets.\n\n        Example:\n        self.atomspace.include_incoming(self.atomspace.get_atoms_by_type(types.ConceptNode))\n        ";
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_35include_incoming(PyObject *__pyx_v_cls, PyObject *__pyx_v_atoms) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("include_incoming (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_34include_incoming(((PyTypeObject*)__pyx_v_cls), ((PyObject *)__pyx_v_atoms));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_34include_incoming(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_atoms) {
  PyObject *__pyx_8genexpr1__pyx_v_sublist = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_item = NULL;
  PyObject *__pyx_8genexpr2__pyx_v_atom = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("include_incoming", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":242
 *         self.atomspace.include_incoming(self.atomspace.get_atoms_by_type(types.ConceptNode))
 *         """
 *         return list(set(atoms +             # <<<<<<<<<<<<<<
 *                 [item for sublist in [atom.incoming for atom in atoms if len(atom.incoming) > 0] for item in sublist]))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":243
 *         """
 *         return list(set(atoms +
 *                 [item for sublist in [atom.incoming for atom in atoms if len(atom.incoming) > 0] for item in sublist]))             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 243, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 243, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (likely(PyList_CheckExact(__pyx_v_atoms)) || PyTuple_CheckExact(__pyx_v_atoms)) {
        __pyx_t_3 = __pyx_v_atoms; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
        __pyx_t_5 = NULL;
      } else {
        __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_atoms); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 243, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 243, __pyx_L10_error)
      }
      for (;;) {
        if (likely(!__pyx_t_5)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(2, 243, __pyx_L10_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 243, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          } else {
            if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(2, 243, __pyx_L10_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 243, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          }
        } else {
          __pyx_t_6 = __pyx_t_5(__pyx_t_3);
          if (unlikely(!__pyx_t_6)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(2, 243, __pyx_L10_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_6);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_atom, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr2__pyx_v_atom, __pyx_n_s_incoming); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 243, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(2, 243, __pyx_L10_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_8 = ((__pyx_t_7 > 0) != 0);
        if (__pyx_t_8) {
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr2__pyx_v_atom, __pyx_n_s_incoming); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 243, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_6);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(2, 243, __pyx_L10_error)
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_atom); __pyx_8genexpr2__pyx_v_atom = 0;
      goto __pyx_L14_exit_scope;
      __pyx_L10_error:;
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_atom); __pyx_8genexpr2__pyx_v_atom = 0;
      goto __pyx_L5_error;
      __pyx_L14_exit_scope:;
    } /* exit inner scope */
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(2, 243, __pyx_L5_error)
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 243, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_sublist, __pyx_t_2);
      __pyx_t_2 = 0;
      if (likely(PyList_CheckExact(__pyx_8genexpr1__pyx_v_sublist)) || PyTuple_CheckExact(__pyx_8genexpr1__pyx_v_sublist)) {
        __pyx_t_2 = __pyx_8genexpr1__pyx_v_sublist; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
        __pyx_t_5 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_8genexpr1__pyx_v_sublist); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 243, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 243, __pyx_L5_error)
      }
      for (;;) {
        if (likely(!__pyx_t_5)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(2, 243, __pyx_L5_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 243, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          } else {
            if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(2, 243, __pyx_L5_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 243, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          }
        } else {
          __pyx_t_6 = __pyx_t_5(__pyx_t_2);
          if (unlikely(!__pyx_t_6)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(2, 243, __pyx_L5_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_6);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_item, __pyx_t_6);
        __pyx_t_6 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_8genexpr1__pyx_v_item))) __PYX_ERR(2, 243, __pyx_L5_error)
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_item); __pyx_8genexpr1__pyx_v_item = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_sublist); __pyx_8genexpr1__pyx_v_sublist = 0;
    goto __pyx_L17_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_item); __pyx_8genexpr1__pyx_v_item = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_sublist); __pyx_8genexpr1__pyx_v_sublist = 0;
    goto __pyx_L1_error;
    __pyx_L17_exit_scope:;
  } /* exit inner scope */

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":242
 *         self.atomspace.include_incoming(self.atomspace.get_atoms_by_type(types.ConceptNode))
 *         """
 *         return list(set(atoms +             # <<<<<<<<<<<<<<
 *                 [item for sublist in [atom.incoming for atom in atoms if len(atom.incoming) > 0] for item in sublist]))
 * 
 */
  __pyx_t_3 = PyNumber_Add(__pyx_v_atoms, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":234
 * 
 *     @classmethod
 *     def include_incoming(cls, atoms):             # <<<<<<<<<<<<<<
 *         """
 *         Deprecated. Who uses this? Anyone? Is it useful for anyone?
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.include_incoming", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_sublist);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_item);
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_atom);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":246
 * 
 *     @classmethod
 *     def include_outgoing(cls, atoms):             # <<<<<<<<<<<<<<
 *         """
 *         Deprecated. Who uses this? Anyone? Is it useful for anyone?
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_37include_outgoing(PyObject *__pyx_v_cls, PyObject *__pyx_v_atoms); /*proto*/
static char __pyx_doc_7opencog_9atomspace_9AtomSpace_36include_outgoing[] = "\n        Deprecated. Who uses this? Anyone? Is it useful for anyone?\n        Returns the conjunction of a set of atoms and their outgoing sets.\n        Useful when used in combination with include_incoming.\n\n        Example:\n        self.atomspace.include_outgoing(\n            self.atomspace.include_incoming(self.atomspace.get_atoms_by_type(types.ConceptNode)))\n        ";
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_37include_outgoing(PyObject *__pyx_v_cls, PyObject *__pyx_v_atoms) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("include_outgoing (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_36include_outgoing(((PyTypeObject*)__pyx_v_cls), ((PyObject *)__pyx_v_atoms));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_36include_outgoing(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_atoms) {
  PyObject *__pyx_8genexpr3__pyx_v_sublist = NULL;
  PyObject *__pyx_8genexpr3__pyx_v_item = NULL;
  PyObject *__pyx_8genexpr4__pyx_v_atom = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("include_outgoing", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":256
 *             self.atomspace.include_incoming(self.atomspace.get_atoms_by_type(types.ConceptNode)))
 *         """
 *         return list(set(atoms +             # <<<<<<<<<<<<<<
 *                 [item for sublist in [atom.out for atom in atoms if len(atom.out) > 0] for item in sublist]))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */

    /* "../../../../opencog/cython/opencog/atomspace_details.pyx":257
 *         """
 *         return list(set(atoms +
 *                 [item for sublist in [atom.out for atom in atoms if len(atom.out) > 0] for item in sublist]))             # <<<<<<<<<<<<<<
 * 
 *     def is_node_in_atomspace(self, Type t, s):
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 257, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 257, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (likely(PyList_CheckExact(__pyx_v_atoms)) || PyTuple_CheckExact(__pyx_v_atoms)) {
        __pyx_t_3 = __pyx_v_atoms; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
        __pyx_t_5 = NULL;
      } else {
        __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_atoms); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 257, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 257, __pyx_L10_error)
      }
      for (;;) {
        if (likely(!__pyx_t_5)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(2, 257, __pyx_L10_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 257, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          } else {
            if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(2, 257, __pyx_L10_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 257, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          }
        } else {
          __pyx_t_6 = __pyx_t_5(__pyx_t_3);
          if (unlikely(!__pyx_t_6)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(2, 257, __pyx_L10_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_6);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr4__pyx_v_atom, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr4__pyx_v_atom, __pyx_n_s_out); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 257, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(2, 257, __pyx_L10_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_8 = ((__pyx_t_7 > 0) != 0);
        if (__pyx_t_8) {
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr4__pyx_v_atom, __pyx_n_s_out); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 257, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_6);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(2, 257, __pyx_L10_error)
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_atom); __pyx_8genexpr4__pyx_v_atom = 0;
      goto __pyx_L14_exit_scope;
      __pyx_L10_error:;
      __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_atom); __pyx_8genexpr4__pyx_v_atom = 0;
      goto __pyx_L5_error;
      __pyx_L14_exit_scope:;
    } /* exit inner scope */
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(2, 257, __pyx_L5_error)
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 257, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_sublist, __pyx_t_2);
      __pyx_t_2 = 0;
      if (likely(PyList_CheckExact(__pyx_8genexpr3__pyx_v_sublist)) || PyTuple_CheckExact(__pyx_8genexpr3__pyx_v_sublist)) {
        __pyx_t_2 = __pyx_8genexpr3__pyx_v_sublist; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
        __pyx_t_5 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_8genexpr3__pyx_v_sublist); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 257, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 257, __pyx_L5_error)
      }
      for (;;) {
        if (likely(!__pyx_t_5)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(2, 257, __pyx_L5_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 257, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          } else {
            if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(2, 257, __pyx_L5_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 257, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          }
        } else {
          __pyx_t_6 = __pyx_t_5(__pyx_t_2);
          if (unlikely(!__pyx_t_6)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(2, 257, __pyx_L5_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_6);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_item, __pyx_t_6);
        __pyx_t_6 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_8genexpr3__pyx_v_item))) __PYX_ERR(2, 257, __pyx_L5_error)
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_item); __pyx_8genexpr3__pyx_v_item = 0;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_sublist); __pyx_8genexpr3__pyx_v_sublist = 0;
    goto __pyx_L17_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_item); __pyx_8genexpr3__pyx_v_item = 0;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_sublist); __pyx_8genexpr3__pyx_v_sublist = 0;
    goto __pyx_L1_error;
    __pyx_L17_exit_scope:;
  } /* exit inner scope */

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":256
 *             self.atomspace.include_incoming(self.atomspace.get_atoms_by_type(types.ConceptNode)))
 *         """
 *         return list(set(atoms +             # <<<<<<<<<<<<<<
 *                 [item for sublist in [atom.out for atom in atoms if len(atom.out) > 0] for item in sublist]))
 * 
 */
  __pyx_t_3 = PyNumber_Add(__pyx_v_atoms, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PySet_New(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":246
 * 
 *     @classmethod
 *     def include_outgoing(cls, atoms):             # <<<<<<<<<<<<<<
 *         """
 *         Deprecated. Who uses this? Anyone? Is it useful for anyone?
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.include_outgoing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_sublist);
  __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_item);
  __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_atom);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":259
 *                 [item for sublist in [atom.out for atom in atoms if len(atom.out) > 0] for item in sublist]))
 * 
 *     def is_node_in_atomspace(self, Type t, s):             # <<<<<<<<<<<<<<
 *         cdef string name = s.encode('UTF-8')
 *         result = self.atomspace.get_handle(t, name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_39is_node_in_atomspace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_39is_node_in_atomspace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_7opencog_9atomspace_Type __pyx_v_t;
  PyObject *__pyx_v_s = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_node_in_atomspace (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_s,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("is_node_in_atomspace", 1, 2, 2, 1); __PYX_ERR(2, 259, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_node_in_atomspace") < 0)) __PYX_ERR(2, 259, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_t = __Pyx_PyInt_As_short(values[0]); if (unlikely((__pyx_v_t == (short)-1) && PyErr_Occurred())) __PYX_ERR(2, 259, __pyx_L3_error)
    __pyx_v_s = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_node_in_atomspace", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 259, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.is_node_in_atomspace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_38is_node_in_atomspace(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), __pyx_v_t, __pyx_v_s);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_38is_node_in_atomspace(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t, PyObject *__pyx_v_s) {
  std::string __pyx_v_name;
  opencog::Handle __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_node_in_atomspace", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":260
 * 
 *     def is_node_in_atomspace(self, Type t, s):
 *         cdef string name = s.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         result = self.atomspace.get_handle(t, name)
 *         return result != result.UNDEFINED
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_UTF_8);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 260, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_name = __pyx_t_4;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":261
 *     def is_node_in_atomspace(self, Type t, s):
 *         cdef string name = s.encode('UTF-8')
 *         result = self.atomspace.get_handle(t, name)             # <<<<<<<<<<<<<<
 *         return result != result.UNDEFINED
 * 
 */
  __pyx_v_result = __pyx_v_self->atomspace->get_handle(__pyx_v_t, __pyx_v_name);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":262
 *         cdef string name = s.encode('UTF-8')
 *         result = self.atomspace.get_handle(t, name)
 *         return result != result.UNDEFINED             # <<<<<<<<<<<<<<
 * 
 *     def is_link_in_atomspace(self, Type t, outgoing):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_result != __pyx_v_result.UNDEFINED)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":259
 *                 [item for sublist in [atom.out for atom in atoms if len(atom.out) > 0] for item in sublist]))
 * 
 *     def is_node_in_atomspace(self, Type t, s):             # <<<<<<<<<<<<<<
 *         cdef string name = s.encode('UTF-8')
 *         result = self.atomspace.get_handle(t, name)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.is_node_in_atomspace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":264
 *         return result != result.UNDEFINED
 * 
 *     def is_link_in_atomspace(self, Type t, outgoing):             # <<<<<<<<<<<<<<
 *         cdef vector[cHandle] handle_vector = atom_list_to_vector(outgoing)
 *         result = self.atomspace.get_handle(t, handle_vector)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_41is_link_in_atomspace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_41is_link_in_atomspace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_7opencog_9atomspace_Type __pyx_v_t;
  PyObject *__pyx_v_outgoing = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_link_in_atomspace (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_outgoing,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_outgoing)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("is_link_in_atomspace", 1, 2, 2, 1); __PYX_ERR(2, 264, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_link_in_atomspace") < 0)) __PYX_ERR(2, 264, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_t = __Pyx_PyInt_As_short(values[0]); if (unlikely((__pyx_v_t == (short)-1) && PyErr_Occurred())) __PYX_ERR(2, 264, __pyx_L3_error)
    __pyx_v_outgoing = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_link_in_atomspace", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 264, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.is_link_in_atomspace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_40is_link_in_atomspace(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), __pyx_v_t, __pyx_v_outgoing);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_40is_link_in_atomspace(struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t, PyObject *__pyx_v_outgoing) {
  std::vector<opencog::Handle>  __pyx_v_handle_vector;
  opencog::Handle __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_link_in_atomspace", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":265
 * 
 *     def is_link_in_atomspace(self, Type t, outgoing):
 *         cdef vector[cHandle] handle_vector = atom_list_to_vector(outgoing)             # <<<<<<<<<<<<<<
 *         result = self.atomspace.get_handle(t, handle_vector)
 *         return result != result.UNDEFINED
 */
  if (!(likely(PyList_CheckExact(__pyx_v_outgoing))||((__pyx_v_outgoing) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_outgoing)->tp_name), 0))) __PYX_ERR(2, 265, __pyx_L1_error)
  __pyx_v_handle_vector = __pyx_f_7opencog_9atomspace_atom_list_to_vector(((PyObject*)__pyx_v_outgoing));

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":266
 *     def is_link_in_atomspace(self, Type t, outgoing):
 *         cdef vector[cHandle] handle_vector = atom_list_to_vector(outgoing)
 *         result = self.atomspace.get_handle(t, handle_vector)             # <<<<<<<<<<<<<<
 *         return result != result.UNDEFINED
 * 
 */
  __pyx_v_result = __pyx_v_self->atomspace->get_handle(__pyx_v_t, __pyx_v_handle_vector);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":267
 *         cdef vector[cHandle] handle_vector = atom_list_to_vector(outgoing)
 *         result = self.atomspace.get_handle(t, handle_vector)
 *         return result != result.UNDEFINED             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_result != __pyx_v_result.UNDEFINED)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":264
 *         return result != result.UNDEFINED
 * 
 *     def is_link_in_atomspace(self, Type t, outgoing):             # <<<<<<<<<<<<<<
 *         cdef vector[cHandle] handle_vector = atom_list_to_vector(outgoing)
 *         result = self.atomspace.get_handle(t, handle_vector)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.is_link_in_atomspace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.asp,self.atomspace cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_43__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_43__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_42__reduce_cython__(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_42__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.asp,self.atomspace cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.asp,self.atomspace cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.asp,self.atomspace cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.asp,self.atomspace cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.asp,self.atomspace cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_45__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_9AtomSpace_45__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9AtomSpace_44__setstate_cython__(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9AtomSpace_44__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.asp,self.atomspace cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.asp,self.atomspace cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.asp,self.atomspace cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.asp,self.atomspace cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.AtomSpace.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":270
 * 
 * 
 * cdef api object py_atomspace(cAtomSpace* c_atomspace) with gil:             # <<<<<<<<<<<<<<
 *     cdef AtomSpace atomspace = AtomSpace_factory(c_atomspace)
 *     return atomspace
 */

static PyObject *__pyx_f_7opencog_9atomspace_py_atomspace(opencog::AtomSpace *__pyx_v_c_atomspace) {
  struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_atomspace = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("py_atomspace", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":271
 * 
 * cdef api object py_atomspace(cAtomSpace* c_atomspace) with gil:
 *     cdef AtomSpace atomspace = AtomSpace_factory(c_atomspace)             # <<<<<<<<<<<<<<
 *     return atomspace
 * 
 */
  __pyx_t_1 = __pyx_f_7opencog_9atomspace_AtomSpace_factory(__pyx_v_c_atomspace); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7opencog_9atomspace_AtomSpace))))) __PYX_ERR(2, 271, __pyx_L1_error)
  __pyx_v_atomspace = ((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":272
 * cdef api object py_atomspace(cAtomSpace* c_atomspace) with gil:
 *     cdef AtomSpace atomspace = AtomSpace_factory(c_atomspace)
 *     return atomspace             # <<<<<<<<<<<<<<
 * 
 * cdef api object py_atom(const cHandle& h):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_atomspace));
  __pyx_r = ((PyObject *)__pyx_v_atomspace);
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":270
 * 
 * 
 * cdef api object py_atomspace(cAtomSpace* c_atomspace) with gil:             # <<<<<<<<<<<<<<
 *     cdef AtomSpace atomspace = AtomSpace_factory(c_atomspace)
 *     return atomspace
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.py_atomspace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atomspace);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":274
 *     return atomspace
 * 
 * cdef api object py_atom(const cHandle& h):             # <<<<<<<<<<<<<<
 *     cdef Atom atom = Atom.createAtom(h)
 *     return atom
 */

static PyObject *__pyx_f_7opencog_9atomspace_py_atom(opencog::Handle const &__pyx_v_h) {
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_atom = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_atom", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":275
 * 
 * cdef api object py_atom(const cHandle& h):
 *     cdef Atom atom = Atom.createAtom(h)             # <<<<<<<<<<<<<<
 *     return atom
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_7opencog_9atomspace_4Atom_createAtom(__pyx_v_h)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_atom = ((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":276
 * cdef api object py_atom(const cHandle& h):
 *     cdef Atom atom = Atom.createAtom(h)
 *     return atom             # <<<<<<<<<<<<<<
 * 
 * def create_child_atomspace(object atomspace):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_atom));
  __pyx_r = ((PyObject *)__pyx_v_atom);
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":274
 *     return atomspace
 * 
 * cdef api object py_atom(const cHandle& h):             # <<<<<<<<<<<<<<
 *     cdef Atom atom = Atom.createAtom(h)
 *     return atom
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.py_atom", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_atom);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atomspace_details.pyx":278
 *     return atom
 * 
 * def create_child_atomspace(object atomspace):             # <<<<<<<<<<<<<<
 *     cdef cValuePtr asp = createAtomSpace((<AtomSpace>(atomspace)).atomspace)
 *     cdef AtomSpace result = AtomSpace_factoid(asp)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_1create_child_atomspace(PyObject *__pyx_self, PyObject *__pyx_v_atomspace); /*proto*/
static PyMethodDef __pyx_mdef_7opencog_9atomspace_1create_child_atomspace = {"create_child_atomspace", (PyCFunction)__pyx_pw_7opencog_9atomspace_1create_child_atomspace, METH_O, 0};
static PyObject *__pyx_pw_7opencog_9atomspace_1create_child_atomspace(PyObject *__pyx_self, PyObject *__pyx_v_atomspace) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_child_atomspace (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_create_child_atomspace(__pyx_self, ((PyObject *)__pyx_v_atomspace));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_create_child_atomspace(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_atomspace) {
  opencog::ValuePtr __pyx_v_asp;
  struct __pyx_obj_7opencog_9atomspace_AtomSpace *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_child_atomspace", 0);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":279
 * 
 * def create_child_atomspace(object atomspace):
 *     cdef cValuePtr asp = createAtomSpace((<AtomSpace>(atomspace)).atomspace)             # <<<<<<<<<<<<<<
 *     cdef AtomSpace result = AtomSpace_factoid(asp)
 *     result.parent_atomspace = atomspace
 */
  __pyx_v_asp = opencog::createAtomSpace(((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_v_atomspace)->atomspace);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":280
 * def create_child_atomspace(object atomspace):
 *     cdef cValuePtr asp = createAtomSpace((<AtomSpace>(atomspace)).atomspace)
 *     cdef AtomSpace result = AtomSpace_factoid(asp)             # <<<<<<<<<<<<<<
 *     result.parent_atomspace = atomspace
 *     return result
 */
  __pyx_t_1 = __pyx_f_7opencog_9atomspace_AtomSpace_factoid(__pyx_v_asp); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7opencog_9atomspace_AtomSpace))))) __PYX_ERR(2, 280, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":281
 *     cdef cValuePtr asp = createAtomSpace((<AtomSpace>(atomspace)).atomspace)
 *     cdef AtomSpace result = AtomSpace_factoid(asp)
 *     result.parent_atomspace = atomspace             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __Pyx_INCREF(__pyx_v_atomspace);
  __Pyx_GIVEREF(__pyx_v_atomspace);
  __Pyx_GOTREF(__pyx_v_result->parent_atomspace);
  __Pyx_DECREF(__pyx_v_result->parent_atomspace);
  __pyx_v_result->parent_atomspace = __pyx_v_atomspace;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":282
 *     cdef AtomSpace result = AtomSpace_factoid(asp)
 *     result.parent_atomspace = atomspace
 *     return result             # <<<<<<<<<<<<<<
 * 
 * # ====================== end of file ============================
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":278
 *     return atom
 * 
 * def create_child_atomspace(object atomspace):             # <<<<<<<<<<<<<<
 *     cdef cValuePtr asp = createAtomSpace((<AtomSpace>(atomspace)).atomspace)
 *     cdef AtomSpace result = AtomSpace_factoid(asp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.create_child_atomspace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/truth_value.pyx":5
 * # from atomspace cimport cTruthValue, cSimpleTruthValue, tv_ptr, TruthValue, Value
 * 
 * def createTruthValue(strength = 1.0, confidence = 1.0):             # <<<<<<<<<<<<<<
 *     cdef tv_ptr c_ptr
 *     c_ptr.reset(new cSimpleTruthValue(strength, confidence))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_3createTruthValue(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7opencog_9atomspace_3createTruthValue = {"createTruthValue", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7opencog_9atomspace_3createTruthValue, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7opencog_9atomspace_3createTruthValue(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_strength = 0;
  PyObject *__pyx_v_confidence = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createTruthValue (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_strength,&__pyx_n_s_confidence,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_float_1_0);
    values[1] = ((PyObject *)__pyx_float_1_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strength);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_confidence);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "createTruthValue") < 0)) __PYX_ERR(5, 5, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_strength = values[0];
    __pyx_v_confidence = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("createTruthValue", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 5, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.createTruthValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_2createTruthValue(__pyx_self, __pyx_v_strength, __pyx_v_confidence);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_2createTruthValue(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_strength, PyObject *__pyx_v_confidence) {
  opencog::TruthValuePtr __pyx_v_c_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createTruthValue", 0);

  /* "../../../../opencog/cython/opencog/truth_value.pyx":7
 * def createTruthValue(strength = 1.0, confidence = 1.0):
 *     cdef tv_ptr c_ptr
 *     c_ptr.reset(new cSimpleTruthValue(strength, confidence))             # <<<<<<<<<<<<<<
 *     return TruthValue(ptr_holder=PtrHolder.create(<shared_ptr[void]&>c_ptr))
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_strength); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 7, __pyx_L1_error)
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_confidence); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 7, __pyx_L1_error)
  __pyx_v_c_ptr.reset(new opencog::SimpleTruthValue(__pyx_t_1, __pyx_t_2));

  /* "../../../../opencog/cython/opencog/truth_value.pyx":8
 *     cdef tv_ptr c_ptr
 *     c_ptr.reset(new cSimpleTruthValue(strength, confidence))
 *     return TruthValue(ptr_holder=PtrHolder.create(<shared_ptr[void]&>c_ptr))             # <<<<<<<<<<<<<<
 * 
 * cdef class TruthValue(Value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = ((PyObject *)__pyx_f_7opencog_9atomspace_9PtrHolder_create(((std::shared_ptr<void>  &)__pyx_v_c_ptr))); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_ptr_holder, __pyx_t_4) < 0) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opencog_9atomspace_TruthValue), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/truth_value.pyx":5
 * # from atomspace cimport cTruthValue, cSimpleTruthValue, tv_ptr, TruthValue, Value
 * 
 * def createTruthValue(strength = 1.0, confidence = 1.0):             # <<<<<<<<<<<<<<
 *     cdef tv_ptr c_ptr
 *     c_ptr.reset(new cSimpleTruthValue(strength, confidence))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("opencog.atomspace.createTruthValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/truth_value.pyx":32
 * 
 *     @property
 *     def mean(self):             # <<<<<<<<<<<<<<
 *         return self._mean()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_10TruthValue_4mean_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_10TruthValue_4mean_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_10TruthValue_4mean___get__(((struct __pyx_obj_7opencog_9atomspace_TruthValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_10TruthValue_4mean___get__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../../../../opencog/cython/opencog/truth_value.pyx":33
 *     @property
 *     def mean(self):
 *         return self._mean()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue *)__pyx_v_self->__pyx_base.__pyx_vtab)->_mean(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/truth_value.pyx":32
 * 
 *     @property
 *     def mean(self):             # <<<<<<<<<<<<<<
 *         return self._mean()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.TruthValue.mean.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/truth_value.pyx":36
 * 
 *     @property
 *     def confidence(self):             # <<<<<<<<<<<<<<
 *         return self._confidence()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_10TruthValue_10confidence_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_10TruthValue_10confidence_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_10TruthValue_10confidence___get__(((struct __pyx_obj_7opencog_9atomspace_TruthValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_10TruthValue_10confidence___get__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../../../../opencog/cython/opencog/truth_value.pyx":37
 *     @property
 *     def confidence(self):
 *         return self._confidence()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue *)__pyx_v_self->__pyx_base.__pyx_vtab)->_confidence(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/truth_value.pyx":36
 * 
 *     @property
 *     def confidence(self):             # <<<<<<<<<<<<<<
 *         return self._confidence()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.TruthValue.confidence.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/truth_value.pyx":40
 * 
 *     @property
 *     def count(self):             # <<<<<<<<<<<<<<
 *         return self._count()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_10TruthValue_5count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_10TruthValue_5count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_10TruthValue_5count___get__(((struct __pyx_obj_7opencog_9atomspace_TruthValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_10TruthValue_5count___get__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../../../../opencog/cython/opencog/truth_value.pyx":41
 *     @property
 *     def count(self):
 *         return self._count()             # <<<<<<<<<<<<<<
 * 
 *     cdef strength_t _mean(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue *)__pyx_v_self->__pyx_base.__pyx_vtab)->_count(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/truth_value.pyx":40
 * 
 *     @property
 *     def count(self):             # <<<<<<<<<<<<<<
 *         return self._count()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.TruthValue.count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/truth_value.pyx":43
 *         return self._count()
 * 
 *     cdef strength_t _mean(self):             # <<<<<<<<<<<<<<
 *         return self._ptr().get_mean()
 * 
 */

static __pyx_t_7opencog_9atomspace_strength_t __pyx_f_7opencog_9atomspace_10TruthValue__mean(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self) {
  __pyx_t_7opencog_9atomspace_strength_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_mean", 0);

  /* "../../../../opencog/cython/opencog/truth_value.pyx":44
 * 
 *     cdef strength_t _mean(self):
 *         return self._ptr().get_mean()             # <<<<<<<<<<<<<<
 * 
 *     cdef confidence_t _confidence(self):
 */
  __pyx_r = ((struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue *)__pyx_v_self->__pyx_base.__pyx_vtab)->_ptr(__pyx_v_self)->get_mean();
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/truth_value.pyx":43
 *         return self._count()
 * 
 *     cdef strength_t _mean(self):             # <<<<<<<<<<<<<<
 *         return self._ptr().get_mean()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/truth_value.pyx":46
 *         return self._ptr().get_mean()
 * 
 *     cdef confidence_t _confidence(self):             # <<<<<<<<<<<<<<
 *         return self._ptr().get_confidence()
 * 
 */

static __pyx_t_7opencog_9atomspace_confidence_t __pyx_f_7opencog_9atomspace_10TruthValue__confidence(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self) {
  __pyx_t_7opencog_9atomspace_confidence_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_confidence", 0);

  /* "../../../../opencog/cython/opencog/truth_value.pyx":47
 * 
 *     cdef confidence_t _confidence(self):
 *         return self._ptr().get_confidence()             # <<<<<<<<<<<<<<
 * 
 *     cdef count_t _count(self):
 */
  __pyx_r = ((struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue *)__pyx_v_self->__pyx_base.__pyx_vtab)->_ptr(__pyx_v_self)->get_confidence();
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/truth_value.pyx":46
 *         return self._ptr().get_mean()
 * 
 *     cdef confidence_t _confidence(self):             # <<<<<<<<<<<<<<
 *         return self._ptr().get_confidence()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/truth_value.pyx":49
 *         return self._ptr().get_confidence()
 * 
 *     cdef count_t _count(self):             # <<<<<<<<<<<<<<
 *         return self._ptr().get_count()
 * 
 */

static __pyx_t_7opencog_9atomspace_count_t __pyx_f_7opencog_9atomspace_10TruthValue__count(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self) {
  __pyx_t_7opencog_9atomspace_count_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_count", 0);

  /* "../../../../opencog/cython/opencog/truth_value.pyx":50
 * 
 *     cdef count_t _count(self):
 *         return self._ptr().get_count()             # <<<<<<<<<<<<<<
 * 
 *     cdef cTruthValue* _ptr(self):
 */
  __pyx_r = ((struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue *)__pyx_v_self->__pyx_base.__pyx_vtab)->_ptr(__pyx_v_self)->get_count();
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/truth_value.pyx":49
 *         return self._ptr().get_confidence()
 * 
 *     cdef count_t _count(self):             # <<<<<<<<<<<<<<
 *         return self._ptr().get_count()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/truth_value.pyx":52
 *         return self._ptr().get_count()
 * 
 *     cdef cTruthValue* _ptr(self):             # <<<<<<<<<<<<<<
 *         return <cTruthValue*>(self.get_c_value_ptr().get())
 * 
 */

static const opencog::TruthValue *__pyx_f_7opencog_9atomspace_10TruthValue__ptr(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self) {
  const opencog::TruthValue *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_ptr", 0);

  /* "../../../../opencog/cython/opencog/truth_value.pyx":53
 * 
 *     cdef cTruthValue* _ptr(self):
 *         return <cTruthValue*>(self.get_c_value_ptr().get())             # <<<<<<<<<<<<<<
 * 
 *     cdef tv_ptr* _tvptr(self):
 */
  __pyx_r = ((const opencog::TruthValue *)((struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_c_value_ptr(((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_self)).get());
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/truth_value.pyx":52
 *         return self._ptr().get_count()
 * 
 *     cdef cTruthValue* _ptr(self):             # <<<<<<<<<<<<<<
 *         return <cTruthValue*>(self.get_c_value_ptr().get())
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/truth_value.pyx":55
 *         return <cTruthValue*>(self.get_c_value_ptr().get())
 * 
 *     cdef tv_ptr* _tvptr(self):             # <<<<<<<<<<<<<<
 *         return <tv_ptr*>&((<PtrHolder>self.ptr_holder).shared_ptr)
 */

static opencog::TruthValuePtr *__pyx_f_7opencog_9atomspace_10TruthValue__tvptr(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self) {
  opencog::TruthValuePtr *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_tvptr", 0);

  /* "../../../../opencog/cython/opencog/truth_value.pyx":56
 * 
 *     cdef tv_ptr* _tvptr(self):
 *         return <tv_ptr*>&((<PtrHolder>self.ptr_holder).shared_ptr)             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((opencog::TruthValuePtr *)(&__pyx_v_self->__pyx_base.ptr_holder->shared_ptr));
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/truth_value.pyx":55
 *         return <cTruthValue*>(self.get_c_value_ptr().get())
 * 
 *     cdef tv_ptr* _tvptr(self):             # <<<<<<<<<<<<<<
 *         return <tv_ptr*>&((<PtrHolder>self.ptr_holder).shared_ptr)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_10TruthValue_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_10TruthValue_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_10TruthValue___reduce_cython__(((struct __pyx_obj_7opencog_9atomspace_TruthValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_10TruthValue___reduce_cython__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.ptr_holder,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.ptr_holder));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.ptr_holder));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->__pyx_base.ptr_holder));
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.ptr_holder,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.ptr_holder,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.ptr_holder is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.ptr_holder,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.ptr_holder is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_TruthValue, (type(self), 0x4ddf78e, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->__pyx_base.ptr_holder) != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.ptr_holder is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_TruthValue, (type(self), 0x4ddf78e, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.ptr_holder is not None
 *     if use_setstate:
 *         return __pyx_unpickle_TruthValue, (type(self), 0x4ddf78e, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_TruthValue, (type(self), 0x4ddf78e, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_TruthValue); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_81655694);
    __Pyx_GIVEREF(__pyx_int_81655694);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_81655694);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.ptr_holder is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_TruthValue, (type(self), 0x4ddf78e, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_TruthValue, (type(self), 0x4ddf78e, None), state
 *     else:
 *         return __pyx_unpickle_TruthValue, (type(self), 0x4ddf78e, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_TruthValue__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_TruthValue); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_81655694);
    __Pyx_GIVEREF(__pyx_int_81655694);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_81655694);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opencog.atomspace.TruthValue.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_TruthValue, (type(self), 0x4ddf78e, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_TruthValue__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_10TruthValue_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_10TruthValue_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_10TruthValue_2__setstate_cython__(((struct __pyx_obj_7opencog_9atomspace_TruthValue *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_10TruthValue_2__setstate_cython__(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_TruthValue, (type(self), 0x4ddf78e, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_TruthValue__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_7opencog_9atomspace___pyx_unpickle_TruthValue__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_TruthValue, (type(self), 0x4ddf78e, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_TruthValue__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.TruthValue.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/float_value.pyx":2
 * 
 * def createFloatValue(arg):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cFloatValue] c_ptr
 *     if (isinstance(arg, list)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_5createFloatValue(PyObject *__pyx_self, PyObject *__pyx_v_arg); /*proto*/
static PyMethodDef __pyx_mdef_7opencog_9atomspace_5createFloatValue = {"createFloatValue", (PyCFunction)__pyx_pw_7opencog_9atomspace_5createFloatValue, METH_O, 0};
static PyObject *__pyx_pw_7opencog_9atomspace_5createFloatValue(PyObject *__pyx_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createFloatValue (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4createFloatValue(__pyx_self, ((PyObject *)__pyx_v_arg));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4createFloatValue(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg) {
  std::shared_ptr<opencog::FloatValue>  __pyx_v_c_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createFloatValue", 0);

  /* "../../../../opencog/cython/opencog/float_value.pyx":4
 * def createFloatValue(arg):
 *     cdef shared_ptr[cFloatValue] c_ptr
 *     if (isinstance(arg, list)):             # <<<<<<<<<<<<<<
 *         c_ptr.reset(new cFloatValue(FloatValue.list_of_doubles_to_vector(arg)))
 *     else:
 */
  __pyx_t_1 = PyList_Check(__pyx_v_arg); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../../opencog/cython/opencog/float_value.pyx":5
 *     cdef shared_ptr[cFloatValue] c_ptr
 *     if (isinstance(arg, list)):
 *         c_ptr.reset(new cFloatValue(FloatValue.list_of_doubles_to_vector(arg)))             # <<<<<<<<<<<<<<
 *     else:
 *         c_ptr.reset(new cFloatValue(<double>arg))
 */
    if (!(likely(PyList_CheckExact(__pyx_v_arg))||((__pyx_v_arg) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_arg)->tp_name), 0))) __PYX_ERR(6, 5, __pyx_L1_error)
    __pyx_v_c_ptr.reset(new opencog::FloatValue(__pyx_f_7opencog_9atomspace_10FloatValue_list_of_doubles_to_vector(((PyObject*)__pyx_v_arg))));

    /* "../../../../opencog/cython/opencog/float_value.pyx":4
 * def createFloatValue(arg):
 *     cdef shared_ptr[cFloatValue] c_ptr
 *     if (isinstance(arg, list)):             # <<<<<<<<<<<<<<
 *         c_ptr.reset(new cFloatValue(FloatValue.list_of_doubles_to_vector(arg)))
 *     else:
 */
    goto __pyx_L3;
  }

  /* "../../../../opencog/cython/opencog/float_value.pyx":7
 *         c_ptr.reset(new cFloatValue(FloatValue.list_of_doubles_to_vector(arg)))
 *     else:
 *         c_ptr.reset(new cFloatValue(<double>arg))             # <<<<<<<<<<<<<<
 *     return FloatValue(PtrHolder.create(<shared_ptr[void]&>c_ptr))
 * 
 */
  /*else*/ {
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_arg); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 7, __pyx_L1_error)
    __pyx_v_c_ptr.reset(new opencog::FloatValue(((double)__pyx_t_3)));
  }
  __pyx_L3:;

  /* "../../../../opencog/cython/opencog/float_value.pyx":8
 *     else:
 *         c_ptr.reset(new cFloatValue(<double>arg))
 *     return FloatValue(PtrHolder.create(<shared_ptr[void]&>c_ptr))             # <<<<<<<<<<<<<<
 * 
 * cdef class FloatValue(Value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = ((PyObject *)__pyx_f_7opencog_9atomspace_9PtrHolder_create(((std::shared_ptr<void>  &)__pyx_v_c_ptr))); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7opencog_9atomspace_FloatValue), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/float_value.pyx":2
 * 
 * def createFloatValue(arg):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cFloatValue] c_ptr
 *     if (isinstance(arg, list)):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opencog.atomspace.createFloatValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/float_value.pyx":12
 * cdef class FloatValue(Value):
 * 
 *     def to_list(self):             # <<<<<<<<<<<<<<
 *         return FloatValue.vector_of_doubles_to_list(
 *             &((<cFloatValue*>self.get_c_value_ptr().get()).value()))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_10FloatValue_1to_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_10FloatValue_1to_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_list (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_10FloatValue_to_list(((struct __pyx_obj_7opencog_9atomspace_FloatValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_10FloatValue_to_list(struct __pyx_obj_7opencog_9atomspace_FloatValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_list", 0);

  /* "../../../../opencog/cython/opencog/float_value.pyx":13
 * 
 *     def to_list(self):
 *         return FloatValue.vector_of_doubles_to_list(             # <<<<<<<<<<<<<<
 *             &((<cFloatValue*>self.get_c_value_ptr().get()).value()))
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "../../../../opencog/cython/opencog/float_value.pyx":14
 *     def to_list(self):
 *         return FloatValue.vector_of_doubles_to_list(
 *             &((<cFloatValue*>self.get_c_value_ptr().get()).value()))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_1 = __pyx_f_7opencog_9atomspace_10FloatValue_vector_of_doubles_to_list((&((opencog::FloatValue *)((struct __pyx_vtabstruct_7opencog_9atomspace_FloatValue *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_c_value_ptr(((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_self)).get())->value())); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/float_value.pyx":12
 * cdef class FloatValue(Value):
 * 
 *     def to_list(self):             # <<<<<<<<<<<<<<
 *         return FloatValue.vector_of_doubles_to_list(
 *             &((<cFloatValue*>self.get_c_value_ptr().get()).value()))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.FloatValue.to_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/float_value.pyx":17
 * 
 *     @staticmethod
 *     cdef vector[double] list_of_doubles_to_vector(list python_list):             # <<<<<<<<<<<<<<
 *         cdef vector[double] cpp_vector
 *         cdef double value
 */

static std::vector<double>  __pyx_f_7opencog_9atomspace_10FloatValue_list_of_doubles_to_vector(PyObject *__pyx_v_python_list) {
  std::vector<double>  __pyx_v_cpp_vector;
  double __pyx_v_value;
  std::vector<double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("list_of_doubles_to_vector", 0);

  /* "../../../../opencog/cython/opencog/float_value.pyx":20
 *         cdef vector[double] cpp_vector
 *         cdef double value
 *         for value in python_list:             # <<<<<<<<<<<<<<
 *             cpp_vector.push_back(value)
 *         return cpp_vector
 */
  if (unlikely(__pyx_v_python_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(6, 20, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_python_list; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(6, 20, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 20, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 20, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_value = __pyx_t_4;

    /* "../../../../opencog/cython/opencog/float_value.pyx":21
 *         cdef double value
 *         for value in python_list:
 *             cpp_vector.push_back(value)             # <<<<<<<<<<<<<<
 *         return cpp_vector
 * 
 */
    try {
      __pyx_v_cpp_vector.push_back(__pyx_v_value);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(6, 21, __pyx_L1_error)
    }

    /* "../../../../opencog/cython/opencog/float_value.pyx":20
 *         cdef vector[double] cpp_vector
 *         cdef double value
 *         for value in python_list:             # <<<<<<<<<<<<<<
 *             cpp_vector.push_back(value)
 *         return cpp_vector
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/float_value.pyx":22
 *         for value in python_list:
 *             cpp_vector.push_back(value)
 *         return cpp_vector             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = __pyx_v_cpp_vector;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/float_value.pyx":17
 * 
 *     @staticmethod
 *     cdef vector[double] list_of_doubles_to_vector(list python_list):             # <<<<<<<<<<<<<<
 *         cdef vector[double] cpp_vector
 *         cdef double value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("opencog.atomspace.FloatValue.list_of_doubles_to_vector", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/float_value.pyx":25
 * 
 *     @staticmethod
 *     cdef list vector_of_doubles_to_list(const vector[double]* cpp_vector):             # <<<<<<<<<<<<<<
 *         list = []
 *         it = cpp_vector.const_begin()
 */

static PyObject *__pyx_f_7opencog_9atomspace_10FloatValue_vector_of_doubles_to_list(std::vector<double>  const *__pyx_v_cpp_vector) {
  PyObject *__pyx_v_list = NULL;
  std::vector<double> ::const_iterator __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("vector_of_doubles_to_list", 0);

  /* "../../../../opencog/cython/opencog/float_value.pyx":26
 *     @staticmethod
 *     cdef list vector_of_doubles_to_list(const vector[double]* cpp_vector):
 *         list = []             # <<<<<<<<<<<<<<
 *         it = cpp_vector.const_begin()
 *         while it != cpp_vector.const_end():
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/float_value.pyx":27
 *     cdef list vector_of_doubles_to_list(const vector[double]* cpp_vector):
 *         list = []
 *         it = cpp_vector.const_begin()             # <<<<<<<<<<<<<<
 *         while it != cpp_vector.const_end():
 *             list.append(deref(it))
 */
  __pyx_v_it = __pyx_v_cpp_vector->begin();

  /* "../../../../opencog/cython/opencog/float_value.pyx":28
 *         list = []
 *         it = cpp_vector.const_begin()
 *         while it != cpp_vector.const_end():             # <<<<<<<<<<<<<<
 *             list.append(deref(it))
 *             inc(it)
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_it != __pyx_v_cpp_vector->end()) != 0);
    if (!__pyx_t_2) break;

    /* "../../../../opencog/cython/opencog/float_value.pyx":29
 *         it = cpp_vector.const_begin()
 *         while it != cpp_vector.const_end():
 *             list.append(deref(it))             # <<<<<<<<<<<<<<
 *             inc(it)
 *         return list
 */
    __pyx_t_1 = PyFloat_FromDouble((*__pyx_v_it)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_list, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(6, 29, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "../../../../opencog/cython/opencog/float_value.pyx":30
 *         while it != cpp_vector.const_end():
 *             list.append(deref(it))
 *             inc(it)             # <<<<<<<<<<<<<<
 *         return list
 * 
 */
    (void)((++__pyx_v_it));
  }

  /* "../../../../opencog/cython/opencog/float_value.pyx":31
 *             list.append(deref(it))
 *             inc(it)
 *         return list             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_list);
  __pyx_r = __pyx_v_list;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/float_value.pyx":25
 * 
 *     @staticmethod
 *     cdef list vector_of_doubles_to_list(const vector[double]* cpp_vector):             # <<<<<<<<<<<<<<
 *         list = []
 *         it = cpp_vector.const_begin()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.FloatValue.vector_of_doubles_to_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_10FloatValue_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_10FloatValue_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_10FloatValue_2__reduce_cython__(((struct __pyx_obj_7opencog_9atomspace_FloatValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_10FloatValue_2__reduce_cython__(struct __pyx_obj_7opencog_9atomspace_FloatValue *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.ptr_holder,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.ptr_holder));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.ptr_holder));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->__pyx_base.ptr_holder));
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.ptr_holder,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.ptr_holder,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.ptr_holder is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.ptr_holder,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.ptr_holder is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_FloatValue, (type(self), 0x4ddf78e, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->__pyx_base.ptr_holder) != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.ptr_holder is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_FloatValue, (type(self), 0x4ddf78e, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.ptr_holder is not None
 *     if use_setstate:
 *         return __pyx_unpickle_FloatValue, (type(self), 0x4ddf78e, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_FloatValue, (type(self), 0x4ddf78e, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_FloatValue); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_81655694);
    __Pyx_GIVEREF(__pyx_int_81655694);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_81655694);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.ptr_holder is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_FloatValue, (type(self), 0x4ddf78e, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_FloatValue, (type(self), 0x4ddf78e, None), state
 *     else:
 *         return __pyx_unpickle_FloatValue, (type(self), 0x4ddf78e, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_FloatValue__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_FloatValue); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_81655694);
    __Pyx_GIVEREF(__pyx_int_81655694);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_81655694);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opencog.atomspace.FloatValue.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_FloatValue, (type(self), 0x4ddf78e, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_FloatValue__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_10FloatValue_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_10FloatValue_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_10FloatValue_4__setstate_cython__(((struct __pyx_obj_7opencog_9atomspace_FloatValue *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_10FloatValue_4__setstate_cython__(struct __pyx_obj_7opencog_9atomspace_FloatValue *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_FloatValue, (type(self), 0x4ddf78e, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_FloatValue__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_7opencog_9atomspace___pyx_unpickle_FloatValue__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_FloatValue, (type(self), 0x4ddf78e, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_FloatValue__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.FloatValue.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/string_value.pyx":2
 * 
 * def createStringValue(arg):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cStringValue] c_ptr
 *     if (isinstance(arg, list)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_7createStringValue(PyObject *__pyx_self, PyObject *__pyx_v_arg); /*proto*/
static PyMethodDef __pyx_mdef_7opencog_9atomspace_7createStringValue = {"createStringValue", (PyCFunction)__pyx_pw_7opencog_9atomspace_7createStringValue, METH_O, 0};
static PyObject *__pyx_pw_7opencog_9atomspace_7createStringValue(PyObject *__pyx_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createStringValue (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_6createStringValue(__pyx_self, ((PyObject *)__pyx_v_arg));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_6createStringValue(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg) {
  std::shared_ptr<opencog::StringValue>  __pyx_v_c_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createStringValue", 0);

  /* "../../../../opencog/cython/opencog/string_value.pyx":4
 * def createStringValue(arg):
 *     cdef shared_ptr[cStringValue] c_ptr
 *     if (isinstance(arg, list)):             # <<<<<<<<<<<<<<
 *         c_ptr.reset(new cStringValue(StringValue.list_of_strings_to_vector(arg)))
 *     else:
 */
  __pyx_t_1 = PyList_Check(__pyx_v_arg); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../../opencog/cython/opencog/string_value.pyx":5
 *     cdef shared_ptr[cStringValue] c_ptr
 *     if (isinstance(arg, list)):
 *         c_ptr.reset(new cStringValue(StringValue.list_of_strings_to_vector(arg)))             # <<<<<<<<<<<<<<
 *     else:
 *         c_ptr.reset(new cStringValue(<string>(arg.encode('UTF-8'))))
 */
    if (!(likely(PyList_CheckExact(__pyx_v_arg))||((__pyx_v_arg) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_arg)->tp_name), 0))) __PYX_ERR(7, 5, __pyx_L1_error)
    __pyx_v_c_ptr.reset(new opencog::StringValue(__pyx_f_7opencog_9atomspace_11StringValue_list_of_strings_to_vector(((PyObject*)__pyx_v_arg))));

    /* "../../../../opencog/cython/opencog/string_value.pyx":4
 * def createStringValue(arg):
 *     cdef shared_ptr[cStringValue] c_ptr
 *     if (isinstance(arg, list)):             # <<<<<<<<<<<<<<
 *         c_ptr.reset(new cStringValue(StringValue.list_of_strings_to_vector(arg)))
 *     else:
 */
    goto __pyx_L3;
  }

  /* "../../../../opencog/cython/opencog/string_value.pyx":7
 *         c_ptr.reset(new cStringValue(StringValue.list_of_strings_to_vector(arg)))
 *     else:
 *         c_ptr.reset(new cStringValue(<string>(arg.encode('UTF-8'))))             # <<<<<<<<<<<<<<
 *     return StringValue(PtrHolder.create(<shared_ptr[void]&>c_ptr))
 * 
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_u_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(7, 7, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_c_ptr.reset(new opencog::StringValue(((std::string)__pyx_t_6)));
  }
  __pyx_L3:;

  /* "../../../../opencog/cython/opencog/string_value.pyx":8
 *     else:
 *         c_ptr.reset(new cStringValue(<string>(arg.encode('UTF-8'))))
 *     return StringValue(PtrHolder.create(<shared_ptr[void]&>c_ptr))             # <<<<<<<<<<<<<<
 * 
 * cdef class StringValue(Value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)__pyx_f_7opencog_9atomspace_9PtrHolder_create(((std::shared_ptr<void>  &)__pyx_v_c_ptr))); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7opencog_9atomspace_StringValue), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/string_value.pyx":2
 * 
 * def createStringValue(arg):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cStringValue] c_ptr
 *     if (isinstance(arg, list)):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opencog.atomspace.createStringValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/string_value.pyx":12
 * cdef class StringValue(Value):
 * 
 *     def to_list(self):             # <<<<<<<<<<<<<<
 *         return StringValue.vector_of_strings_to_list(
 *             &((<cStringValue*>self.get_c_value_ptr().get()).value()))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_11StringValue_1to_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_11StringValue_1to_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_list (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_11StringValue_to_list(((struct __pyx_obj_7opencog_9atomspace_StringValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_11StringValue_to_list(struct __pyx_obj_7opencog_9atomspace_StringValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_list", 0);

  /* "../../../../opencog/cython/opencog/string_value.pyx":13
 * 
 *     def to_list(self):
 *         return StringValue.vector_of_strings_to_list(             # <<<<<<<<<<<<<<
 *             &((<cStringValue*>self.get_c_value_ptr().get()).value()))
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "../../../../opencog/cython/opencog/string_value.pyx":14
 *     def to_list(self):
 *         return StringValue.vector_of_strings_to_list(
 *             &((<cStringValue*>self.get_c_value_ptr().get()).value()))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_1 = __pyx_f_7opencog_9atomspace_11StringValue_vector_of_strings_to_list((&((opencog::StringValue *)((struct __pyx_vtabstruct_7opencog_9atomspace_StringValue *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_c_value_ptr(((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_self)).get())->value())); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/string_value.pyx":12
 * cdef class StringValue(Value):
 * 
 *     def to_list(self):             # <<<<<<<<<<<<<<
 *         return StringValue.vector_of_strings_to_list(
 *             &((<cStringValue*>self.get_c_value_ptr().get()).value()))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.StringValue.to_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/string_value.pyx":17
 * 
 *     @staticmethod
 *     cdef vector[string] list_of_strings_to_vector(list python_list):             # <<<<<<<<<<<<<<
 *         cdef vector[string] cpp_vector
 *         for value in python_list:
 */

static std::vector<std::string>  __pyx_f_7opencog_9atomspace_11StringValue_list_of_strings_to_vector(PyObject *__pyx_v_python_list) {
  std::vector<std::string>  __pyx_v_cpp_vector;
  PyObject *__pyx_v_value = NULL;
  std::vector<std::string>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("list_of_strings_to_vector", 0);

  /* "../../../../opencog/cython/opencog/string_value.pyx":19
 *     cdef vector[string] list_of_strings_to_vector(list python_list):
 *         cdef vector[string] cpp_vector
 *         for value in python_list:             # <<<<<<<<<<<<<<
 *             cpp_vector.push_back(value.encode('UTF-8'))
 *         return cpp_vector
 */
  if (unlikely(__pyx_v_python_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(7, 19, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_python_list; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(7, 19, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 19, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../../../opencog/cython/opencog/string_value.pyx":20
 *         cdef vector[string] cpp_vector
 *         for value in python_list:
 *             cpp_vector.push_back(value.encode('UTF-8'))             # <<<<<<<<<<<<<<
 *         return cpp_vector
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 20, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_u_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_UTF_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 20, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(7, 20, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    try {
      __pyx_v_cpp_vector.push_back(__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(7, 20, __pyx_L1_error)
    }

    /* "../../../../opencog/cython/opencog/string_value.pyx":19
 *     cdef vector[string] list_of_strings_to_vector(list python_list):
 *         cdef vector[string] cpp_vector
 *         for value in python_list:             # <<<<<<<<<<<<<<
 *             cpp_vector.push_back(value.encode('UTF-8'))
 *         return cpp_vector
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/string_value.pyx":21
 *         for value in python_list:
 *             cpp_vector.push_back(value.encode('UTF-8'))
 *         return cpp_vector             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = __pyx_v_cpp_vector;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/string_value.pyx":17
 * 
 *     @staticmethod
 *     cdef vector[string] list_of_strings_to_vector(list python_list):             # <<<<<<<<<<<<<<
 *         cdef vector[string] cpp_vector
 *         for value in python_list:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("opencog.atomspace.StringValue.list_of_strings_to_vector", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/string_value.pyx":24
 * 
 *     @staticmethod
 *     cdef list vector_of_strings_to_list(const vector[string]* cpp_vector):             # <<<<<<<<<<<<<<
 *         list = []
 *         it = cpp_vector.const_begin()
 */

static PyObject *__pyx_f_7opencog_9atomspace_11StringValue_vector_of_strings_to_list(std::vector<std::string>  const *__pyx_v_cpp_vector) {
  PyObject *__pyx_v_list = NULL;
  std::vector<std::string> ::const_iterator __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("vector_of_strings_to_list", 0);

  /* "../../../../opencog/cython/opencog/string_value.pyx":25
 *     @staticmethod
 *     cdef list vector_of_strings_to_list(const vector[string]* cpp_vector):
 *         list = []             # <<<<<<<<<<<<<<
 *         it = cpp_vector.const_begin()
 *         while it != cpp_vector.const_end():
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/string_value.pyx":26
 *     cdef list vector_of_strings_to_list(const vector[string]* cpp_vector):
 *         list = []
 *         it = cpp_vector.const_begin()             # <<<<<<<<<<<<<<
 *         while it != cpp_vector.const_end():
 *             list.append((<bytes>deref(it).c_str()).decode('UTF-8'))
 */
  __pyx_v_it = __pyx_v_cpp_vector->begin();

  /* "../../../../opencog/cython/opencog/string_value.pyx":27
 *         list = []
 *         it = cpp_vector.const_begin()
 *         while it != cpp_vector.const_end():             # <<<<<<<<<<<<<<
 *             list.append((<bytes>deref(it).c_str()).decode('UTF-8'))
 *             inc(it)
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_it != __pyx_v_cpp_vector->end()) != 0);
    if (!__pyx_t_2) break;

    /* "../../../../opencog/cython/opencog/string_value.pyx":28
 *         it = cpp_vector.const_begin()
 *         while it != cpp_vector.const_end():
 *             list.append((<bytes>deref(it).c_str()).decode('UTF-8'))             # <<<<<<<<<<<<<<
 *             inc(it)
 *         return list
 */
    __pyx_t_1 = __Pyx_PyBytes_FromString((*__pyx_v_it).c_str()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 28, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_t_1 == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
      __PYX_ERR(7, 28, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_decode_bytes(((PyObject*)__pyx_t_1), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 28, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_list, __pyx_t_3); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(7, 28, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "../../../../opencog/cython/opencog/string_value.pyx":29
 *         while it != cpp_vector.const_end():
 *             list.append((<bytes>deref(it).c_str()).decode('UTF-8'))
 *             inc(it)             # <<<<<<<<<<<<<<
 *         return list
 */
    (void)((++__pyx_v_it));
  }

  /* "../../../../opencog/cython/opencog/string_value.pyx":30
 *             list.append((<bytes>deref(it).c_str()).decode('UTF-8'))
 *             inc(it)
 *         return list             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_list);
  __pyx_r = __pyx_v_list;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/string_value.pyx":24
 * 
 *     @staticmethod
 *     cdef list vector_of_strings_to_list(const vector[string]* cpp_vector):             # <<<<<<<<<<<<<<
 *         list = []
 *         it = cpp_vector.const_begin()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.StringValue.vector_of_strings_to_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_11StringValue_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_11StringValue_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_11StringValue_2__reduce_cython__(((struct __pyx_obj_7opencog_9atomspace_StringValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_11StringValue_2__reduce_cython__(struct __pyx_obj_7opencog_9atomspace_StringValue *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.ptr_holder,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.ptr_holder));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.ptr_holder));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->__pyx_base.ptr_holder));
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.ptr_holder,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.ptr_holder,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.ptr_holder is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.ptr_holder,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.ptr_holder is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_StringValue, (type(self), 0x4ddf78e, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->__pyx_base.ptr_holder) != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.ptr_holder is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_StringValue, (type(self), 0x4ddf78e, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.ptr_holder is not None
 *     if use_setstate:
 *         return __pyx_unpickle_StringValue, (type(self), 0x4ddf78e, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_StringValue, (type(self), 0x4ddf78e, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_StringValue); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_81655694);
    __Pyx_GIVEREF(__pyx_int_81655694);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_81655694);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.ptr_holder is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_StringValue, (type(self), 0x4ddf78e, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_StringValue, (type(self), 0x4ddf78e, None), state
 *     else:
 *         return __pyx_unpickle_StringValue, (type(self), 0x4ddf78e, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_StringValue__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_StringValue); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_81655694);
    __Pyx_GIVEREF(__pyx_int_81655694);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_81655694);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opencog.atomspace.StringValue.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_StringValue, (type(self), 0x4ddf78e, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_StringValue__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_11StringValue_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_11StringValue_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_11StringValue_4__setstate_cython__(((struct __pyx_obj_7opencog_9atomspace_StringValue *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_11StringValue_4__setstate_cython__(struct __pyx_obj_7opencog_9atomspace_StringValue *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_StringValue, (type(self), 0x4ddf78e, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_StringValue__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_7opencog_9atomspace___pyx_unpickle_StringValue__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_StringValue, (type(self), 0x4ddf78e, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_StringValue__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.StringValue.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":10
 * cdef class Atom(Value):
 * 
 *     def __cinit__(self, PtrHolder ptr_holder, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.handle = <cHandle*>&((<PtrHolder>ptr_holder).shared_ptr)
 *         self._atom_type = None
 */

/* Python wrapper */
static int __pyx_pw_7opencog_9atomspace_4Atom_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7opencog_9atomspace_4Atom_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7opencog_9atomspace_PtrHolder *__pyx_v_ptr_holder = 0;
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ptr_holder,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ptr_holder)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__cinit__") < 0)) __PYX_ERR(3, 10, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_ptr_holder = ((struct __pyx_obj_7opencog_9atomspace_PtrHolder *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 10, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("opencog.atomspace.Atom.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ptr_holder), __pyx_ptype_7opencog_9atomspace_PtrHolder, 1, "ptr_holder", 0))) __PYX_ERR(3, 10, __pyx_L1_error)
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom___cinit__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self), __pyx_v_ptr_holder, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opencog_9atomspace_4Atom___cinit__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, struct __pyx_obj_7opencog_9atomspace_PtrHolder *__pyx_v_ptr_holder, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":11
 * 
 *     def __cinit__(self, PtrHolder ptr_holder, *args, **kwargs):
 *         self.handle = <cHandle*>&((<PtrHolder>ptr_holder).shared_ptr)             # <<<<<<<<<<<<<<
 *         self._atom_type = None
 *         self._name = None
 */
  __pyx_v_self->handle = ((opencog::Handle *)(&__pyx_v_ptr_holder->shared_ptr));

  /* "../../../../opencog/cython/opencog/atom.pyx":12
 *     def __cinit__(self, PtrHolder ptr_holder, *args, **kwargs):
 *         self.handle = <cHandle*>&((<PtrHolder>ptr_holder).shared_ptr)
 *         self._atom_type = None             # <<<<<<<<<<<<<<
 *         self._name = None
 *         self._outgoing = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_atom_type);
  __Pyx_DECREF(__pyx_v_self->_atom_type);
  __pyx_v_self->_atom_type = Py_None;

  /* "../../../../opencog/cython/opencog/atom.pyx":13
 *         self.handle = <cHandle*>&((<PtrHolder>ptr_holder).shared_ptr)
 *         self._atom_type = None
 *         self._name = None             # <<<<<<<<<<<<<<
 *         self._outgoing = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_name);
  __Pyx_DECREF(__pyx_v_self->_name);
  __pyx_v_self->_name = Py_None;

  /* "../../../../opencog/cython/opencog/atom.pyx":14
 *         self._atom_type = None
 *         self._name = None
 *         self._outgoing = None             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_outgoing);
  __Pyx_DECREF(__pyx_v_self->_outgoing);
  __pyx_v_self->_outgoing = Py_None;

  /* "../../../../opencog/cython/opencog/atom.pyx":10
 * cdef class Atom(Value):
 * 
 *     def __cinit__(self, PtrHolder ptr_holder, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.handle = <cHandle*>&((<PtrHolder>ptr_holder).shared_ptr)
 *         self._atom_type = None
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":17
 * 
 *     @staticmethod
 *     cdef Atom createAtom(const cHandle& handle):             # <<<<<<<<<<<<<<
 *         return Atom(PtrHolder.create(<shared_ptr[void]&>handle))
 * 
 */

static struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_f_7opencog_9atomspace_4Atom_createAtom(opencog::Handle const &__pyx_v_handle) {
  struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createAtom", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":18
 *     @staticmethod
 *     cdef Atom createAtom(const cHandle& handle):
 *         return Atom(PtrHolder.create(<shared_ptr[void]&>handle))             # <<<<<<<<<<<<<<
 * 
 *     cdef cHandle get_c_handle(Atom self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = ((PyObject *)__pyx_f_7opencog_9atomspace_9PtrHolder_create(((std::shared_ptr<void>  &)__pyx_v_handle))); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7opencog_9atomspace_Atom), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":17
 * 
 *     @staticmethod
 *     cdef Atom createAtom(const cHandle& handle):             # <<<<<<<<<<<<<<
 *         return Atom(PtrHolder.create(<shared_ptr[void]&>handle))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.Atom.createAtom", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":20
 *         return Atom(PtrHolder.create(<shared_ptr[void]&>handle))
 * 
 *     cdef cHandle get_c_handle(Atom self):             # <<<<<<<<<<<<<<
 *         """Return C++ shared_ptr from PtrHolder instance"""
 *         return <cHandle&>(self.ptr_holder.shared_ptr)
 */

static opencog::Handle __pyx_f_7opencog_9atomspace_4Atom_get_c_handle(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  opencog::Handle __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_c_handle", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":22
 *     cdef cHandle get_c_handle(Atom self):
 *         """Return C++ shared_ptr from PtrHolder instance"""
 *         return <cHandle&>(self.ptr_holder.shared_ptr)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_r = ((opencog::Handle &)__pyx_v_self->__pyx_base.ptr_holder->shared_ptr);
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":20
 *         return Atom(PtrHolder.create(<shared_ptr[void]&>handle))
 * 
 *     cdef cHandle get_c_handle(Atom self):             # <<<<<<<<<<<<<<
 *         """Return C++ shared_ptr from PtrHolder instance"""
 *         return <cHandle&>(self.ptr_holder.shared_ptr)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":25
 * 
 *     @property
 *     def atomspace(self):             # <<<<<<<<<<<<<<
 *         cdef cAtomSpace* a = self.get_c_handle().get().getAtomSpace()
 *         return AtomSpace_factory(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_9atomspace_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_9atomspace_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_9atomspace___get__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_9atomspace___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  opencog::AtomSpace *__pyx_v_a;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":26
 *     @property
 *     def atomspace(self):
 *         cdef cAtomSpace* a = self.get_c_handle().get().getAtomSpace()             # <<<<<<<<<<<<<<
 *         return AtomSpace_factory(a)
 * 
 */
  __pyx_v_a = ((struct __pyx_vtabstruct_7opencog_9atomspace_Atom *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_c_handle(__pyx_v_self).get()->getAtomSpace();

  /* "../../../../opencog/cython/opencog/atom.pyx":27
 *     def atomspace(self):
 *         cdef cAtomSpace* a = self.get_c_handle().get().getAtomSpace()
 *         return AtomSpace_factory(a)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7opencog_9atomspace_AtomSpace_factory(__pyx_v_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":25
 * 
 *     @property
 *     def atomspace(self):             # <<<<<<<<<<<<<<
 *         cdef cAtomSpace* a = self.get_c_handle().get().getAtomSpace()
 *         return AtomSpace_factory(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.Atom.atomspace.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":30
 * 
 *     @property
 *     def name(self):             # <<<<<<<<<<<<<<
 *         cdef cAtom* atom_ptr
 *         if self._name is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_4name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_4name___get__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_4name___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  opencog::Atom *__pyx_v_atom_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":32
 *     def name(self):
 *         cdef cAtom* atom_ptr
 *         if self._name is None:             # <<<<<<<<<<<<<<
 *             atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 */
  __pyx_t_1 = (__pyx_v_self->_name == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../../opencog/cython/opencog/atom.pyx":33
 *         cdef cAtom* atom_ptr
 *         if self._name is None:
 *             atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None
 */
    __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

    /* "../../../../opencog/cython/opencog/atom.pyx":34
 *         if self._name is None:
 *             atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return None
 *             if atom_ptr.is_node():
 */
    __pyx_t_2 = ((__pyx_v_atom_ptr == NULL) != 0);
    if (__pyx_t_2) {

      /* "../../../../opencog/cython/opencog/atom.pyx":35
 *             atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None             # <<<<<<<<<<<<<<
 *             if atom_ptr.is_node():
 *                 self._name = atom_ptr.get_name().decode('UTF-8')
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      goto __pyx_L0;

      /* "../../../../opencog/cython/opencog/atom.pyx":34
 *         if self._name is None:
 *             atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return None
 *             if atom_ptr.is_node():
 */
    }

    /* "../../../../opencog/cython/opencog/atom.pyx":36
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None
 *             if atom_ptr.is_node():             # <<<<<<<<<<<<<<
 *                 self._name = atom_ptr.get_name().decode('UTF-8')
 *             else:
 */
    __pyx_t_2 = (__pyx_v_atom_ptr->is_node() != 0);
    if (__pyx_t_2) {

      /* "../../../../opencog/cython/opencog/atom.pyx":37
 *                 return None
 *             if atom_ptr.is_node():
 *                 self._name = atom_ptr.get_name().decode('UTF-8')             # <<<<<<<<<<<<<<
 *             else:
 *                 self._name = ""
 */
      __pyx_t_3 = __Pyx_decode_cpp_string(__pyx_v_atom_ptr->get_name(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 37, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_v_self->_name);
      __Pyx_DECREF(__pyx_v_self->_name);
      __pyx_v_self->_name = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "../../../../opencog/cython/opencog/atom.pyx":36
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None
 *             if atom_ptr.is_node():             # <<<<<<<<<<<<<<
 *                 self._name = atom_ptr.get_name().decode('UTF-8')
 *             else:
 */
      goto __pyx_L5;
    }

    /* "../../../../opencog/cython/opencog/atom.pyx":39
 *                 self._name = atom_ptr.get_name().decode('UTF-8')
 *             else:
 *                 self._name = ""             # <<<<<<<<<<<<<<
 *         return self._name
 * 
 */
    /*else*/ {
      __Pyx_INCREF(__pyx_kp_u__10);
      __Pyx_GIVEREF(__pyx_kp_u__10);
      __Pyx_GOTREF(__pyx_v_self->_name);
      __Pyx_DECREF(__pyx_v_self->_name);
      __pyx_v_self->_name = __pyx_kp_u__10;
    }
    __pyx_L5:;

    /* "../../../../opencog/cython/opencog/atom.pyx":32
 *     def name(self):
 *         cdef cAtom* atom_ptr
 *         if self._name is None:             # <<<<<<<<<<<<<<
 *             atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":40
 *             else:
 *                 self._name = ""
 *         return self._name             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_name);
  __pyx_r = __pyx_v_self->_name;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":30
 * 
 *     @property
 *     def name(self):             # <<<<<<<<<<<<<<
 *         cdef cAtom* atom_ptr
 *         if self._name is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.Atom.name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":43
 * 
 *     @property
 *     def tv(self):             # <<<<<<<<<<<<<<
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         cdef tv_ptr tvp
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_2tv_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_2tv_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_2tv___get__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_2tv___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  opencog::Atom *__pyx_v_atom_ptr;
  opencog::TruthValuePtr __pyx_v_tvp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":44
 *     @property
 *     def tv(self):
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *         cdef tv_ptr tvp
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 */
  __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

  /* "../../../../opencog/cython/opencog/atom.pyx":46
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         cdef tv_ptr tvp
 *         if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *             return None
 *         tvp = atom_ptr.getTruthValue()
 */
  __pyx_t_1 = ((__pyx_v_atom_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":47
 *         cdef tv_ptr tvp
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return None             # <<<<<<<<<<<<<<
 *         tvp = atom_ptr.getTruthValue()
 *         if (not tvp.get()):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":46
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         cdef tv_ptr tvp
 *         if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *             return None
 *         tvp = atom_ptr.getTruthValue()
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":48
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return None
 *         tvp = atom_ptr.getTruthValue()             # <<<<<<<<<<<<<<
 *         if (not tvp.get()):
 *             raise AttributeError('cAtom returned NULL TruthValue pointer')
 */
  __pyx_v_tvp = __pyx_v_atom_ptr->getTruthValue();

  /* "../../../../opencog/cython/opencog/atom.pyx":49
 *             return None
 *         tvp = atom_ptr.getTruthValue()
 *         if (not tvp.get()):             # <<<<<<<<<<<<<<
 *             raise AttributeError('cAtom returned NULL TruthValue pointer')
 *         return createTruthValue(tvp.get().get_mean(), tvp.get().get_confidence())
 */
  __pyx_t_1 = ((!(__pyx_v_tvp.get() != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "../../../../opencog/cython/opencog/atom.pyx":50
 *         tvp = atom_ptr.getTruthValue()
 *         if (not tvp.get()):
 *             raise AttributeError('cAtom returned NULL TruthValue pointer')             # <<<<<<<<<<<<<<
 *         return createTruthValue(tvp.get().get_mean(), tvp.get().get_confidence())
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_AttributeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(3, 50, __pyx_L1_error)

    /* "../../../../opencog/cython/opencog/atom.pyx":49
 *             return None
 *         tvp = atom_ptr.getTruthValue()
 *         if (not tvp.get()):             # <<<<<<<<<<<<<<
 *             raise AttributeError('cAtom returned NULL TruthValue pointer')
 *         return createTruthValue(tvp.get().get_mean(), tvp.get().get_confidence())
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":51
 *         if (not tvp.get()):
 *             raise AttributeError('cAtom returned NULL TruthValue pointer')
 *         return createTruthValue(tvp.get().get_mean(), tvp.get().get_confidence())             # <<<<<<<<<<<<<<
 * 
 *     @tv.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_createTruthValue); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_tvp.get()->get_mean()); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_tvp.get()->get_confidence()); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 51, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 51, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":43
 * 
 *     @property
 *     def tv(self):             # <<<<<<<<<<<<<<
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         cdef tv_ptr tvp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("opencog.atomspace.Atom.tv.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":54
 * 
 *     @tv.setter
 *     def tv(self, truth_value):             # <<<<<<<<<<<<<<
 *         try:
 *             assert isinstance(truth_value, TruthValue)
 */

/* Python wrapper */
static int __pyx_pw_7opencog_9atomspace_4Atom_2tv_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_truth_value); /*proto*/
static int __pyx_pw_7opencog_9atomspace_4Atom_2tv_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_truth_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_2tv_2__set__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self), ((PyObject *)__pyx_v_truth_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7opencog_9atomspace_4Atom_2tv_2__set__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_truth_value) {
  opencog::Atom *__pyx_v_atom_ptr;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":55
 *     @tv.setter
 *     def tv(self, truth_value):
 *         try:             # <<<<<<<<<<<<<<
 *             assert isinstance(truth_value, TruthValue)
 *         except AssertionError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../opencog/cython/opencog/atom.pyx":56
 *     def tv(self, truth_value):
 *         try:
 *             assert isinstance(truth_value, TruthValue)             # <<<<<<<<<<<<<<
 *         except AssertionError:
 *             raise TypeError("atom.tv property needs a TruthValue object")
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_truth_value, __pyx_ptype_7opencog_9atomspace_TruthValue); 
        if (unlikely(!(__pyx_t_4 != 0))) {
          PyErr_SetNone(PyExc_AssertionError);
          __PYX_ERR(3, 56, __pyx_L3_error)
        }
      }
      #endif

      /* "../../../../opencog/cython/opencog/atom.pyx":55
 *     @tv.setter
 *     def tv(self, truth_value):
 *         try:             # <<<<<<<<<<<<<<
 *             assert isinstance(truth_value, TruthValue)
 *         except AssertionError:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../opencog/cython/opencog/atom.pyx":57
 *         try:
 *             assert isinstance(truth_value, TruthValue)
 *         except AssertionError:             # <<<<<<<<<<<<<<
 *             raise TypeError("atom.tv property needs a TruthValue object")
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AssertionError);
    if (__pyx_t_5) {
      __Pyx_AddTraceback("opencog.atomspace.Atom.tv.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(3, 57, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "../../../../opencog/cython/opencog/atom.pyx":58
 *             assert isinstance(truth_value, TruthValue)
 *         except AssertionError:
 *             raise TypeError("atom.tv property needs a TruthValue object")             # <<<<<<<<<<<<<<
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 58, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(3, 58, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../opencog/cython/opencog/atom.pyx":55
 *     @tv.setter
 *     def tv(self, truth_value):
 *         try:             # <<<<<<<<<<<<<<
 *             assert isinstance(truth_value, TruthValue)
 *         except AssertionError:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":59
 *         except AssertionError:
 *             raise TypeError("atom.tv property needs a TruthValue object")
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return
 */
  __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

  /* "../../../../opencog/cython/opencog/atom.pyx":60
 *             raise TypeError("atom.tv property needs a TruthValue object")
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *             return
 *         atom_ptr.setTruthValue(deref((<TruthValue>truth_value)._tvptr()))
 */
  __pyx_t_4 = ((__pyx_v_atom_ptr == NULL) != 0);
  if (__pyx_t_4) {

    /* "../../../../opencog/cython/opencog/atom.pyx":61
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return             # <<<<<<<<<<<<<<
 *         atom_ptr.setTruthValue(deref((<TruthValue>truth_value)._tvptr()))
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":60
 *             raise TypeError("atom.tv property needs a TruthValue object")
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *             return
 *         atom_ptr.setTruthValue(deref((<TruthValue>truth_value)._tvptr()))
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":62
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return
 *         atom_ptr.setTruthValue(deref((<TruthValue>truth_value)._tvptr()))             # <<<<<<<<<<<<<<
 * 
 *     def id_string(self):
 */
  __pyx_v_atom_ptr->setTruthValue((*((struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue *)((struct __pyx_obj_7opencog_9atomspace_TruthValue *)__pyx_v_truth_value)->__pyx_base.__pyx_vtab)->_tvptr(((struct __pyx_obj_7opencog_9atomspace_TruthValue *)__pyx_v_truth_value))));

  /* "../../../../opencog/cython/opencog/atom.pyx":54
 * 
 *     @tv.setter
 *     def tv(self, truth_value):             # <<<<<<<<<<<<<<
 *         try:
 *             assert isinstance(truth_value, TruthValue)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("opencog.atomspace.Atom.tv.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":64
 *         atom_ptr.setTruthValue(deref((<TruthValue>truth_value)._tvptr()))
 * 
 *     def id_string(self):             # <<<<<<<<<<<<<<
 *         return self.get_c_handle().get().id_to_string().decode('UTF-8')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_3id_string(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_3id_string(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("id_string (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_2id_string(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_2id_string(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("id_string", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":65
 * 
 *     def id_string(self):
 *         return self.get_c_handle().get().id_to_string().decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *     def set_value(self, key, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(((struct __pyx_vtabstruct_7opencog_9atomspace_Atom *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_c_handle(__pyx_v_self).get()->id_to_string(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":64
 *         atom_ptr.setTruthValue(deref((<TruthValue>truth_value)._tvptr()))
 * 
 *     def id_string(self):             # <<<<<<<<<<<<<<
 *         return self.get_c_handle().get().id_to_string().decode('UTF-8')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.Atom.id_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":67
 *         return self.get_c_handle().get().id_to_string().decode('UTF-8')
 * 
 *     def set_value(self, key, value):             # <<<<<<<<<<<<<<
 *         if not isinstance(key, Atom):
 *             raise TypeError("key should be an instance of Atom, got {0} instead".format(type(key)))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_5set_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_5set_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_value", 1, 2, 2, 1); __PYX_ERR(3, 67, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_value") < 0)) __PYX_ERR(3, 67, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_key = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_value", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 67, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.Atom.set_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_4set_value(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self), __pyx_v_key, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_4set_value(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_value", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":68
 * 
 *     def set_value(self, key, value):
 *         if not isinstance(key, Atom):             # <<<<<<<<<<<<<<
 *             raise TypeError("key should be an instance of Atom, got {0} instead".format(type(key)))
 *         self.get_c_handle().get().setValue(deref((<Atom>key).handle),
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_key, __pyx_ptype_7opencog_9atomspace_Atom); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "../../../../opencog/cython/opencog/atom.pyx":69
 *     def set_value(self, key, value):
 *         if not isinstance(key, Atom):
 *             raise TypeError("key should be an instance of Atom, got {0} instead".format(type(key)))             # <<<<<<<<<<<<<<
 *         self.get_c_handle().get().setValue(deref((<Atom>key).handle),
 *                                 (<Value>value).get_c_value_ptr())
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_key_should_be_an_instance_of_Ato, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, ((PyObject *)Py_TYPE(__pyx_v_key))) : __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)Py_TYPE(__pyx_v_key)));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(3, 69, __pyx_L1_error)

    /* "../../../../opencog/cython/opencog/atom.pyx":68
 * 
 *     def set_value(self, key, value):
 *         if not isinstance(key, Atom):             # <<<<<<<<<<<<<<
 *             raise TypeError("key should be an instance of Atom, got {0} instead".format(type(key)))
 *         self.get_c_handle().get().setValue(deref((<Atom>key).handle),
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":70
 *         if not isinstance(key, Atom):
 *             raise TypeError("key should be an instance of Atom, got {0} instead".format(type(key)))
 *         self.get_c_handle().get().setValue(deref((<Atom>key).handle),             # <<<<<<<<<<<<<<
 *                                 (<Value>value).get_c_value_ptr())
 * 
 */
  ((struct __pyx_vtabstruct_7opencog_9atomspace_Atom *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_c_handle(__pyx_v_self).get()->setValue((*((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_key)->handle), ((struct __pyx_vtabstruct_7opencog_9atomspace_Value *)((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_value)->__pyx_vtab)->get_c_value_ptr(((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_value)));

  /* "../../../../opencog/cython/opencog/atom.pyx":67
 *         return self.get_c_handle().get().id_to_string().decode('UTF-8')
 * 
 *     def set_value(self, key, value):             # <<<<<<<<<<<<<<
 *         if not isinstance(key, Atom):
 *             raise TypeError("key should be an instance of Atom, got {0} instead".format(type(key)))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opencog.atomspace.Atom.set_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":73
 *                                 (<Value>value).get_c_value_ptr())
 * 
 *     def get_value(self, key):             # <<<<<<<<<<<<<<
 *         cdef cValuePtr value = self.get_c_handle().get().getValue(
 *             deref((<Atom>key).handle))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_7get_value(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_7get_value(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_value (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_6get_value(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_6get_value(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_key) {
  opencog::ValuePtr __pyx_v_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_value", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":74
 * 
 *     def get_value(self, key):
 *         cdef cValuePtr value = self.get_c_handle().get().getValue(             # <<<<<<<<<<<<<<
 *             deref((<Atom>key).handle))
 *         if value.get() == NULL:
 */
  __pyx_v_value = ((struct __pyx_vtabstruct_7opencog_9atomspace_Atom *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_c_handle(__pyx_v_self).get()->getValue((*((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_key)->handle));

  /* "../../../../opencog/cython/opencog/atom.pyx":76
 *         cdef cValuePtr value = self.get_c_handle().get().getValue(
 *             deref((<Atom>key).handle))
 *         if value.get() == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         return create_python_value_from_c_value(value)
 */
  __pyx_t_1 = ((__pyx_v_value.get() == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":77
 *             deref((<Atom>key).handle))
 *         if value.get() == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         return create_python_value_from_c_value(value)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":76
 *         cdef cValuePtr value = self.get_c_handle().get().getValue(
 *             deref((<Atom>key).handle))
 *         if value.get() == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         return create_python_value_from_c_value(value)
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":78
 *         if value.get() == NULL:
 *             return None
 *         return create_python_value_from_c_value(value)             # <<<<<<<<<<<<<<
 * 
 *     def get_keys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_7opencog_9atomspace_create_python_value_from_c_value(__pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":73
 *                                 (<Value>value).get_c_value_ptr())
 * 
 *     def get_value(self, key):             # <<<<<<<<<<<<<<
 *         cdef cValuePtr value = self.get_c_handle().get().getValue(
 *             deref((<Atom>key).handle))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.Atom.get_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":80
 *         return create_python_value_from_c_value(value)
 * 
 *     def get_keys(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the keys of values associated with this atom.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_9get_keys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7opencog_9atomspace_4Atom_8get_keys[] = "\n        Returns the keys of values associated with this atom.\n\n        :returns: A list of atoms.\n        ";
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_9get_keys(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_keys (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_8get_keys(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_8get_keys(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  std::set<opencog::Handle>  __pyx_v_keys;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_keys", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":86
 *         :returns: A list of atoms.
 *         """
 *         cdef cpp_set[cHandle] keys = self.get_c_handle().get().getKeys()             # <<<<<<<<<<<<<<
 *         return convert_handle_set_to_python_list(keys)
 * 
 */
  __pyx_v_keys = ((struct __pyx_vtabstruct_7opencog_9atomspace_Atom *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_c_handle(__pyx_v_self).get()->getKeys();

  /* "../../../../opencog/cython/opencog/atom.pyx":87
 *         """
 *         cdef cpp_set[cHandle] keys = self.get_c_handle().get().getKeys()
 *         return convert_handle_set_to_python_list(keys)             # <<<<<<<<<<<<<<
 * 
 *     def get_out(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7opencog_9atomspace_convert_handle_set_to_python_list(__pyx_v_keys); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":80
 *         return create_python_value_from_c_value(value)
 * 
 *     def get_keys(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the keys of values associated with this atom.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.Atom.get_keys", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":89
 *         return convert_handle_set_to_python_list(keys)
 * 
 *     def get_out(self):             # <<<<<<<<<<<<<<
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_11get_out(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_11get_out(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_out (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_10get_out(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_10get_out(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  opencog::Atom *__pyx_v_atom_ptr;
  std::vector<opencog::Handle>  __pyx_v_handle_vector;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_out", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":90
 * 
 *     def get_out(self):
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return None
 */
  __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

  /* "../../../../opencog/cython/opencog/atom.pyx":91
 *     def get_out(self):
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector = atom_ptr.getOutgoingSet()
 */
  __pyx_t_1 = ((__pyx_v_atom_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":92
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return None             # <<<<<<<<<<<<<<
 *         cdef vector[cHandle] handle_vector = atom_ptr.getOutgoingSet()
 *         return convert_handle_seq_to_python_list(handle_vector)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":91
 *     def get_out(self):
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *             return None
 *         cdef vector[cHandle] handle_vector = atom_ptr.getOutgoingSet()
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":93
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return None
 *         cdef vector[cHandle] handle_vector = atom_ptr.getOutgoingSet()             # <<<<<<<<<<<<<<
 *         return convert_handle_seq_to_python_list(handle_vector)
 * 
 */
  __pyx_v_handle_vector = __pyx_v_atom_ptr->getOutgoingSet();

  /* "../../../../opencog/cython/opencog/atom.pyx":94
 *             return None
 *         cdef vector[cHandle] handle_vector = atom_ptr.getOutgoingSet()
 *         return convert_handle_seq_to_python_list(handle_vector)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_7opencog_9atomspace_convert_handle_seq_to_python_list(__pyx_v_handle_vector); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":89
 *         return convert_handle_set_to_python_list(keys)
 * 
 *     def get_out(self):             # <<<<<<<<<<<<<<
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.Atom.get_out", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":97
 * 
 *     @property
 *     def out(self):             # <<<<<<<<<<<<<<
 *         if self._outgoing is None:
 *             atom_ptr = self.handle.atom_ptr()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_3out_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_3out_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_3out___get__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_3out___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  opencog::Atom *__pyx_v_atom_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":98
 *     @property
 *     def out(self):
 *         if self._outgoing is None:             # <<<<<<<<<<<<<<
 *             atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 */
  __pyx_t_1 = (__pyx_v_self->_outgoing == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../../opencog/cython/opencog/atom.pyx":99
 *     def out(self):
 *         if self._outgoing is None:
 *             atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None
 */
    __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

    /* "../../../../opencog/cython/opencog/atom.pyx":100
 *         if self._outgoing is None:
 *             atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return None
 *             if atom_ptr.is_link():
 */
    __pyx_t_2 = ((__pyx_v_atom_ptr == NULL) != 0);
    if (__pyx_t_2) {

      /* "../../../../opencog/cython/opencog/atom.pyx":101
 *             atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None             # <<<<<<<<<<<<<<
 *             if atom_ptr.is_link():
 *                 self._outgoing = self.get_out()
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      goto __pyx_L0;

      /* "../../../../opencog/cython/opencog/atom.pyx":100
 *         if self._outgoing is None:
 *             atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *                 return None
 *             if atom_ptr.is_link():
 */
    }

    /* "../../../../opencog/cython/opencog/atom.pyx":102
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None
 *             if atom_ptr.is_link():             # <<<<<<<<<<<<<<
 *                 self._outgoing = self.get_out()
 *             else:
 */
    __pyx_t_2 = (__pyx_v_atom_ptr->is_link() != 0);
    if (__pyx_t_2) {

      /* "../../../../opencog/cython/opencog/atom.pyx":103
 *                 return None
 *             if atom_ptr.is_link():
 *                 self._outgoing = self.get_out()             # <<<<<<<<<<<<<<
 *             else:
 *                 self._outgoing = []
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_out); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 103, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 103, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_v_self->_outgoing);
      __Pyx_DECREF(__pyx_v_self->_outgoing);
      __pyx_v_self->_outgoing = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "../../../../opencog/cython/opencog/atom.pyx":102
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 *                 return None
 *             if atom_ptr.is_link():             # <<<<<<<<<<<<<<
 *                 self._outgoing = self.get_out()
 *             else:
 */
      goto __pyx_L5;
    }

    /* "../../../../opencog/cython/opencog/atom.pyx":105
 *                 self._outgoing = self.get_out()
 *             else:
 *                 self._outgoing = []             # <<<<<<<<<<<<<<
 *         return self._outgoing
 * 
 */
    /*else*/ {
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 105, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_v_self->_outgoing);
      __Pyx_DECREF(__pyx_v_self->_outgoing);
      __pyx_v_self->_outgoing = __pyx_t_3;
      __pyx_t_3 = 0;
    }
    __pyx_L5:;

    /* "../../../../opencog/cython/opencog/atom.pyx":98
 *     @property
 *     def out(self):
 *         if self._outgoing is None:             # <<<<<<<<<<<<<<
 *             atom_ptr = self.handle.atom_ptr()
 *             if atom_ptr == NULL:   # avoid null-pointer deref
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":106
 *             else:
 *                 self._outgoing = []
 *         return self._outgoing             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_outgoing);
  __pyx_r = __pyx_v_self->_outgoing;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":97
 * 
 *     @property
 *     def out(self):             # <<<<<<<<<<<<<<
 *         if self._outgoing is None:
 *             atom_ptr = self.handle.atom_ptr()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opencog.atomspace.Atom.out.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":109
 * 
 *     @property
 *     def arity(self):             # <<<<<<<<<<<<<<
 *         return len(self.out)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_5arity_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_5arity_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_5arity___get__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_5arity___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":110
 *     @property
 *     def arity(self):
 *         return len(self.out)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_out); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":109
 * 
 *     @property
 *     def arity(self):             # <<<<<<<<<<<<<<
 *         return len(self.out)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.Atom.arity.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":113
 * 
 *     @property
 *     def incoming(self):             # <<<<<<<<<<<<<<
 *         cdef vector[cHandle] handle_vector
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_8incoming_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_8incoming_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_8incoming___get__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_8incoming___get__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  std::vector<opencog::Handle>  __pyx_v_handle_vector;
  opencog::Atom *__pyx_v_atom_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":115
 *     def incoming(self):
 *         cdef vector[cHandle] handle_vector
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return None
 */
  __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

  /* "../../../../opencog/cython/opencog/atom.pyx":116
 *         cdef vector[cHandle] handle_vector
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *             return None
 *         atom_ptr.getIncomingIter(back_inserter(handle_vector))
 */
  __pyx_t_1 = ((__pyx_v_atom_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":117
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return None             # <<<<<<<<<<<<<<
 *         atom_ptr.getIncomingIter(back_inserter(handle_vector))
 *         return convert_handle_seq_to_python_list(handle_vector)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":116
 *         cdef vector[cHandle] handle_vector
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *             return None
 *         atom_ptr.getIncomingIter(back_inserter(handle_vector))
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":118
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return None
 *         atom_ptr.getIncomingIter(back_inserter(handle_vector))             # <<<<<<<<<<<<<<
 *         return convert_handle_seq_to_python_list(handle_vector)
 * 
 */
  (void)(__pyx_v_atom_ptr->getIncomingIter(std::back_inserter(__pyx_v_handle_vector)));

  /* "../../../../opencog/cython/opencog/atom.pyx":119
 *             return None
 *         atom_ptr.getIncomingIter(back_inserter(handle_vector))
 *         return convert_handle_seq_to_python_list(handle_vector)             # <<<<<<<<<<<<<<
 * 
 *     def incoming_by_type(self, Type type):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_7opencog_9atomspace_convert_handle_seq_to_python_list(__pyx_v_handle_vector); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":113
 * 
 *     @property
 *     def incoming(self):             # <<<<<<<<<<<<<<
 *         cdef vector[cHandle] handle_vector
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.Atom.incoming.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":121
 *         return convert_handle_seq_to_python_list(handle_vector)
 * 
 *     def incoming_by_type(self, Type type):             # <<<<<<<<<<<<<<
 *         cdef vector[cHandle] handle_vector
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_13incoming_by_type(PyObject *__pyx_v_self, PyObject *__pyx_arg_type); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_13incoming_by_type(PyObject *__pyx_v_self, PyObject *__pyx_arg_type) {
  __pyx_t_7opencog_9atomspace_Type __pyx_v_type;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("incoming_by_type (wrapper)", 0);
  assert(__pyx_arg_type); {
    __pyx_v_type = __Pyx_PyInt_As_short(__pyx_arg_type); if (unlikely((__pyx_v_type == (short)-1) && PyErr_Occurred())) __PYX_ERR(3, 121, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.Atom.incoming_by_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_12incoming_by_type(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self), ((__pyx_t_7opencog_9atomspace_Type)__pyx_v_type));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_12incoming_by_type(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_type) {
  std::vector<opencog::Handle>  __pyx_v_handle_vector;
  opencog::Atom *__pyx_v_atom_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("incoming_by_type", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":123
 *     def incoming_by_type(self, Type type):
 *         cdef vector[cHandle] handle_vector
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()             # <<<<<<<<<<<<<<
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return None
 */
  __pyx_v_atom_ptr = __pyx_v_self->handle->atom_ptr();

  /* "../../../../opencog/cython/opencog/atom.pyx":124
 *         cdef vector[cHandle] handle_vector
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *             return None
 *         atom_ptr.getIncomingSetByType(back_inserter(handle_vector), type)
 */
  __pyx_t_1 = ((__pyx_v_atom_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":125
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return None             # <<<<<<<<<<<<<<
 *         atom_ptr.getIncomingSetByType(back_inserter(handle_vector), type)
 *         return convert_handle_seq_to_python_list(handle_vector)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":124
 *         cdef vector[cHandle] handle_vector
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref             # <<<<<<<<<<<<<<
 *             return None
 *         atom_ptr.getIncomingSetByType(back_inserter(handle_vector), type)
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":126
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 *             return None
 *         atom_ptr.getIncomingSetByType(back_inserter(handle_vector), type)             # <<<<<<<<<<<<<<
 *         return convert_handle_seq_to_python_list(handle_vector)
 * 
 */
  (void)(__pyx_v_atom_ptr->getIncomingSetByType(std::back_inserter(__pyx_v_handle_vector), __pyx_v_type));

  /* "../../../../opencog/cython/opencog/atom.pyx":127
 *             return None
 *         atom_ptr.getIncomingSetByType(back_inserter(handle_vector), type)
 *         return convert_handle_seq_to_python_list(handle_vector)             # <<<<<<<<<<<<<<
 * 
 *     def truth_value(self, mean, count):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_7opencog_9atomspace_convert_handle_seq_to_python_list(__pyx_v_handle_vector); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":121
 *         return convert_handle_seq_to_python_list(handle_vector)
 * 
 *     def incoming_by_type(self, Type type):             # <<<<<<<<<<<<<<
 *         cdef vector[cHandle] handle_vector
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.Atom.incoming_by_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":129
 *         return convert_handle_seq_to_python_list(handle_vector)
 * 
 *     def truth_value(self, mean, count):             # <<<<<<<<<<<<<<
 *         self.tv = createTruthValue(mean, count)
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_15truth_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_15truth_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_mean = 0;
  PyObject *__pyx_v_count = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("truth_value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mean,&__pyx_n_s_count,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mean)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_count)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("truth_value", 1, 2, 2, 1); __PYX_ERR(3, 129, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "truth_value") < 0)) __PYX_ERR(3, 129, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_mean = values[0];
    __pyx_v_count = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("truth_value", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 129, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.Atom.truth_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_14truth_value(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self), __pyx_v_mean, __pyx_v_count);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_14truth_value(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_mean, PyObject *__pyx_v_count) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("truth_value", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":130
 * 
 *     def truth_value(self, mean, count):
 *         self.tv = createTruthValue(mean, count)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_createTruthValue); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_mean, __pyx_v_count};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 130, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_mean, __pyx_v_count};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 130, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_mean);
    __Pyx_GIVEREF(__pyx_v_mean);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_mean);
    __Pyx_INCREF(__pyx_v_count);
    __Pyx_GIVEREF(__pyx_v_count);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_count);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_tv, __pyx_t_1) < 0) __PYX_ERR(3, 130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/atom.pyx":131
 *     def truth_value(self, mean, count):
 *         self.tv = createTruthValue(mean, count)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(self, other, int op):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":129
 *         return convert_handle_seq_to_python_list(handle_vector)
 * 
 *     def truth_value(self, mean, count):             # <<<<<<<<<<<<<<
 *         self.tv = createTruthValue(mean, count)
 *         return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opencog.atomspace.Atom.truth_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":133
 *         return self
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         assert isinstance(other, Atom), "Only Atom instances are comparable with atoms"
 *         if op == Py_LT:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_17__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_17__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_16__richcmp__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_16__richcmp__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":134
 * 
 *     def __richcmp__(self, other, int op):
 *         assert isinstance(other, Atom), "Only Atom instances are comparable with atoms"             # <<<<<<<<<<<<<<
 *         if op == Py_LT:
 *             return self.__lt(other)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_7opencog_9atomspace_Atom); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_Only_Atom_instances_are_comparab);
      __PYX_ERR(3, 134, __pyx_L1_error)
    }
  }
  #endif

  /* "../../../../opencog/cython/opencog/atom.pyx":135
 *     def __richcmp__(self, other, int op):
 *         assert isinstance(other, Atom), "Only Atom instances are comparable with atoms"
 *         if op == Py_LT:             # <<<<<<<<<<<<<<
 *             return self.__lt(other)
 *         if op == Py_EQ:
 */
  __pyx_t_1 = ((__pyx_v_op == Py_LT) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":136
 *         assert isinstance(other, Atom), "Only Atom instances are comparable with atoms"
 *         if op == Py_LT:
 *             return self.__lt(other)             # <<<<<<<<<<<<<<
 *         if op == Py_EQ:
 *             return self.__eq(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_lt); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_other) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_other);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":135
 *     def __richcmp__(self, other, int op):
 *         assert isinstance(other, Atom), "Only Atom instances are comparable with atoms"
 *         if op == Py_LT:             # <<<<<<<<<<<<<<
 *             return self.__lt(other)
 *         if op == Py_EQ:
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":137
 *         if op == Py_LT:
 *             return self.__lt(other)
 *         if op == Py_EQ:             # <<<<<<<<<<<<<<
 *             return self.__eq(other)
 *         if op == Py_GT:
 */
  __pyx_t_1 = ((__pyx_v_op == Py_EQ) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":138
 *             return self.__lt(other)
 *         if op == Py_EQ:
 *             return self.__eq(other)             # <<<<<<<<<<<<<<
 *         if op == Py_GT:
 *             return other.__lt(self)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_eq); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_other) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_other);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":137
 *         if op == Py_LT:
 *             return self.__lt(other)
 *         if op == Py_EQ:             # <<<<<<<<<<<<<<
 *             return self.__eq(other)
 *         if op == Py_GT:
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":139
 *         if op == Py_EQ:
 *             return self.__eq(other)
 *         if op == Py_GT:             # <<<<<<<<<<<<<<
 *             return other.__lt(self)
 *         if op == Py_LE:
 */
  __pyx_t_1 = ((__pyx_v_op == Py_GT) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":140
 *             return self.__eq(other)
 *         if op == Py_GT:
 *             return other.__lt(self)             # <<<<<<<<<<<<<<
 *         if op == Py_LE:
 *             return not other.__lt(self)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_lt); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_self)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_self));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":139
 *         if op == Py_EQ:
 *             return self.__eq(other)
 *         if op == Py_GT:             # <<<<<<<<<<<<<<
 *             return other.__lt(self)
 *         if op == Py_LE:
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":141
 *         if op == Py_GT:
 *             return other.__lt(self)
 *         if op == Py_LE:             # <<<<<<<<<<<<<<
 *             return not other.__lt(self)
 *         if op == Py_NE:
 */
  __pyx_t_1 = ((__pyx_v_op == Py_LE) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":142
 *             return other.__lt(self)
 *         if op == Py_LE:
 *             return not other.__lt(self)             # <<<<<<<<<<<<<<
 *         if op == Py_NE:
 *             return not self.__eq(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_lt); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_self)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_self));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 142, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyBool_FromLong((!__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":141
 *         if op == Py_GT:
 *             return other.__lt(self)
 *         if op == Py_LE:             # <<<<<<<<<<<<<<
 *             return not other.__lt(self)
 *         if op == Py_NE:
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":143
 *         if op == Py_LE:
 *             return not other.__lt(self)
 *         if op == Py_NE:             # <<<<<<<<<<<<<<
 *             return not self.__eq(other)
 *         if op == Py_GE:
 */
  __pyx_t_1 = ((__pyx_v_op == Py_NE) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":144
 *             return not other.__lt(self)
 *         if op == Py_NE:
 *             return not self.__eq(other)             # <<<<<<<<<<<<<<
 *         if op == Py_GE:
 *             return not self.__lt(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_eq); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_other) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_other);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 144, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyBool_FromLong((!__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":143
 *         if op == Py_LE:
 *             return not other.__lt(self)
 *         if op == Py_NE:             # <<<<<<<<<<<<<<
 *             return not self.__eq(other)
 *         if op == Py_GE:
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":145
 *         if op == Py_NE:
 *             return not self.__eq(other)
 *         if op == Py_GE:             # <<<<<<<<<<<<<<
 *             return not self.__lt(other)
 *         raise RuntimeError("unexpected comparison kind: {0}".format(op))
 */
  __pyx_t_1 = ((__pyx_v_op == Py_GE) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/atom.pyx":146
 *             return not self.__eq(other)
 *         if op == Py_GE:
 *             return not self.__lt(other)             # <<<<<<<<<<<<<<
 *         raise RuntimeError("unexpected comparison kind: {0}".format(op))
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_lt); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_other) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_other);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyBool_FromLong((!__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":145
 *         if op == Py_NE:
 *             return not self.__eq(other)
 *         if op == Py_GE:             # <<<<<<<<<<<<<<
 *             return not self.__lt(other)
 *         raise RuntimeError("unexpected comparison kind: {0}".format(op))
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":147
 *         if op == Py_GE:
 *             return not self.__lt(other)
 *         raise RuntimeError("unexpected comparison kind: {0}".format(op))             # <<<<<<<<<<<<<<
 * 
 *     def __lt(self, other):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_unexpected_comparison_kind_0, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_op); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(3, 147, __pyx_L1_error)

  /* "../../../../opencog/cython/opencog/atom.pyx":133
 *         return self
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         assert isinstance(other, Atom), "Only Atom instances are comparable with atoms"
 *         if op == Py_LT:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opencog.atomspace.Atom.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":149
 *         raise RuntimeError("unexpected comparison kind: {0}".format(op))
 * 
 *     def __lt(self, other):             # <<<<<<<<<<<<<<
 *         assert isinstance(other, Atom), "Only Atom instances are comparable with atoms"
 *         cdef cAtom* p = self.get_c_handle().get()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_19__lt(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_19__lt(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__lt (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_18__lt(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_18__lt(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_other) {
  opencog::Atom *__pyx_v_p;
  opencog::Atom *__pyx_v_o;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__lt", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":150
 * 
 *     def __lt(self, other):
 *         assert isinstance(other, Atom), "Only Atom instances are comparable with atoms"             # <<<<<<<<<<<<<<
 *         cdef cAtom* p = self.get_c_handle().get()
 *         cdef cAtom* o = ((<Atom>other).get_c_handle()).get()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_7opencog_9atomspace_Atom); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_Only_Atom_instances_are_comparab);
      __PYX_ERR(3, 150, __pyx_L1_error)
    }
  }
  #endif

  /* "../../../../opencog/cython/opencog/atom.pyx":151
 *     def __lt(self, other):
 *         assert isinstance(other, Atom), "Only Atom instances are comparable with atoms"
 *         cdef cAtom* p = self.get_c_handle().get()             # <<<<<<<<<<<<<<
 *         cdef cAtom* o = ((<Atom>other).get_c_handle()).get()
 *         return deref(p) < deref(o)
 */
  __pyx_v_p = ((struct __pyx_vtabstruct_7opencog_9atomspace_Atom *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_c_handle(__pyx_v_self).get();

  /* "../../../../opencog/cython/opencog/atom.pyx":152
 *         assert isinstance(other, Atom), "Only Atom instances are comparable with atoms"
 *         cdef cAtom* p = self.get_c_handle().get()
 *         cdef cAtom* o = ((<Atom>other).get_c_handle()).get()             # <<<<<<<<<<<<<<
 *         return deref(p) < deref(o)
 * 
 */
  __pyx_v_o = ((struct __pyx_vtabstruct_7opencog_9atomspace_Atom *)((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_other)->__pyx_base.__pyx_vtab)->get_c_handle(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_other)).get();

  /* "../../../../opencog/cython/opencog/atom.pyx":153
 *         cdef cAtom* p = self.get_c_handle().get()
 *         cdef cAtom* o = ((<Atom>other).get_c_handle()).get()
 *         return deref(p) < deref(o)             # <<<<<<<<<<<<<<
 * 
 *     def __eq(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(((*__pyx_v_p) < (*__pyx_v_o))); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":149
 *         raise RuntimeError("unexpected comparison kind: {0}".format(op))
 * 
 *     def __lt(self, other):             # <<<<<<<<<<<<<<
 *         assert isinstance(other, Atom), "Only Atom instances are comparable with atoms"
 *         cdef cAtom* p = self.get_c_handle().get()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.Atom.__lt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":155
 *         return deref(p) < deref(o)
 * 
 *     def __eq(self, other):             # <<<<<<<<<<<<<<
 *         if not isinstance(other, Atom):
 *             return False
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_21__eq(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_21__eq(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_20__eq(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_20__eq(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, PyObject *__pyx_v_other) {
  opencog::Atom *__pyx_v_p;
  opencog::Atom *__pyx_v_o;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":156
 * 
 *     def __eq(self, other):
 *         if not isinstance(other, Atom):             # <<<<<<<<<<<<<<
 *             return False
 *         cdef cAtom* p = self.get_c_handle().get()
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_7opencog_9atomspace_Atom); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "../../../../opencog/cython/opencog/atom.pyx":157
 *     def __eq(self, other):
 *         if not isinstance(other, Atom):
 *             return False             # <<<<<<<<<<<<<<
 *         cdef cAtom* p = self.get_c_handle().get()
 *         cdef cAtom* o = (<Atom>other).get_c_handle().get()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/atom.pyx":156
 * 
 *     def __eq(self, other):
 *         if not isinstance(other, Atom):             # <<<<<<<<<<<<<<
 *             return False
 *         cdef cAtom* p = self.get_c_handle().get()
 */
  }

  /* "../../../../opencog/cython/opencog/atom.pyx":158
 *         if not isinstance(other, Atom):
 *             return False
 *         cdef cAtom* p = self.get_c_handle().get()             # <<<<<<<<<<<<<<
 *         cdef cAtom* o = (<Atom>other).get_c_handle().get()
 *         return deref(p) == deref(o)
 */
  __pyx_v_p = ((struct __pyx_vtabstruct_7opencog_9atomspace_Atom *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_c_handle(__pyx_v_self).get();

  /* "../../../../opencog/cython/opencog/atom.pyx":159
 *             return False
 *         cdef cAtom* p = self.get_c_handle().get()
 *         cdef cAtom* o = (<Atom>other).get_c_handle().get()             # <<<<<<<<<<<<<<
 *         return deref(p) == deref(o)
 * 
 */
  __pyx_v_o = ((struct __pyx_vtabstruct_7opencog_9atomspace_Atom *)((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_other)->__pyx_base.__pyx_vtab)->get_c_handle(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_other)).get();

  /* "../../../../opencog/cython/opencog/atom.pyx":160
 *         cdef cAtom* p = self.get_c_handle().get()
 *         cdef cAtom* o = (<Atom>other).get_c_handle().get()
 *         return deref(p) == deref(o)             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBool_FromLong(((*__pyx_v_p) == (*__pyx_v_o))); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":155
 *         return deref(p) < deref(o)
 * 
 *     def __eq(self, other):             # <<<<<<<<<<<<<<
 *         if not isinstance(other, Atom):
 *             return False
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.Atom.__eq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/atom.pyx":162
 *         return deref(p) == deref(o)
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return PyLong_FromLongLong(self.get_c_handle().get().get_hash())
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_7opencog_9atomspace_4Atom_23__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_7opencog_9atomspace_4Atom_23__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_22__hash__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_7opencog_9atomspace_4Atom_22__hash__(struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_hash_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "../../../../opencog/cython/opencog/atom.pyx":163
 * 
 *     def __hash__(self):
 *         return PyLong_FromLongLong(self.get_c_handle().get().get_hash())             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = PyLong_FromLongLong(((struct __pyx_vtabstruct_7opencog_9atomspace_Atom *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_c_handle(__pyx_v_self).get()->get_hash()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_AsHash_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 163, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/atom.pyx":162
 *         return deref(p) == deref(o)
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return PyLong_FromLongLong(self.get_c_handle().get().get_hash())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.Atom.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_24__reduce_cython__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.Atom.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_4Atom_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_4Atom_26__setstate_cython__(((struct __pyx_obj_7opencog_9atomspace_Atom *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_4Atom_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7opencog_9atomspace_Atom *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.Atom.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/nameserver.pyx":13
 * 
 * # Given a numeric type, look up the string name.
 * cdef c_get_type_name(Type t):             # <<<<<<<<<<<<<<
 *     # cdef cNameServer ns
 *     # ns = nameserver()
 */

static PyObject *__pyx_f_7opencog_9atomspace_c_get_type_name(__pyx_t_7opencog_9atomspace_Type __pyx_v_t) {
  std::string __pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_get_type_name", 0);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":17
 *     # ns = nameserver()
 *     cdef string s
 *     s = nameserver().getTypeName(t)             # <<<<<<<<<<<<<<
 * 
 *     if 0 == strcmp(s.c_str(), "*** Unknown Type! ***") :
 */
  __pyx_v_s = opencog::nameserver().getTypeName(__pyx_v_t);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":19
 *     s = nameserver().getTypeName(t)
 * 
 *     if 0 == strcmp(s.c_str(), "*** Unknown Type! ***") :             # <<<<<<<<<<<<<<
 *         s = string(b"")
 *     return s.c_str()
 */
  __pyx_t_1 = ((0 == strcmp(__pyx_v_s.c_str(), ((char const *)"*** Unknown Type! ***"))) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/nameserver.pyx":20
 * 
 *     if 0 == strcmp(s.c_str(), "*** Unknown Type! ***") :
 *         s = string(b"")             # <<<<<<<<<<<<<<
 *     return s.c_str()
 * 
 */
    try {
      __pyx_t_2 = std::string(((char const *)""));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(4, 20, __pyx_L1_error)
    }
    __pyx_v_s = __pyx_t_2;

    /* "../../../../opencog/cython/opencog/nameserver.pyx":19
 *     s = nameserver().getTypeName(t)
 * 
 *     if 0 == strcmp(s.c_str(), "*** Unknown Type! ***") :             # <<<<<<<<<<<<<<
 *         s = string(b"")
 *     return s.c_str()
 */
  }

  /* "../../../../opencog/cython/opencog/nameserver.pyx":21
 *     if 0 == strcmp(s.c_str(), "*** Unknown Type! ***") :
 *         s = string(b"")
 *     return s.c_str()             # <<<<<<<<<<<<<<
 * 
 * # Given the string name, look up the numeric type.
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_s.c_str()); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":13
 * 
 * # Given a numeric type, look up the string name.
 * cdef c_get_type_name(Type t):             # <<<<<<<<<<<<<<
 *     # cdef cNameServer ns
 *     # ns = nameserver()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.c_get_type_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/nameserver.pyx":24
 * 
 * # Given the string name, look up the numeric type.
 * cdef c_get_named_type(str type_name):             # <<<<<<<<<<<<<<
 *     return nameserver().getType(type_name.encode('UTF-8'))
 * 
 */

static PyObject *__pyx_f_7opencog_9atomspace_c_get_named_type(PyObject *__pyx_v_type_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_get_named_type", 0);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":25
 * # Given the string name, look up the numeric type.
 * cdef c_get_named_type(str type_name):
 *     return nameserver().getType(type_name.encode('UTF-8'))             # <<<<<<<<<<<<<<
 * 
 * # Atom type methods.
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_type_name == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(4, 25, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_type_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_short(opencog::nameserver().getType(__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":24
 * 
 * # Given the string name, look up the numeric type.
 * cdef c_get_named_type(str type_name):             # <<<<<<<<<<<<<<
 *     return nameserver().getType(type_name.encode('UTF-8'))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.c_get_named_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/nameserver.pyx":28
 * 
 * # Atom type methods.
 * def get_type_name(t):             # <<<<<<<<<<<<<<
 *     return c_get_type_name(t).decode('UTF-8')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9get_type_name(PyObject *__pyx_self, PyObject *__pyx_v_t); /*proto*/
static PyMethodDef __pyx_mdef_7opencog_9atomspace_9get_type_name = {"get_type_name", (PyCFunction)__pyx_pw_7opencog_9atomspace_9get_type_name, METH_O, 0};
static PyObject *__pyx_pw_7opencog_9atomspace_9get_type_name(PyObject *__pyx_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_type_name (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_8get_type_name(__pyx_self, ((PyObject *)__pyx_v_t));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_8get_type_name(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_7opencog_9atomspace_Type __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_type_name", 0);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":29
 * # Atom type methods.
 * def get_type_name(t):
 *     return c_get_type_name(t).decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * def get_type(name):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_As_short(__pyx_v_t); if (unlikely((__pyx_t_2 == (short)-1) && PyErr_Occurred())) __PYX_ERR(4, 29, __pyx_L1_error)
  __pyx_t_3 = __pyx_f_7opencog_9atomspace_c_get_type_name(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_decode); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_kp_u_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_UTF_8);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":28
 * 
 * # Atom type methods.
 * def get_type_name(t):             # <<<<<<<<<<<<<<
 *     return c_get_type_name(t).decode('UTF-8')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("opencog.atomspace.get_type_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/nameserver.pyx":31
 *     return c_get_type_name(t).decode('UTF-8')
 * 
 * def get_type(name):             # <<<<<<<<<<<<<<
 *     return c_get_named_type(name)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_11get_type(PyObject *__pyx_self, PyObject *__pyx_v_name); /*proto*/
static PyMethodDef __pyx_mdef_7opencog_9atomspace_11get_type = {"get_type", (PyCFunction)__pyx_pw_7opencog_9atomspace_11get_type, METH_O, 0};
static PyObject *__pyx_pw_7opencog_9atomspace_11get_type(PyObject *__pyx_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_type (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_10get_type(__pyx_self, ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_10get_type(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_type", 0);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":32
 * 
 * def get_type(name):
 *     return c_get_named_type(name)             # <<<<<<<<<<<<<<
 * 
 * def is_a(Type t1, Type t2):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyUnicode_CheckExact(__pyx_v_name))||((__pyx_v_name) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_name)->tp_name), 0))) __PYX_ERR(4, 32, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_7opencog_9atomspace_c_get_named_type(((PyObject*)__pyx_v_name)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":31
 *     return c_get_type_name(t).decode('UTF-8')
 * 
 * def get_type(name):             # <<<<<<<<<<<<<<
 *     return c_get_named_type(name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.get_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/nameserver.pyx":34
 *     return c_get_named_type(name)
 * 
 * def is_a(Type t1, Type t2):             # <<<<<<<<<<<<<<
 *     return nameserver().isA(t1,t2)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_13is_a(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7opencog_9atomspace_13is_a = {"is_a", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7opencog_9atomspace_13is_a, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7opencog_9atomspace_13is_a(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_7opencog_9atomspace_Type __pyx_v_t1;
  __pyx_t_7opencog_9atomspace_Type __pyx_v_t2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_a (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t1,&__pyx_n_s_t2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("is_a", 1, 2, 2, 1); __PYX_ERR(4, 34, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_a") < 0)) __PYX_ERR(4, 34, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_t1 = __Pyx_PyInt_As_short(values[0]); if (unlikely((__pyx_v_t1 == (short)-1) && PyErr_Occurred())) __PYX_ERR(4, 34, __pyx_L3_error)
    __pyx_v_t2 = __Pyx_PyInt_As_short(values[1]); if (unlikely((__pyx_v_t2 == (short)-1) && PyErr_Occurred())) __PYX_ERR(4, 34, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_a", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 34, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.is_a", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_12is_a(__pyx_self, __pyx_v_t1, __pyx_v_t2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_12is_a(CYTHON_UNUSED PyObject *__pyx_self, __pyx_t_7opencog_9atomspace_Type __pyx_v_t1, __pyx_t_7opencog_9atomspace_Type __pyx_v_t2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_a", 0);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":35
 * 
 * def is_a(Type t1, Type t2):
 *     return nameserver().isA(t1,t2)             # <<<<<<<<<<<<<<
 * 
 * # From Roger's suggestion:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(opencog::nameserver().isA(__pyx_v_t1, __pyx_v_t2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":34
 *     return c_get_named_type(name)
 * 
 * def is_a(Type t1, Type t2):             # <<<<<<<<<<<<<<
 *     return nameserver().isA(t1,t2)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.is_a", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/nameserver.pyx":46
 * 
 * types = {}
 * cdef generate_type_module():             # <<<<<<<<<<<<<<
 *     global types
 *     types = {}
 */

static PyObject *__pyx_f_7opencog_9atomspace_generate_type_module(void) {
  std::string __pyx_v_s;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_7opencog_9atomspace_Type __pyx_t_2;
  __pyx_t_7opencog_9atomspace_Type __pyx_t_3;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generate_type_module", 0);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":48
 * cdef generate_type_module():
 *     global types
 *     types = {}             # <<<<<<<<<<<<<<
 *     cdef string s
 *     # print "Class server has num types=", nameserver().getNumberOfClasses()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_types, __pyx_t_1) < 0) __PYX_ERR(4, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":51
 *     cdef string s
 *     # print "Class server has num types=", nameserver().getNumberOfClasses()
 *     for i in range(0, nameserver().getNumberOfClasses()):             # <<<<<<<<<<<<<<
 *         s = nameserver().getTypeName(i)
 *         assert s.size() > 0, "Got blank type name while generating types module"
 */
  __pyx_t_2 = opencog::nameserver().getNumberOfClasses();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "../../../../opencog/cython/opencog/nameserver.pyx":52
 *     # print "Class server has num types=", nameserver().getNumberOfClasses()
 *     for i in range(0, nameserver().getNumberOfClasses()):
 *         s = nameserver().getTypeName(i)             # <<<<<<<<<<<<<<
 *         assert s.size() > 0, "Got blank type name while generating types module"
 *         types[string(s.c_str()).decode('UTF-8')] = i
 */
    __pyx_v_s = opencog::nameserver().getTypeName(__pyx_v_i);

    /* "../../../../opencog/cython/opencog/nameserver.pyx":53
 *     for i in range(0, nameserver().getNumberOfClasses()):
 *         s = nameserver().getTypeName(i)
 *         assert s.size() > 0, "Got blank type name while generating types module"             # <<<<<<<<<<<<<<
 *         types[string(s.c_str()).decode('UTF-8')] = i
 *         # print "type ", i, " has name ", s
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!((__pyx_v_s.size() > 0) != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_Got_blank_type_name_while_genera);
        __PYX_ERR(4, 53, __pyx_L1_error)
      }
    }
    #endif

    /* "../../../../opencog/cython/opencog/nameserver.pyx":54
 *         s = nameserver().getTypeName(i)
 *         assert s.size() > 0, "Got blank type name while generating types module"
 *         types[string(s.c_str()).decode('UTF-8')] = i             # <<<<<<<<<<<<<<
 *         # print "type ", i, " has name ", s
 *     types["NO_TYPE"] = NOTYPE
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_types); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    try {
      __pyx_t_6 = std::string(__pyx_v_s.c_str());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(4, 54, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_decode_cpp_string(__pyx_t_6, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (unlikely(PyObject_SetItem(__pyx_t_5, __pyx_t_7, __pyx_t_1) < 0)) __PYX_ERR(4, 54, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "../../../../opencog/cython/opencog/nameserver.pyx":56
 *         types[string(s.c_str()).decode('UTF-8')] = i
 *         # print "type ", i, " has name ", s
 *     types["NO_TYPE"] = NOTYPE             # <<<<<<<<<<<<<<
 *     return types
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_short(opencog::NOTYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_types); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (unlikely(PyObject_SetItem(__pyx_t_7, __pyx_n_u_NO_TYPE, __pyx_t_1) < 0)) __PYX_ERR(4, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":57
 *         # print "type ", i, " has name ", s
 *     types["NO_TYPE"] = NOTYPE
 *     return types             # <<<<<<<<<<<<<<
 * 
 * types = type('atom_types', (), generate_type_module())
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":46
 * 
 * types = {}
 * cdef generate_type_module():             # <<<<<<<<<<<<<<
 *     global types
 *     types = {}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("opencog.atomspace.generate_type_module", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/nameserver.pyx":61
 * types = type('atom_types', (), generate_type_module())
 * 
 * def begin_type_decls(module):             # <<<<<<<<<<<<<<
 *     return nameserver().beginTypeDecls(module.encode('UTF-8'))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_15begin_type_decls(PyObject *__pyx_self, PyObject *__pyx_v_module); /*proto*/
static PyMethodDef __pyx_mdef_7opencog_9atomspace_15begin_type_decls = {"begin_type_decls", (PyCFunction)__pyx_pw_7opencog_9atomspace_15begin_type_decls, METH_O, 0};
static PyObject *__pyx_pw_7opencog_9atomspace_15begin_type_decls(PyObject *__pyx_self, PyObject *__pyx_v_module) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_type_decls (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_14begin_type_decls(__pyx_self, ((PyObject *)__pyx_v_module));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_14begin_type_decls(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_module) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_type_decls", 0);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":62
 * 
 * def begin_type_decls(module):
 *     return nameserver().beginTypeDecls(module.encode('UTF-8'))             # <<<<<<<<<<<<<<
 * 
 * def end_type_decls():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_module, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_UTF_8);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(4, 62, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(opencog::nameserver().beginTypeDecls(__pyx_t_4)); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":61
 * types = type('atom_types', (), generate_type_module())
 * 
 * def begin_type_decls(module):             # <<<<<<<<<<<<<<
 *     return nameserver().beginTypeDecls(module.encode('UTF-8'))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("opencog.atomspace.begin_type_decls", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/nameserver.pyx":64
 *     return nameserver().beginTypeDecls(module.encode('UTF-8'))
 * 
 * def end_type_decls():             # <<<<<<<<<<<<<<
 *     nameserver().endTypeDecls()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_17end_type_decls(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_7opencog_9atomspace_17end_type_decls = {"end_type_decls", (PyCFunction)__pyx_pw_7opencog_9atomspace_17end_type_decls, METH_NOARGS, 0};
static PyObject *__pyx_pw_7opencog_9atomspace_17end_type_decls(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_type_decls (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_16end_type_decls(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_16end_type_decls(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_type_decls", 0);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":65
 * 
 * def end_type_decls():
 *     nameserver().endTypeDecls()             # <<<<<<<<<<<<<<
 * 
 * @contextmanager
 */
  opencog::nameserver().endTypeDecls();

  /* "../../../../opencog/cython/opencog/nameserver.pyx":64
 *     return nameserver().beginTypeDecls(module.encode('UTF-8'))
 * 
 * def end_type_decls():             # <<<<<<<<<<<<<<
 *     nameserver().endTypeDecls()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_7opencog_9atomspace_20generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "../../../../opencog/cython/opencog/nameserver.pyx":68
 * 
 * @contextmanager
 * def type_decl_context(module):             # <<<<<<<<<<<<<<
 *     if begin_type_decls(module):
 *         raise RuntimeError('Cannot declare types for already loaded module: ' +
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_19type_decl_context(PyObject *__pyx_self, PyObject *__pyx_v_module); /*proto*/
static PyMethodDef __pyx_mdef_7opencog_9atomspace_19type_decl_context = {"type_decl_context", (PyCFunction)__pyx_pw_7opencog_9atomspace_19type_decl_context, METH_O, 0};
static PyObject *__pyx_pw_7opencog_9atomspace_19type_decl_context(PyObject *__pyx_self, PyObject *__pyx_v_module) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_decl_context (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_18type_decl_context(__pyx_self, ((PyObject *)__pyx_v_module));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_18type_decl_context(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_module) {
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__type_decl_context *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("type_decl_context", 0);
  __pyx_cur_scope = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__type_decl_context *)__pyx_tp_new_7opencog_9atomspace___pyx_scope_struct__type_decl_context(__pyx_ptype_7opencog_9atomspace___pyx_scope_struct__type_decl_context, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__type_decl_context *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(4, 68, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_module = __pyx_v_module;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_module);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_module);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_7opencog_9atomspace_20generator, __pyx_codeobj__15, (PyObject *) __pyx_cur_scope, __pyx_n_s_type_decl_context, __pyx_n_s_type_decl_context, __pyx_n_s_opencog_atomspace); if (unlikely(!gen)) __PYX_ERR(4, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("opencog.atomspace.type_decl_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_7opencog_9atomspace_20generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__type_decl_context *__pyx_cur_scope = ((struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__type_decl_context *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type_decl_context", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L8_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(4, 68, __pyx_L1_error)

  /* "../../../../opencog/cython/opencog/nameserver.pyx":69
 * @contextmanager
 * def type_decl_context(module):
 *     if begin_type_decls(module):             # <<<<<<<<<<<<<<
 *         raise RuntimeError('Cannot declare types for already loaded module: ' +
 *                 module)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_begin_type_decls); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_cur_scope->__pyx_v_module) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_cur_scope->__pyx_v_module);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(4, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "../../../../opencog/cython/opencog/nameserver.pyx":70
 * def type_decl_context(module):
 *     if begin_type_decls(module):
 *         raise RuntimeError('Cannot declare types for already loaded module: ' +             # <<<<<<<<<<<<<<
 *                 module)
 *     try:
 */
    __pyx_t_1 = PyNumber_Add(__pyx_kp_u_Cannot_declare_types_for_already, __pyx_cur_scope->__pyx_v_module); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(4, 70, __pyx_L1_error)

    /* "../../../../opencog/cython/opencog/nameserver.pyx":69
 * @contextmanager
 * def type_decl_context(module):
 *     if begin_type_decls(module):             # <<<<<<<<<<<<<<
 *         raise RuntimeError('Cannot declare types for already loaded module: ' +
 *                 module)
 */
  }

  /* "../../../../opencog/cython/opencog/nameserver.pyx":72
 *         raise RuntimeError('Cannot declare types for already loaded module: ' +
 *                 module)
 *     try:             # <<<<<<<<<<<<<<
 *         yield
 *     finally:
 */
  /*try:*/ {

    /* "../../../../opencog/cython/opencog/nameserver.pyx":73
 *                 module)
 *     try:
 *         yield             # <<<<<<<<<<<<<<
 *     finally:
 *         end_type_decls()
 */
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L8_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(4, 73, __pyx_L6_error)
  }

  /* "../../../../opencog/cython/opencog/nameserver.pyx":75
 *         yield
 *     finally:
 *         end_type_decls()             # <<<<<<<<<<<<<<
 * 
 * def decl_type(parent, name):
 */
  /*finally:*/ {
    /*normal exit:*/{
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_end_type_decls); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 75, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 75, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_assign
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __pyx_t_5 = __pyx_lineno; __pyx_t_6 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
      {
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_end_type_decls); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 75, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 75, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      }
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __pyx_lineno = __pyx_t_5; __pyx_clineno = __pyx_t_6; __pyx_filename = __pyx_t_7;
      goto __pyx_L1_error;
      __pyx_L10_error:;
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      }
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":68
 * 
 * @contextmanager
 * def type_decl_context(module):             # <<<<<<<<<<<<<<
 *     if begin_type_decls(module):
 *         raise RuntimeError('Cannot declare types for already loaded module: ' +
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("type_decl_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/nameserver.pyx":77
 *         end_type_decls()
 * 
 * def decl_type(parent, name):             # <<<<<<<<<<<<<<
 *     type_id = nameserver().declType(parent, name.encode('UTF-8'))
 *     setattr(types, name, type_id)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_22decl_type(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7opencog_9atomspace_22decl_type = {"decl_type", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7opencog_9atomspace_22decl_type, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7opencog_9atomspace_22decl_type(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_parent = 0;
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("decl_type (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parent,&__pyx_n_s_name,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parent)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("decl_type", 1, 2, 2, 1); __PYX_ERR(4, 77, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "decl_type") < 0)) __PYX_ERR(4, 77, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_parent = values[0];
    __pyx_v_name = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("decl_type", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 77, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.decl_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_21decl_type(__pyx_self, __pyx_v_parent, __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_21decl_type(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_parent, PyObject *__pyx_v_name) {
  __pyx_t_7opencog_9atomspace_Type __pyx_v_type_id;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_7opencog_9atomspace_Type __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("decl_type", 0);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":78
 * 
 * def decl_type(parent, name):
 *     type_id = nameserver().declType(parent, name.encode('UTF-8'))             # <<<<<<<<<<<<<<
 *     setattr(types, name, type_id)
 *     return type_id
 */
  __pyx_t_1 = __Pyx_PyInt_As_short(__pyx_v_parent); if (unlikely((__pyx_t_1 == (short)-1) && PyErr_Occurred())) __PYX_ERR(4, 78, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_kp_u_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_u_UTF_8);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(4, 78, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_type_id = opencog::nameserver().declType(__pyx_t_1, __pyx_t_5);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":79
 * def decl_type(parent, name):
 *     type_id = nameserver().declType(parent, name.encode('UTF-8'))
 *     setattr(types, name, type_id)             # <<<<<<<<<<<<<<
 *     return type_id
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_short(__pyx_v_type_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyObject_SetAttr(__pyx_t_2, __pyx_v_name, __pyx_t_3); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(4, 79, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":80
 *     type_id = nameserver().declType(parent, name.encode('UTF-8'))
 *     setattr(types, name, type_id)
 *     return type_id             # <<<<<<<<<<<<<<
 * 
 * # Update/refresh list of types. This needs to be called whenever
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_short(__pyx_v_type_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":77
 *         end_type_decls()
 * 
 * def decl_type(parent, name):             # <<<<<<<<<<<<<<
 *     type_id = nameserver().declType(parent, name.encode('UTF-8'))
 *     setattr(types, name, type_id)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("opencog.atomspace.decl_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/nameserver.pyx":85
 * # additional atom types were declared in other atomspace modules.
 * # i.e. when new types were added to the C++ nameserver.
 * def get_refreshed_types():             # <<<<<<<<<<<<<<
 *     global types
 *     types = type('atom_types', (), generate_type_module())
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_24get_refreshed_types(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_7opencog_9atomspace_24get_refreshed_types = {"get_refreshed_types", (PyCFunction)__pyx_pw_7opencog_9atomspace_24get_refreshed_types, METH_NOARGS, 0};
static PyObject *__pyx_pw_7opencog_9atomspace_24get_refreshed_types(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_refreshed_types (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_23get_refreshed_types(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_23get_refreshed_types(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_refreshed_types", 0);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":87
 * def get_refreshed_types():
 *     global types
 *     types = type('atom_types', (), generate_type_module())             # <<<<<<<<<<<<<<
 *     return types
 * 
 */
  __pyx_t_1 = __pyx_f_7opencog_9atomspace_generate_type_module(); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_u_atom_types);
  __Pyx_GIVEREF(__pyx_n_u_atom_types);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_atom_types);
  __Pyx_INCREF(__pyx_empty_tuple);
  __Pyx_GIVEREF(__pyx_empty_tuple);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_empty_tuple);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyType_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_types, __pyx_t_1) < 0) __PYX_ERR(4, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":88
 *     global types
 *     types = type('atom_types', (), generate_type_module())
 *     return types             # <<<<<<<<<<<<<<
 * 
 * cdef create_python_value_from_c_value(const cValuePtr& value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":85
 * # additional atom types were declared in other atomspace modules.
 * # i.e. when new types were added to the C++ nameserver.
 * def get_refreshed_types():             # <<<<<<<<<<<<<<
 *     global types
 *     types = type('atom_types', (), generate_type_module())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("opencog.atomspace.get_refreshed_types", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/nameserver.pyx":90
 *     return types
 * 
 * cdef create_python_value_from_c_value(const cValuePtr& value):             # <<<<<<<<<<<<<<
 *     if value.get() == NULL:
 *         return None
 */

static PyObject *__pyx_f_7opencog_9atomspace_create_python_value_from_c_value(opencog::ValuePtr const &__pyx_v_value) {
  __pyx_t_7opencog_9atomspace_Type __pyx_v_value_type;
  PyObject *__pyx_v_type_name = NULL;
  struct __pyx_obj_7opencog_9atomspace_PtrHolder *__pyx_v_ptr_holder = NULL;
  PyObject *__pyx_v_thismodule = NULL;
  PyObject *__pyx_v_clazz = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_python_value_from_c_value", 0);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":91
 * 
 * cdef create_python_value_from_c_value(const cValuePtr& value):
 *     if value.get() == NULL:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((__pyx_v_value.get() == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../opencog/cython/opencog/nameserver.pyx":92
 * cdef create_python_value_from_c_value(const cValuePtr& value):
 *     if value.get() == NULL:
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     value_type = value.get().get_type()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/nameserver.pyx":91
 * 
 * cdef create_python_value_from_c_value(const cValuePtr& value):
 *     if value.get() == NULL:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "../../../../opencog/cython/opencog/nameserver.pyx":94
 *         return None
 * 
 *     value_type = value.get().get_type()             # <<<<<<<<<<<<<<
 *     type_name = get_type_name(value_type)
 *     ptr_holder = PtrHolder.create(<shared_ptr[void]&>value)
 */
  __pyx_v_value_type = __pyx_v_value.get()->get_type();

  /* "../../../../opencog/cython/opencog/nameserver.pyx":95
 * 
 *     value_type = value.get().get_type()
 *     type_name = get_type_name(value_type)             # <<<<<<<<<<<<<<
 *     ptr_holder = PtrHolder.create(<shared_ptr[void]&>value)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_get_type_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_short(__pyx_v_value_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_type_name = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":96
 *     value_type = value.get().get_type()
 *     type_name = get_type_name(value_type)
 *     ptr_holder = PtrHolder.create(<shared_ptr[void]&>value)             # <<<<<<<<<<<<<<
 * 
 *     thismodule = sys.modules[__name__]
 */
  __pyx_t_2 = ((PyObject *)__pyx_f_7opencog_9atomspace_9PtrHolder_create(((std::shared_ptr<void>  &)__pyx_v_value))); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ptr_holder = ((struct __pyx_obj_7opencog_9atomspace_PtrHolder *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":98
 *     ptr_holder = PtrHolder.create(<shared_ptr[void]&>value)
 * 
 *     thismodule = sys.modules[__name__]             # <<<<<<<<<<<<<<
 *     clazz = getattr(thismodule, type_name, None)
 *     if clazz is not None:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_sys); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_modules); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_name_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_thismodule = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":99
 * 
 *     thismodule = sys.modules[__name__]
 *     clazz = getattr(thismodule, type_name, None)             # <<<<<<<<<<<<<<
 *     if clazz is not None:
 *         return clazz(ptr_holder=ptr_holder)
 */
  __pyx_t_4 = __Pyx_GetAttr3(__pyx_v_thismodule, __pyx_v_type_name, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_clazz = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":100
 *     thismodule = sys.modules[__name__]
 *     clazz = getattr(thismodule, type_name, None)
 *     if clazz is not None:             # <<<<<<<<<<<<<<
 *         return clazz(ptr_holder=ptr_holder)
 * 
 */
  __pyx_t_1 = (__pyx_v_clazz != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "../../../../opencog/cython/opencog/nameserver.pyx":101
 *     clazz = getattr(thismodule, type_name, None)
 *     if clazz is not None:
 *         return clazz(ptr_holder=ptr_holder)             # <<<<<<<<<<<<<<
 * 
 *     # For handling the children types of TruthValue.
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_ptr_holder, ((PyObject *)__pyx_v_ptr_holder)) < 0) __PYX_ERR(4, 101, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_v_clazz, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/nameserver.pyx":100
 *     thismodule = sys.modules[__name__]
 *     clazz = getattr(thismodule, type_name, None)
 *     if clazz is not None:             # <<<<<<<<<<<<<<
 *         return clazz(ptr_holder=ptr_holder)
 * 
 */
  }

  /* "../../../../opencog/cython/opencog/nameserver.pyx":104
 * 
 *     # For handling the children types of TruthValue.
 *     if is_a(value_type, types.TruthValue):             # <<<<<<<<<<<<<<
 *         return TruthValue(ptr_holder=ptr_holder)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_is_a); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_From_short(__pyx_v_value_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_types); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_TruthValue); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_7};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 104, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_7};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 104, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(4, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_7);
    __pyx_t_3 = 0;
    __pyx_t_7 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 104, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "../../../../opencog/cython/opencog/nameserver.pyx":105
 *     # For handling the children types of TruthValue.
 *     if is_a(value_type, types.TruthValue):
 *         return TruthValue(ptr_holder=ptr_holder)             # <<<<<<<<<<<<<<
 * 
 *     # For handling the children types of LinkValue.
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ptr_holder, ((PyObject *)__pyx_v_ptr_holder)) < 0) __PYX_ERR(4, 105, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opencog_9atomspace_TruthValue), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/nameserver.pyx":104
 * 
 *     # For handling the children types of TruthValue.
 *     if is_a(value_type, types.TruthValue):             # <<<<<<<<<<<<<<
 *         return TruthValue(ptr_holder=ptr_holder)
 * 
 */
  }

  /* "../../../../opencog/cython/opencog/nameserver.pyx":108
 * 
 *     # For handling the children types of LinkValue.
 *     if is_a(value_type, types.LinkValue):             # <<<<<<<<<<<<<<
 *         return LinkValue(ptr_holder=ptr_holder)
 *     # For handling the children types of Atom.
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_is_a); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyInt_From_short(__pyx_v_value_type); if (unlikely(!__pyx_t_9)) __PYX_ERR(4, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_types); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_LinkValue); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_9, __pyx_t_3};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 108, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_9, __pyx_t_3};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 108, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_8, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_8, __pyx_t_3);
    __pyx_t_9 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_6) {

    /* "../../../../opencog/cython/opencog/nameserver.pyx":109
 *     # For handling the children types of LinkValue.
 *     if is_a(value_type, types.LinkValue):
 *         return LinkValue(ptr_holder=ptr_holder)             # <<<<<<<<<<<<<<
 *     # For handling the children types of Atom.
 *     if is_a(value_type, types.Atom):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_ptr_holder, ((PyObject *)__pyx_v_ptr_holder)) < 0) __PYX_ERR(4, 109, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opencog_9atomspace_LinkValue), __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/nameserver.pyx":108
 * 
 *     # For handling the children types of LinkValue.
 *     if is_a(value_type, types.LinkValue):             # <<<<<<<<<<<<<<
 *         return LinkValue(ptr_holder=ptr_holder)
 *     # For handling the children types of Atom.
 */
  }

  /* "../../../../opencog/cython/opencog/nameserver.pyx":111
 *         return LinkValue(ptr_holder=ptr_holder)
 *     # For handling the children types of Atom.
 *     if is_a(value_type, types.Atom):             # <<<<<<<<<<<<<<
 *         return Atom(ptr_holder=ptr_holder)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_is_a); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_short(__pyx_v_value_type); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_types); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Atom); if (unlikely(!__pyx_t_9)) __PYX_ERR(4, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_5, __pyx_t_9};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 111, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_5, __pyx_t_9};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 111, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_8, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_8, __pyx_t_9);
    __pyx_t_5 = 0;
    __pyx_t_9 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "../../../../opencog/cython/opencog/nameserver.pyx":112
 *     # For handling the children types of Atom.
 *     if is_a(value_type, types.Atom):
 *         return Atom(ptr_holder=ptr_holder)             # <<<<<<<<<<<<<<
 * 
 *     # For handling the children types of Value.
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ptr_holder, ((PyObject *)__pyx_v_ptr_holder)) < 0) __PYX_ERR(4, 112, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opencog_9atomspace_Atom), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/nameserver.pyx":111
 *         return LinkValue(ptr_holder=ptr_holder)
 *     # For handling the children types of Atom.
 *     if is_a(value_type, types.Atom):             # <<<<<<<<<<<<<<
 *         return Atom(ptr_holder=ptr_holder)
 * 
 */
  }

  /* "../../../../opencog/cython/opencog/nameserver.pyx":115
 * 
 *     # For handling the children types of Value.
 *     if is_a(value_type, types.Value):             # <<<<<<<<<<<<<<
 *         return Value(ptr_holder=ptr_holder)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_is_a); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_From_short(__pyx_v_value_type); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_types); if (unlikely(!__pyx_t_9)) __PYX_ERR(4, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_Value); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_t_5};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 115, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_t_5};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 115, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_8, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_8, __pyx_t_5);
    __pyx_t_7 = 0;
    __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(4, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_6) {

    /* "../../../../opencog/cython/opencog/nameserver.pyx":116
 *     # For handling the children types of Value.
 *     if is_a(value_type, types.Value):
 *         return Value(ptr_holder=ptr_holder)             # <<<<<<<<<<<<<<
 * 
 *     raise TypeError("Python API for " + type_name + " is not implemented yet")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_ptr_holder, ((PyObject *)__pyx_v_ptr_holder)) < 0) __PYX_ERR(4, 116, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7opencog_9atomspace_Value), __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "../../../../opencog/cython/opencog/nameserver.pyx":115
 * 
 *     # For handling the children types of Value.
 *     if is_a(value_type, types.Value):             # <<<<<<<<<<<<<<
 *         return Value(ptr_holder=ptr_holder)
 * 
 */
  }

  /* "../../../../opencog/cython/opencog/nameserver.pyx":118
 *         return Value(ptr_holder=ptr_holder)
 * 
 *     raise TypeError("Python API for " + type_name + " is not implemented yet")             # <<<<<<<<<<<<<<
 * 
 * # ========================== END OF FILE =========================
 */
  __pyx_t_2 = PyNumber_Add(__pyx_kp_u_Python_API_for, __pyx_v_type_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_kp_u_is_not_implemented_yet); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(4, 118, __pyx_L1_error)

  /* "../../../../opencog/cython/opencog/nameserver.pyx":90
 *     return types
 * 
 * cdef create_python_value_from_c_value(const cValuePtr& value):             # <<<<<<<<<<<<<<
 *     if value.get() == NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("opencog.atomspace.create_python_value_from_c_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_type_name);
  __Pyx_XDECREF((PyObject *)__pyx_v_ptr_holder);
  __Pyx_XDECREF(__pyx_v_thismodule);
  __Pyx_XDECREF(__pyx_v_clazz);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/link_value.pyx":2
 * 
 * def createLinkValue(arg):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cLinkValue] c_ptr
 *     if (isinstance(arg, list)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_26createLinkValue(PyObject *__pyx_self, PyObject *__pyx_v_arg); /*proto*/
static PyMethodDef __pyx_mdef_7opencog_9atomspace_26createLinkValue = {"createLinkValue", (PyCFunction)__pyx_pw_7opencog_9atomspace_26createLinkValue, METH_O, 0};
static PyObject *__pyx_pw_7opencog_9atomspace_26createLinkValue(PyObject *__pyx_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createLinkValue (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_25createLinkValue(__pyx_self, ((PyObject *)__pyx_v_arg));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_25createLinkValue(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arg) {
  std::shared_ptr<opencog::LinkValue>  __pyx_v_c_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createLinkValue", 0);

  /* "../../../../opencog/cython/opencog/link_value.pyx":4
 * def createLinkValue(arg):
 *     cdef shared_ptr[cLinkValue] c_ptr
 *     if (isinstance(arg, list)):             # <<<<<<<<<<<<<<
 *         c_ptr.reset(new cLinkValue(LinkValue.list_of_values_to_vector(arg)))
 *     else:
 */
  __pyx_t_1 = PyList_Check(__pyx_v_arg); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../../opencog/cython/opencog/link_value.pyx":5
 *     cdef shared_ptr[cLinkValue] c_ptr
 *     if (isinstance(arg, list)):
 *         c_ptr.reset(new cLinkValue(LinkValue.list_of_values_to_vector(arg)))             # <<<<<<<<<<<<<<
 *     else:
 *         c_ptr.reset(new cLinkValue(LinkValue.list_of_values_to_vector([arg])))
 */
    if (!(likely(PyList_CheckExact(__pyx_v_arg))||((__pyx_v_arg) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_arg)->tp_name), 0))) __PYX_ERR(8, 5, __pyx_L1_error)
    __pyx_v_c_ptr.reset(new opencog::LinkValue(__pyx_f_7opencog_9atomspace_9LinkValue_list_of_values_to_vector(((PyObject*)__pyx_v_arg))));

    /* "../../../../opencog/cython/opencog/link_value.pyx":4
 * def createLinkValue(arg):
 *     cdef shared_ptr[cLinkValue] c_ptr
 *     if (isinstance(arg, list)):             # <<<<<<<<<<<<<<
 *         c_ptr.reset(new cLinkValue(LinkValue.list_of_values_to_vector(arg)))
 *     else:
 */
    goto __pyx_L3;
  }

  /* "../../../../opencog/cython/opencog/link_value.pyx":7
 *         c_ptr.reset(new cLinkValue(LinkValue.list_of_values_to_vector(arg)))
 *     else:
 *         c_ptr.reset(new cLinkValue(LinkValue.list_of_values_to_vector([arg])))             # <<<<<<<<<<<<<<
 *     return LinkValue(PtrHolder.create(<shared_ptr[void]&>c_ptr))
 * 
 */
  /*else*/ {
    __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_arg);
    __Pyx_GIVEREF(__pyx_v_arg);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_v_arg);
    __pyx_v_c_ptr.reset(new opencog::LinkValue(__pyx_f_7opencog_9atomspace_9LinkValue_list_of_values_to_vector(((PyObject*)__pyx_t_3))));
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "../../../../opencog/cython/opencog/link_value.pyx":8
 *     else:
 *         c_ptr.reset(new cLinkValue(LinkValue.list_of_values_to_vector([arg])))
 *     return LinkValue(PtrHolder.create(<shared_ptr[void]&>c_ptr))             # <<<<<<<<<<<<<<
 * 
 * cdef class LinkValue(Value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)__pyx_f_7opencog_9atomspace_9PtrHolder_create(((std::shared_ptr<void>  &)__pyx_v_c_ptr))); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7opencog_9atomspace_LinkValue), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/link_value.pyx":2
 * 
 * def createLinkValue(arg):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cLinkValue] c_ptr
 *     if (isinstance(arg, list)):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("opencog.atomspace.createLinkValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/link_value.pyx":12
 * cdef class LinkValue(Value):
 * 
 *     def to_list(self):             # <<<<<<<<<<<<<<
 *         return LinkValue.vector_of_values_to_list(
 *             &((<cLinkValue*>self.get_c_value_ptr().get()).value()))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9LinkValue_1to_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_9LinkValue_1to_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_list (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9LinkValue_to_list(((struct __pyx_obj_7opencog_9atomspace_LinkValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9LinkValue_to_list(struct __pyx_obj_7opencog_9atomspace_LinkValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_list", 0);

  /* "../../../../opencog/cython/opencog/link_value.pyx":13
 * 
 *     def to_list(self):
 *         return LinkValue.vector_of_values_to_list(             # <<<<<<<<<<<<<<
 *             &((<cLinkValue*>self.get_c_value_ptr().get()).value()))
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "../../../../opencog/cython/opencog/link_value.pyx":14
 *     def to_list(self):
 *         return LinkValue.vector_of_values_to_list(
 *             &((<cLinkValue*>self.get_c_value_ptr().get()).value()))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_1 = __pyx_f_7opencog_9atomspace_9LinkValue_vector_of_values_to_list((&((opencog::LinkValue *)((struct __pyx_vtabstruct_7opencog_9atomspace_LinkValue *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_c_value_ptr(((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v_self)).get())->value())); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/link_value.pyx":12
 * cdef class LinkValue(Value):
 * 
 *     def to_list(self):             # <<<<<<<<<<<<<<
 *         return LinkValue.vector_of_values_to_list(
 *             &((<cLinkValue*>self.get_c_value_ptr().get()).value()))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.LinkValue.to_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/link_value.pyx":17
 * 
 *     @staticmethod
 *     cdef vector[cValuePtr] list_of_values_to_vector(list python_list):             # <<<<<<<<<<<<<<
 *         cdef vector[cValuePtr] cpp_vector
 *         cdef Value value
 */

static std::vector<opencog::ValuePtr>  __pyx_f_7opencog_9atomspace_9LinkValue_list_of_values_to_vector(PyObject *__pyx_v_python_list) {
  std::vector<opencog::ValuePtr>  __pyx_v_cpp_vector;
  struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v_value = 0;
  std::vector<opencog::ValuePtr>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("list_of_values_to_vector", 0);

  /* "../../../../opencog/cython/opencog/link_value.pyx":20
 *         cdef vector[cValuePtr] cpp_vector
 *         cdef Value value
 *         for value in python_list:             # <<<<<<<<<<<<<<
 *             cpp_vector.push_back(value.get_c_value_ptr())
 *         return cpp_vector
 */
  if (unlikely(__pyx_v_python_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(8, 20, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_python_list; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(8, 20, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 20, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_7opencog_9atomspace_Value))))) __PYX_ERR(8, 20, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_value, ((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../../../opencog/cython/opencog/link_value.pyx":21
 *         cdef Value value
 *         for value in python_list:
 *             cpp_vector.push_back(value.get_c_value_ptr())             # <<<<<<<<<<<<<<
 *         return cpp_vector
 * 
 */
    try {
      __pyx_v_cpp_vector.push_back(((struct __pyx_vtabstruct_7opencog_9atomspace_Value *)__pyx_v_value->__pyx_vtab)->get_c_value_ptr(__pyx_v_value));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(8, 21, __pyx_L1_error)
    }

    /* "../../../../opencog/cython/opencog/link_value.pyx":20
 *         cdef vector[cValuePtr] cpp_vector
 *         cdef Value value
 *         for value in python_list:             # <<<<<<<<<<<<<<
 *             cpp_vector.push_back(value.get_c_value_ptr())
 *         return cpp_vector
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/link_value.pyx":22
 *         for value in python_list:
 *             cpp_vector.push_back(value.get_c_value_ptr())
 *         return cpp_vector             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = __pyx_v_cpp_vector;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/link_value.pyx":17
 * 
 *     @staticmethod
 *     cdef vector[cValuePtr] list_of_values_to_vector(list python_list):             # <<<<<<<<<<<<<<
 *         cdef vector[cValuePtr] cpp_vector
 *         cdef Value value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("opencog.atomspace.LinkValue.list_of_values_to_vector", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../opencog/cython/opencog/link_value.pyx":25
 * 
 *     @staticmethod
 *     cdef list vector_of_values_to_list(const vector[cValuePtr]* cpp_vector):             # <<<<<<<<<<<<<<
 *         list = []
 *         it = cpp_vector.const_begin()
 */

static PyObject *__pyx_f_7opencog_9atomspace_9LinkValue_vector_of_values_to_list(std::vector<opencog::ValuePtr>  const *__pyx_v_cpp_vector) {
  PyObject *__pyx_v_list = NULL;
  std::vector<opencog::ValuePtr> ::const_iterator __pyx_v_it;
  opencog::ValuePtr __pyx_v_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("vector_of_values_to_list", 0);

  /* "../../../../opencog/cython/opencog/link_value.pyx":26
 *     @staticmethod
 *     cdef list vector_of_values_to_list(const vector[cValuePtr]* cpp_vector):
 *         list = []             # <<<<<<<<<<<<<<
 *         it = cpp_vector.const_begin()
 *         cdef cValuePtr value
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/link_value.pyx":27
 *     cdef list vector_of_values_to_list(const vector[cValuePtr]* cpp_vector):
 *         list = []
 *         it = cpp_vector.const_begin()             # <<<<<<<<<<<<<<
 *         cdef cValuePtr value
 *         while it != cpp_vector.const_end():
 */
  __pyx_v_it = __pyx_v_cpp_vector->begin();

  /* "../../../../opencog/cython/opencog/link_value.pyx":29
 *         it = cpp_vector.const_begin()
 *         cdef cValuePtr value
 *         while it != cpp_vector.const_end():             # <<<<<<<<<<<<<<
 *             value = deref(it)
 *             list.append(create_python_value_from_c_value(value))
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_it != __pyx_v_cpp_vector->end()) != 0);
    if (!__pyx_t_2) break;

    /* "../../../../opencog/cython/opencog/link_value.pyx":30
 *         cdef cValuePtr value
 *         while it != cpp_vector.const_end():
 *             value = deref(it)             # <<<<<<<<<<<<<<
 *             list.append(create_python_value_from_c_value(value))
 *             inc(it)
 */
    __pyx_v_value = (*__pyx_v_it);

    /* "../../../../opencog/cython/opencog/link_value.pyx":31
 *         while it != cpp_vector.const_end():
 *             value = deref(it)
 *             list.append(create_python_value_from_c_value(value))             # <<<<<<<<<<<<<<
 *             inc(it)
 *         return list
 */
    __pyx_t_1 = __pyx_f_7opencog_9atomspace_create_python_value_from_c_value(__pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 31, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_list, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(8, 31, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "../../../../opencog/cython/opencog/link_value.pyx":32
 *             value = deref(it)
 *             list.append(create_python_value_from_c_value(value))
 *             inc(it)             # <<<<<<<<<<<<<<
 *         return list
 */
    (void)((++__pyx_v_it));
  }

  /* "../../../../opencog/cython/opencog/link_value.pyx":33
 *             list.append(create_python_value_from_c_value(value))
 *             inc(it)
 *         return list             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_list);
  __pyx_r = __pyx_v_list;
  goto __pyx_L0;

  /* "../../../../opencog/cython/opencog/link_value.pyx":25
 * 
 *     @staticmethod
 *     cdef list vector_of_values_to_list(const vector[cValuePtr]* cpp_vector):             # <<<<<<<<<<<<<<
 *         list = []
 *         it = cpp_vector.const_begin()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.LinkValue.vector_of_values_to_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9LinkValue_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_9LinkValue_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9LinkValue_2__reduce_cython__(((struct __pyx_obj_7opencog_9atomspace_LinkValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9LinkValue_2__reduce_cython__(struct __pyx_obj_7opencog_9atomspace_LinkValue *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.ptr_holder,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.ptr_holder));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.ptr_holder));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->__pyx_base.ptr_holder));
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.ptr_holder,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.ptr_holder,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.ptr_holder is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.ptr_holder,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.ptr_holder is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_LinkValue, (type(self), 0x4ddf78e, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->__pyx_base.ptr_holder) != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.ptr_holder is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_LinkValue, (type(self), 0x4ddf78e, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.ptr_holder is not None
 *     if use_setstate:
 *         return __pyx_unpickle_LinkValue, (type(self), 0x4ddf78e, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_LinkValue, (type(self), 0x4ddf78e, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_LinkValue); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_81655694);
    __Pyx_GIVEREF(__pyx_int_81655694);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_81655694);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.ptr_holder is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_LinkValue, (type(self), 0x4ddf78e, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_LinkValue, (type(self), 0x4ddf78e, None), state
 *     else:
 *         return __pyx_unpickle_LinkValue, (type(self), 0x4ddf78e, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_LinkValue__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_LinkValue); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_81655694);
    __Pyx_GIVEREF(__pyx_int_81655694);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_81655694);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("opencog.atomspace.LinkValue.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_LinkValue, (type(self), 0x4ddf78e, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_LinkValue__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_9LinkValue_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7opencog_9atomspace_9LinkValue_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7opencog_9atomspace_9LinkValue_4__setstate_cython__(((struct __pyx_obj_7opencog_9atomspace_LinkValue *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_9LinkValue_4__setstate_cython__(struct __pyx_obj_7opencog_9atomspace_LinkValue *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_LinkValue, (type(self), 0x4ddf78e, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_LinkValue__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_7opencog_9atomspace___pyx_unpickle_LinkValue__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_LinkValue, (type(self), 0x4ddf78e, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_LinkValue__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("opencog.atomspace.LinkValue.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Value(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_28__pyx_unpickle_Value(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7opencog_9atomspace_28__pyx_unpickle_Value = {"__pyx_unpickle_Value", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7opencog_9atomspace_28__pyx_unpickle_Value, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7opencog_9atomspace_28__pyx_unpickle_Value(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Value (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Value", 1, 3, 3, 1); __PYX_ERR(0, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Value", 1, 3, 3, 2); __PYX_ERR(0, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Value") < 0)) __PYX_ERR(0, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Value", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.__pyx_unpickle_Value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_27__pyx_unpickle_Value(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_27__pyx_unpickle_Value(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Value", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x4ddf78e, 0x00b53d5, 0x39a8faa):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__16, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x4ddf78e, 0x00b53d5, 0x39a8faa):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 *     __pyx_result = Value.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x4ddf78e, 0x00b53d5, 0x39a8faa):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Value.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x4ddf78e, 0x00b53d5, 0x39a8faa):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 *     __pyx_result = Value.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Value__set_state(<Value> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7opencog_9atomspace_Value), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 *     __pyx_result = Value.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Value__set_state(<Value> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Value.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Value__set_state(<Value> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Value__set_state(Value __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_7opencog_9atomspace___pyx_unpickle_Value__set_state(((struct __pyx_obj_7opencog_9atomspace_Value *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 *     __pyx_result = Value.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Value__set_state(<Value> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Value__set_state(<Value> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Value__set_state(Value __pyx_result, tuple __pyx_state):
 *     __pyx_result.ptr_holder = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Value(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("opencog.atomspace.__pyx_unpickle_Value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Value__set_state(<Value> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Value__set_state(Value __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_7opencog_9atomspace___pyx_unpickle_Value__set_state(struct __pyx_obj_7opencog_9atomspace_Value *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Value__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Value__set_state(Value __pyx_result, tuple __pyx_state):
 *     __pyx_result.ptr_holder = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7opencog_9atomspace_PtrHolder))))) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->ptr_holder);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->ptr_holder));
  __pyx_v___pyx_result->ptr_holder = ((struct __pyx_obj_7opencog_9atomspace_PtrHolder *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Value__set_state(Value __pyx_result, tuple __pyx_state):
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Value__set_state(Value __pyx_result, tuple __pyx_state):
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Value__set_state(<Value> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Value__set_state(Value __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("opencog.atomspace.__pyx_unpickle_Value__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_TruthValue(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_30__pyx_unpickle_TruthValue(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7opencog_9atomspace_30__pyx_unpickle_TruthValue = {"__pyx_unpickle_TruthValue", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7opencog_9atomspace_30__pyx_unpickle_TruthValue, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7opencog_9atomspace_30__pyx_unpickle_TruthValue(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_TruthValue (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_TruthValue", 1, 3, 3, 1); __PYX_ERR(0, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_TruthValue", 1, 3, 3, 2); __PYX_ERR(0, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_TruthValue") < 0)) __PYX_ERR(0, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_TruthValue", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.__pyx_unpickle_TruthValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_29__pyx_unpickle_TruthValue(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_29__pyx_unpickle_TruthValue(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_TruthValue", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x4ddf78e, 0x00b53d5, 0x39a8faa):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__16, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x4ddf78e, 0x00b53d5, 0x39a8faa):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 *     __pyx_result = TruthValue.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x4ddf78e, 0x00b53d5, 0x39a8faa):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = TruthValue.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x4ddf78e, 0x00b53d5, 0x39a8faa):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 *     __pyx_result = TruthValue.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_TruthValue__set_state(<TruthValue> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7opencog_9atomspace_TruthValue), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 *     __pyx_result = TruthValue.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_TruthValue__set_state(<TruthValue> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = TruthValue.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_TruthValue__set_state(<TruthValue> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_TruthValue__set_state(TruthValue __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_7opencog_9atomspace___pyx_unpickle_TruthValue__set_state(((struct __pyx_obj_7opencog_9atomspace_TruthValue *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 *     __pyx_result = TruthValue.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_TruthValue__set_state(<TruthValue> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_TruthValue__set_state(<TruthValue> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_TruthValue__set_state(TruthValue __pyx_result, tuple __pyx_state):
 *     __pyx_result.ptr_holder = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_TruthValue(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("opencog.atomspace.__pyx_unpickle_TruthValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_TruthValue__set_state(<TruthValue> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_TruthValue__set_state(TruthValue __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_7opencog_9atomspace___pyx_unpickle_TruthValue__set_state(struct __pyx_obj_7opencog_9atomspace_TruthValue *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_TruthValue__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_TruthValue__set_state(TruthValue __pyx_result, tuple __pyx_state):
 *     __pyx_result.ptr_holder = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7opencog_9atomspace_PtrHolder))))) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.ptr_holder);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->__pyx_base.ptr_holder));
  __pyx_v___pyx_result->__pyx_base.ptr_holder = ((struct __pyx_obj_7opencog_9atomspace_PtrHolder *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_TruthValue__set_state(TruthValue __pyx_result, tuple __pyx_state):
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_TruthValue__set_state(TruthValue __pyx_result, tuple __pyx_state):
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_TruthValue__set_state(<TruthValue> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_TruthValue__set_state(TruthValue __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("opencog.atomspace.__pyx_unpickle_TruthValue__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_FloatValue(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_32__pyx_unpickle_FloatValue(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7opencog_9atomspace_32__pyx_unpickle_FloatValue = {"__pyx_unpickle_FloatValue", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7opencog_9atomspace_32__pyx_unpickle_FloatValue, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7opencog_9atomspace_32__pyx_unpickle_FloatValue(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_FloatValue (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_FloatValue", 1, 3, 3, 1); __PYX_ERR(0, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_FloatValue", 1, 3, 3, 2); __PYX_ERR(0, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_FloatValue") < 0)) __PYX_ERR(0, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_FloatValue", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.__pyx_unpickle_FloatValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_31__pyx_unpickle_FloatValue(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_31__pyx_unpickle_FloatValue(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_FloatValue", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x4ddf78e, 0x00b53d5, 0x39a8faa):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__16, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x4ddf78e, 0x00b53d5, 0x39a8faa):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 *     __pyx_result = FloatValue.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x4ddf78e, 0x00b53d5, 0x39a8faa):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = FloatValue.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x4ddf78e, 0x00b53d5, 0x39a8faa):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 *     __pyx_result = FloatValue.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_FloatValue__set_state(<FloatValue> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7opencog_9atomspace_FloatValue), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 *     __pyx_result = FloatValue.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_FloatValue__set_state(<FloatValue> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = FloatValue.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_FloatValue__set_state(<FloatValue> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_FloatValue__set_state(FloatValue __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_7opencog_9atomspace___pyx_unpickle_FloatValue__set_state(((struct __pyx_obj_7opencog_9atomspace_FloatValue *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 *     __pyx_result = FloatValue.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_FloatValue__set_state(<FloatValue> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_FloatValue__set_state(<FloatValue> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_FloatValue__set_state(FloatValue __pyx_result, tuple __pyx_state):
 *     __pyx_result.ptr_holder = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_FloatValue(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("opencog.atomspace.__pyx_unpickle_FloatValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_FloatValue__set_state(<FloatValue> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_FloatValue__set_state(FloatValue __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_7opencog_9atomspace___pyx_unpickle_FloatValue__set_state(struct __pyx_obj_7opencog_9atomspace_FloatValue *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_FloatValue__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_FloatValue__set_state(FloatValue __pyx_result, tuple __pyx_state):
 *     __pyx_result.ptr_holder = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7opencog_9atomspace_PtrHolder))))) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.ptr_holder);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->__pyx_base.ptr_holder));
  __pyx_v___pyx_result->__pyx_base.ptr_holder = ((struct __pyx_obj_7opencog_9atomspace_PtrHolder *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_FloatValue__set_state(FloatValue __pyx_result, tuple __pyx_state):
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_FloatValue__set_state(FloatValue __pyx_result, tuple __pyx_state):
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_FloatValue__set_state(<FloatValue> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_FloatValue__set_state(FloatValue __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("opencog.atomspace.__pyx_unpickle_FloatValue__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_StringValue(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_34__pyx_unpickle_StringValue(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7opencog_9atomspace_34__pyx_unpickle_StringValue = {"__pyx_unpickle_StringValue", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7opencog_9atomspace_34__pyx_unpickle_StringValue, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7opencog_9atomspace_34__pyx_unpickle_StringValue(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_StringValue (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_StringValue", 1, 3, 3, 1); __PYX_ERR(0, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_StringValue", 1, 3, 3, 2); __PYX_ERR(0, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_StringValue") < 0)) __PYX_ERR(0, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_StringValue", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.__pyx_unpickle_StringValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_33__pyx_unpickle_StringValue(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_33__pyx_unpickle_StringValue(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_StringValue", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x4ddf78e, 0x00b53d5, 0x39a8faa):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__16, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x4ddf78e, 0x00b53d5, 0x39a8faa):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 *     __pyx_result = StringValue.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x4ddf78e, 0x00b53d5, 0x39a8faa):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = StringValue.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x4ddf78e, 0x00b53d5, 0x39a8faa):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 *     __pyx_result = StringValue.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_StringValue__set_state(<StringValue> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7opencog_9atomspace_StringValue), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 *     __pyx_result = StringValue.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_StringValue__set_state(<StringValue> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = StringValue.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_StringValue__set_state(<StringValue> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_StringValue__set_state(StringValue __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_7opencog_9atomspace___pyx_unpickle_StringValue__set_state(((struct __pyx_obj_7opencog_9atomspace_StringValue *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 *     __pyx_result = StringValue.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_StringValue__set_state(<StringValue> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_StringValue__set_state(<StringValue> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_StringValue__set_state(StringValue __pyx_result, tuple __pyx_state):
 *     __pyx_result.ptr_holder = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_StringValue(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("opencog.atomspace.__pyx_unpickle_StringValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_StringValue__set_state(<StringValue> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_StringValue__set_state(StringValue __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_7opencog_9atomspace___pyx_unpickle_StringValue__set_state(struct __pyx_obj_7opencog_9atomspace_StringValue *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_StringValue__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_StringValue__set_state(StringValue __pyx_result, tuple __pyx_state):
 *     __pyx_result.ptr_holder = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7opencog_9atomspace_PtrHolder))))) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.ptr_holder);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->__pyx_base.ptr_holder));
  __pyx_v___pyx_result->__pyx_base.ptr_holder = ((struct __pyx_obj_7opencog_9atomspace_PtrHolder *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_StringValue__set_state(StringValue __pyx_result, tuple __pyx_state):
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_StringValue__set_state(StringValue __pyx_result, tuple __pyx_state):
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_StringValue__set_state(<StringValue> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_StringValue__set_state(StringValue __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("opencog.atomspace.__pyx_unpickle_StringValue__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_LinkValue(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_7opencog_9atomspace_36__pyx_unpickle_LinkValue(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7opencog_9atomspace_36__pyx_unpickle_LinkValue = {"__pyx_unpickle_LinkValue", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7opencog_9atomspace_36__pyx_unpickle_LinkValue, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7opencog_9atomspace_36__pyx_unpickle_LinkValue(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_LinkValue (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_LinkValue", 1, 3, 3, 1); __PYX_ERR(0, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_LinkValue", 1, 3, 3, 2); __PYX_ERR(0, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_LinkValue") < 0)) __PYX_ERR(0, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_LinkValue", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("opencog.atomspace.__pyx_unpickle_LinkValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7opencog_9atomspace_35__pyx_unpickle_LinkValue(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7opencog_9atomspace_35__pyx_unpickle_LinkValue(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_LinkValue", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x4ddf78e, 0x00b53d5, 0x39a8faa):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__16, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x4ddf78e, 0x00b53d5, 0x39a8faa):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 *     __pyx_result = LinkValue.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x4ddf78e, 0x00b53d5, 0x39a8faa):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = LinkValue.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x4ddf78e, 0x00b53d5, 0x39a8faa):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 *     __pyx_result = LinkValue.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_LinkValue__set_state(<LinkValue> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7opencog_9atomspace_LinkValue), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 *     __pyx_result = LinkValue.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_LinkValue__set_state(<LinkValue> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = LinkValue.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_LinkValue__set_state(<LinkValue> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_LinkValue__set_state(LinkValue __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_7opencog_9atomspace___pyx_unpickle_LinkValue__set_state(((struct __pyx_obj_7opencog_9atomspace_LinkValue *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4ddf78e, 0x00b53d5, 0x39a8faa) = (ptr_holder))" % __pyx_checksum)
 *     __pyx_result = LinkValue.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_LinkValue__set_state(<LinkValue> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_LinkValue__set_state(<LinkValue> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_LinkValue__set_state(LinkValue __pyx_result, tuple __pyx_state):
 *     __pyx_result.ptr_holder = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_LinkValue(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("opencog.atomspace.__pyx_unpickle_LinkValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_LinkValue__set_state(<LinkValue> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_LinkValue__set_state(LinkValue __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_7opencog_9atomspace___pyx_unpickle_LinkValue__set_state(struct __pyx_obj_7opencog_9atomspace_LinkValue *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_LinkValue__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_LinkValue__set_state(LinkValue __pyx_result, tuple __pyx_state):
 *     __pyx_result.ptr_holder = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7opencog_9atomspace_PtrHolder))))) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.ptr_holder);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->__pyx_base.ptr_holder));
  __pyx_v___pyx_result->__pyx_base.ptr_holder = ((struct __pyx_obj_7opencog_9atomspace_PtrHolder *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_LinkValue__set_state(LinkValue __pyx_result, tuple __pyx_state):
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_LinkValue__set_state(LinkValue __pyx_result, tuple __pyx_state):
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_LinkValue__set_state(<LinkValue> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_LinkValue__set_state(LinkValue __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("opencog.atomspace.__pyx_unpickle_LinkValue__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(0, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_7opencog_9atomspace_PtrHolder __pyx_vtable_7opencog_9atomspace_PtrHolder;

static PyObject *__pyx_tp_new_7opencog_9atomspace_PtrHolder(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7opencog_9atomspace_PtrHolder *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opencog_9atomspace_PtrHolder *)o);
  p->__pyx_vtab = __pyx_vtabptr_7opencog_9atomspace_PtrHolder;
  new((void*)&(p->shared_ptr)) std::shared_ptr<void> ();
  return o;
}

static void __pyx_tp_dealloc_7opencog_9atomspace_PtrHolder(PyObject *o) {
  struct __pyx_obj_7opencog_9atomspace_PtrHolder *p = (struct __pyx_obj_7opencog_9atomspace_PtrHolder *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->shared_ptr);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7opencog_9atomspace_PtrHolder[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opencog_9atomspace_9PtrHolder_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opencog_9atomspace_9PtrHolder_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opencog_9atomspace_PtrHolder = {
  PyVarObject_HEAD_INIT(0, 0)
  "opencog.atomspace.PtrHolder", /*tp_name*/
  sizeof(struct __pyx_obj_7opencog_9atomspace_PtrHolder), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opencog_9atomspace_PtrHolder, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "C++ shared_ptr object wrapper for Python clients. Cython cannot create\n    Python object constructor which gets C++ pointer. This class is used to\n    wrap pointer and make it possible to initialize Value in usual\n    constructor (see\n    http://docs.cython.org/en/latest/src/userguide/extension_types.html#instantiation-from-existing-c-c-pointers).", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opencog_9atomspace_PtrHolder, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opencog_9atomspace_PtrHolder, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7opencog_9atomspace_Value __pyx_vtable_7opencog_9atomspace_Value;

static PyObject *__pyx_tp_new_7opencog_9atomspace_Value(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7opencog_9atomspace_Value *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opencog_9atomspace_Value *)o);
  p->__pyx_vtab = __pyx_vtabptr_7opencog_9atomspace_Value;
  p->ptr_holder = ((struct __pyx_obj_7opencog_9atomspace_PtrHolder *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_7opencog_9atomspace_Value(PyObject *o) {
  struct __pyx_obj_7opencog_9atomspace_Value *p = (struct __pyx_obj_7opencog_9atomspace_Value *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->ptr_holder);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7opencog_9atomspace_Value(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7opencog_9atomspace_Value *p = (struct __pyx_obj_7opencog_9atomspace_Value *)o;
  if (p->ptr_holder) {
    e = (*v)(((PyObject *)p->ptr_holder), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7opencog_9atomspace_Value(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7opencog_9atomspace_Value *p = (struct __pyx_obj_7opencog_9atomspace_Value *)o;
  tmp = ((PyObject*)p->ptr_holder);
  p->ptr_holder = ((struct __pyx_obj_7opencog_9atomspace_PtrHolder *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7opencog_9atomspace_5Value_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_5Value_4type_1__get__(o);
}

static PyObject *__pyx_getprop_7opencog_9atomspace_5Value_type_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_5Value_9type_name_1__get__(o);
}

static PyMethodDef __pyx_methods_7opencog_9atomspace_Value[] = {
  {"value_ptr", (PyCFunction)__pyx_pw_7opencog_9atomspace_5Value_3value_ptr, METH_NOARGS, 0},
  {"is_atom", (PyCFunction)__pyx_pw_7opencog_9atomspace_5Value_5is_atom, METH_NOARGS, 0},
  {"is_node", (PyCFunction)__pyx_pw_7opencog_9atomspace_5Value_7is_node, METH_NOARGS, 0},
  {"is_link", (PyCFunction)__pyx_pw_7opencog_9atomspace_5Value_9is_link, METH_NOARGS, 0},
  {"is_a", (PyCFunction)__pyx_pw_7opencog_9atomspace_5Value_11is_a, METH_O, 0},
  {"to_list", (PyCFunction)__pyx_pw_7opencog_9atomspace_5Value_13to_list, METH_NOARGS, 0},
  {"long_string", (PyCFunction)__pyx_pw_7opencog_9atomspace_5Value_15long_string, METH_NOARGS, 0},
  {"short_string", (PyCFunction)__pyx_pw_7opencog_9atomspace_5Value_17short_string, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opencog_9atomspace_5Value_25__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opencog_9atomspace_5Value_27__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7opencog_9atomspace_Value[] = {
  {(char *)"type", __pyx_getprop_7opencog_9atomspace_5Value_type, 0, (char *)0, 0},
  {(char *)"type_name", __pyx_getprop_7opencog_9atomspace_5Value_type_name, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opencog_9atomspace_Value = {
  PyVarObject_HEAD_INIT(0, 0)
  "opencog.atomspace.Value", /*tp_name*/
  sizeof(struct __pyx_obj_7opencog_9atomspace_Value), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opencog_9atomspace_Value, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_7opencog_9atomspace_5Value_21__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_7opencog_9atomspace_5Value_19__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7opencog_9atomspace_Value, /*tp_traverse*/
  __pyx_tp_clear_7opencog_9atomspace_Value, /*tp_clear*/
  __pyx_pw_7opencog_9atomspace_5Value_23__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opencog_9atomspace_Value, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7opencog_9atomspace_Value, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7opencog_9atomspace_5Value_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opencog_9atomspace_Value, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7opencog_9atomspace_TruthValue __pyx_vtable_7opencog_9atomspace_TruthValue;

static PyObject *__pyx_tp_new_7opencog_9atomspace_TruthValue(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7opencog_9atomspace_TruthValue *p;
  PyObject *o = __pyx_tp_new_7opencog_9atomspace_Value(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opencog_9atomspace_TruthValue *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7opencog_9atomspace_Value*)__pyx_vtabptr_7opencog_9atomspace_TruthValue;
  return o;
}

static PyObject *__pyx_getprop_7opencog_9atomspace_10TruthValue_mean(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_10TruthValue_4mean_1__get__(o);
}

static PyObject *__pyx_getprop_7opencog_9atomspace_10TruthValue_confidence(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_10TruthValue_10confidence_1__get__(o);
}

static PyObject *__pyx_getprop_7opencog_9atomspace_10TruthValue_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_10TruthValue_5count_1__get__(o);
}

static PyMethodDef __pyx_methods_7opencog_9atomspace_TruthValue[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opencog_9atomspace_10TruthValue_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opencog_9atomspace_10TruthValue_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7opencog_9atomspace_TruthValue[] = {
  {(char *)"mean", __pyx_getprop_7opencog_9atomspace_10TruthValue_mean, 0, (char *)0, 0},
  {(char *)"confidence", __pyx_getprop_7opencog_9atomspace_10TruthValue_confidence, 0, (char *)0, 0},
  {(char *)"count", __pyx_getprop_7opencog_9atomspace_10TruthValue_count, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opencog_9atomspace_TruthValue = {
  PyVarObject_HEAD_INIT(0, 0)
  "opencog.atomspace.TruthValue", /*tp_name*/
  sizeof(struct __pyx_obj_7opencog_9atomspace_TruthValue), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opencog_9atomspace_Value, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opencog_9atomspace_5Value_21__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opencog_9atomspace_5Value_19__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  " The truth value represents the strength and confidence of\n        a relationship or term. In OpenCog there are a number of TruthValue\n        types, but as these involve additional complexity we focus primarily on\n        the SimpleTruthValue type which allows strength and count\n\n        @todo Support IndefiniteTruthValue, DistributionalTV, NullTV etc\n    ", /*tp_doc*/
  __pyx_tp_traverse_7opencog_9atomspace_Value, /*tp_traverse*/
  __pyx_tp_clear_7opencog_9atomspace_Value, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opencog_9atomspace_TruthValue, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7opencog_9atomspace_TruthValue, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opencog_9atomspace_5Value_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_7opencog_9atomspace_TruthValue, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7opencog_9atomspace_Atom __pyx_vtable_7opencog_9atomspace_Atom;

static PyObject *__pyx_tp_new_7opencog_9atomspace_Atom(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7opencog_9atomspace_Atom *p;
  PyObject *o = __pyx_tp_new_7opencog_9atomspace_Value(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opencog_9atomspace_Atom *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7opencog_9atomspace_Value*)__pyx_vtabptr_7opencog_9atomspace_Atom;
  p->_atom_type = Py_None; Py_INCREF(Py_None);
  p->_name = Py_None; Py_INCREF(Py_None);
  p->_outgoing = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7opencog_9atomspace_4Atom_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7opencog_9atomspace_Atom(PyObject *o) {
  struct __pyx_obj_7opencog_9atomspace_Atom *p = (struct __pyx_obj_7opencog_9atomspace_Atom *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_atom_type);
  Py_CLEAR(p->_name);
  Py_CLEAR(p->_outgoing);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_7opencog_9atomspace_Value(o);
}

static int __pyx_tp_traverse_7opencog_9atomspace_Atom(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7opencog_9atomspace_Atom *p = (struct __pyx_obj_7opencog_9atomspace_Atom *)o;
  e = __pyx_tp_traverse_7opencog_9atomspace_Value(o, v, a); if (e) return e;
  if (p->_atom_type) {
    e = (*v)(p->_atom_type, a); if (e) return e;
  }
  if (p->_name) {
    e = (*v)(p->_name, a); if (e) return e;
  }
  if (p->_outgoing) {
    e = (*v)(p->_outgoing, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7opencog_9atomspace_Atom(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7opencog_9atomspace_Atom *p = (struct __pyx_obj_7opencog_9atomspace_Atom *)o;
  __pyx_tp_clear_7opencog_9atomspace_Value(o);
  tmp = ((PyObject*)p->_atom_type);
  p->_atom_type = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_name);
  p->_name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_outgoing);
  p->_outgoing = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7opencog_9atomspace_4Atom_atomspace(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_4Atom_9atomspace_1__get__(o);
}

static PyObject *__pyx_getprop_7opencog_9atomspace_4Atom_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_4Atom_4name_1__get__(o);
}

static PyObject *__pyx_getprop_7opencog_9atomspace_4Atom_tv(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_4Atom_2tv_1__get__(o);
}

static int __pyx_setprop_7opencog_9atomspace_4Atom_tv(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7opencog_9atomspace_4Atom_2tv_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7opencog_9atomspace_4Atom_out(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_4Atom_3out_1__get__(o);
}

static PyObject *__pyx_getprop_7opencog_9atomspace_4Atom_arity(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_4Atom_5arity_1__get__(o);
}

static PyObject *__pyx_getprop_7opencog_9atomspace_4Atom_incoming(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7opencog_9atomspace_4Atom_8incoming_1__get__(o);
}

static PyMethodDef __pyx_methods_7opencog_9atomspace_Atom[] = {
  {"id_string", (PyCFunction)__pyx_pw_7opencog_9atomspace_4Atom_3id_string, METH_NOARGS, 0},
  {"set_value", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7opencog_9atomspace_4Atom_5set_value, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_value", (PyCFunction)__pyx_pw_7opencog_9atomspace_4Atom_7get_value, METH_O, 0},
  {"get_keys", (PyCFunction)__pyx_pw_7opencog_9atomspace_4Atom_9get_keys, METH_NOARGS, __pyx_doc_7opencog_9atomspace_4Atom_8get_keys},
  {"get_out", (PyCFunction)__pyx_pw_7opencog_9atomspace_4Atom_11get_out, METH_NOARGS, 0},
  {"incoming_by_type", (PyCFunction)__pyx_pw_7opencog_9atomspace_4Atom_13incoming_by_type, METH_O, 0},
  {"truth_value", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7opencog_9atomspace_4Atom_15truth_value, METH_VARARGS|METH_KEYWORDS, 0},
  {"__lt", (PyCFunction)__pyx_pw_7opencog_9atomspace_4Atom_19__lt, METH_O, 0},
  {"__eq", (PyCFunction)__pyx_pw_7opencog_9atomspace_4Atom_21__eq, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opencog_9atomspace_4Atom_25__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opencog_9atomspace_4Atom_27__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7opencog_9atomspace_Atom[] = {
  {(char *)"atomspace", __pyx_getprop_7opencog_9atomspace_4Atom_atomspace, 0, (char *)0, 0},
  {(char *)"name", __pyx_getprop_7opencog_9atomspace_4Atom_name, 0, (char *)0, 0},
  {(char *)"tv", __pyx_getprop_7opencog_9atomspace_4Atom_tv, __pyx_setprop_7opencog_9atomspace_4Atom_tv, (char *)0, 0},
  {(char *)"out", __pyx_getprop_7opencog_9atomspace_4Atom_out, 0, (char *)0, 0},
  {(char *)"arity", __pyx_getprop_7opencog_9atomspace_4Atom_arity, 0, (char *)0, 0},
  {(char *)"incoming", __pyx_getprop_7opencog_9atomspace_4Atom_incoming, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opencog_9atomspace_Atom = {
  PyVarObject_HEAD_INIT(0, 0)
  "opencog.atomspace.Atom", /*tp_name*/
  sizeof(struct __pyx_obj_7opencog_9atomspace_Atom), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opencog_9atomspace_Atom, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opencog_9atomspace_5Value_21__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_7opencog_9atomspace_4Atom_23__hash__, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opencog_9atomspace_5Value_19__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7opencog_9atomspace_Atom, /*tp_traverse*/
  __pyx_tp_clear_7opencog_9atomspace_Atom, /*tp_clear*/
  __pyx_pw_7opencog_9atomspace_4Atom_17__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opencog_9atomspace_Atom, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7opencog_9atomspace_Atom, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opencog_9atomspace_5Value_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_7opencog_9atomspace_Atom, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7opencog_9atomspace_AtomSpace __pyx_vtable_7opencog_9atomspace_AtomSpace;

static PyObject *__pyx_tp_new_7opencog_9atomspace_AtomSpace(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7opencog_9atomspace_AtomSpace *p;
  PyObject *o = __pyx_tp_new_7opencog_9atomspace_Value(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opencog_9atomspace_AtomSpace *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7opencog_9atomspace_Value*)__pyx_vtabptr_7opencog_9atomspace_AtomSpace;
  new((void*)&(p->asp)) opencog::ValuePtr();
  p->parent_atomspace = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_7opencog_9atomspace_AtomSpace(PyObject *o) {
  struct __pyx_obj_7opencog_9atomspace_AtomSpace *p = (struct __pyx_obj_7opencog_9atomspace_AtomSpace *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->asp);
  Py_CLEAR(p->parent_atomspace);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_7opencog_9atomspace_Value(o);
}

static int __pyx_tp_traverse_7opencog_9atomspace_AtomSpace(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7opencog_9atomspace_AtomSpace *p = (struct __pyx_obj_7opencog_9atomspace_AtomSpace *)o;
  e = __pyx_tp_traverse_7opencog_9atomspace_Value(o, v, a); if (e) return e;
  if (p->parent_atomspace) {
    e = (*v)(p->parent_atomspace, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7opencog_9atomspace_AtomSpace(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7opencog_9atomspace_AtomSpace *p = (struct __pyx_obj_7opencog_9atomspace_AtomSpace *)o;
  __pyx_tp_clear_7opencog_9atomspace_Value(o);
  tmp = ((PyObject*)p->parent_atomspace);
  p->parent_atomspace = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7opencog_9atomspace_AtomSpace[] = {
  {"add", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7opencog_9atomspace_9AtomSpace_5add, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7opencog_9atomspace_9AtomSpace_4add},
  {"add_atom", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_7add_atom, METH_O, 0},
  {"add_node", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7opencog_9atomspace_9AtomSpace_9add_node, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7opencog_9atomspace_9AtomSpace_8add_node},
  {"add_link", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7opencog_9atomspace_9AtomSpace_11add_link, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7opencog_9atomspace_9AtomSpace_10add_link},
  {"is_valid", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_13is_valid, METH_O, __pyx_doc_7opencog_9atomspace_9AtomSpace_12is_valid},
  {"remove", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7opencog_9atomspace_9AtomSpace_15remove, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7opencog_9atomspace_9AtomSpace_14remove},
  {"clear", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_17clear, METH_NOARGS, __pyx_doc_7opencog_9atomspace_9AtomSpace_16clear},
  {"set_value", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7opencog_9atomspace_9AtomSpace_19set_value, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7opencog_9atomspace_9AtomSpace_18set_value},
  {"set_truthvalue", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7opencog_9atomspace_9AtomSpace_21set_truthvalue, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7opencog_9atomspace_9AtomSpace_20set_truthvalue},
  {"size", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_31size, METH_NOARGS, __pyx_doc_7opencog_9atomspace_9AtomSpace_30size},
  {"get_atoms_by_type", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7opencog_9atomspace_9AtomSpace_33get_atoms_by_type, METH_VARARGS|METH_KEYWORDS, 0},
  {"include_incoming", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_35include_incoming, METH_O, __pyx_doc_7opencog_9atomspace_9AtomSpace_34include_incoming},
  {"include_outgoing", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_37include_outgoing, METH_O, __pyx_doc_7opencog_9atomspace_9AtomSpace_36include_outgoing},
  {"is_node_in_atomspace", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7opencog_9atomspace_9AtomSpace_39is_node_in_atomspace, METH_VARARGS|METH_KEYWORDS, 0},
  {"is_link_in_atomspace", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7opencog_9atomspace_9AtomSpace_41is_link_in_atomspace, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_43__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opencog_9atomspace_9AtomSpace_45__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_AtomSpace = {
  __pyx_pw_7opencog_9atomspace_9AtomSpace_27__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  __pyx_pw_7opencog_9atomspace_9AtomSpace_23__contains__, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_AtomSpace = {
  __pyx_pw_7opencog_9atomspace_9AtomSpace_27__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_7opencog_9atomspace_AtomSpace = {
  PyVarObject_HEAD_INIT(0, 0)
  "opencog.atomspace.AtomSpace", /*tp_name*/
  sizeof(struct __pyx_obj_7opencog_9atomspace_AtomSpace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opencog_9atomspace_AtomSpace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opencog_9atomspace_5Value_21__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_AtomSpace, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_AtomSpace, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_7opencog_9atomspace_9AtomSpace_25__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7opencog_9atomspace_AtomSpace, /*tp_traverse*/
  __pyx_tp_clear_7opencog_9atomspace_AtomSpace, /*tp_clear*/
  __pyx_pw_7opencog_9atomspace_9AtomSpace_3__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7opencog_9atomspace_9AtomSpace_29__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opencog_9atomspace_AtomSpace, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7opencog_9atomspace_9AtomSpace_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opencog_9atomspace_AtomSpace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7opencog_9atomspace_FloatValue __pyx_vtable_7opencog_9atomspace_FloatValue;

static PyObject *__pyx_tp_new_7opencog_9atomspace_FloatValue(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7opencog_9atomspace_FloatValue *p;
  PyObject *o = __pyx_tp_new_7opencog_9atomspace_Value(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opencog_9atomspace_FloatValue *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7opencog_9atomspace_Value*)__pyx_vtabptr_7opencog_9atomspace_FloatValue;
  return o;
}

static PyMethodDef __pyx_methods_7opencog_9atomspace_FloatValue[] = {
  {"to_list", (PyCFunction)__pyx_pw_7opencog_9atomspace_10FloatValue_1to_list, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opencog_9atomspace_10FloatValue_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opencog_9atomspace_10FloatValue_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opencog_9atomspace_FloatValue = {
  PyVarObject_HEAD_INIT(0, 0)
  "opencog.atomspace.FloatValue", /*tp_name*/
  sizeof(struct __pyx_obj_7opencog_9atomspace_FloatValue), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opencog_9atomspace_Value, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opencog_9atomspace_5Value_21__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opencog_9atomspace_5Value_19__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7opencog_9atomspace_Value, /*tp_traverse*/
  __pyx_tp_clear_7opencog_9atomspace_Value, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opencog_9atomspace_FloatValue, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opencog_9atomspace_5Value_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_7opencog_9atomspace_FloatValue, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7opencog_9atomspace_StringValue __pyx_vtable_7opencog_9atomspace_StringValue;

static PyObject *__pyx_tp_new_7opencog_9atomspace_StringValue(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7opencog_9atomspace_StringValue *p;
  PyObject *o = __pyx_tp_new_7opencog_9atomspace_Value(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opencog_9atomspace_StringValue *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7opencog_9atomspace_Value*)__pyx_vtabptr_7opencog_9atomspace_StringValue;
  return o;
}

static PyMethodDef __pyx_methods_7opencog_9atomspace_StringValue[] = {
  {"to_list", (PyCFunction)__pyx_pw_7opencog_9atomspace_11StringValue_1to_list, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opencog_9atomspace_11StringValue_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opencog_9atomspace_11StringValue_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opencog_9atomspace_StringValue = {
  PyVarObject_HEAD_INIT(0, 0)
  "opencog.atomspace.StringValue", /*tp_name*/
  sizeof(struct __pyx_obj_7opencog_9atomspace_StringValue), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opencog_9atomspace_Value, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opencog_9atomspace_5Value_21__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opencog_9atomspace_5Value_19__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7opencog_9atomspace_Value, /*tp_traverse*/
  __pyx_tp_clear_7opencog_9atomspace_Value, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opencog_9atomspace_StringValue, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opencog_9atomspace_5Value_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_7opencog_9atomspace_StringValue, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7opencog_9atomspace_LinkValue __pyx_vtable_7opencog_9atomspace_LinkValue;

static PyObject *__pyx_tp_new_7opencog_9atomspace_LinkValue(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7opencog_9atomspace_LinkValue *p;
  PyObject *o = __pyx_tp_new_7opencog_9atomspace_Value(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7opencog_9atomspace_LinkValue *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7opencog_9atomspace_Value*)__pyx_vtabptr_7opencog_9atomspace_LinkValue;
  return o;
}

static PyMethodDef __pyx_methods_7opencog_9atomspace_LinkValue[] = {
  {"to_list", (PyCFunction)__pyx_pw_7opencog_9atomspace_9LinkValue_1to_list, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7opencog_9atomspace_9LinkValue_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7opencog_9atomspace_9LinkValue_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7opencog_9atomspace_LinkValue = {
  PyVarObject_HEAD_INIT(0, 0)
  "opencog.atomspace.LinkValue", /*tp_name*/
  sizeof(struct __pyx_obj_7opencog_9atomspace_LinkValue), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opencog_9atomspace_Value, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opencog_9atomspace_5Value_21__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opencog_9atomspace_5Value_19__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7opencog_9atomspace_Value, /*tp_traverse*/
  __pyx_tp_clear_7opencog_9atomspace_Value, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7opencog_9atomspace_LinkValue, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7opencog_9atomspace_5Value_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_7opencog_9atomspace_LinkValue, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__type_decl_context *__pyx_freelist_7opencog_9atomspace___pyx_scope_struct__type_decl_context[8];
static int __pyx_freecount_7opencog_9atomspace___pyx_scope_struct__type_decl_context = 0;

static PyObject *__pyx_tp_new_7opencog_9atomspace___pyx_scope_struct__type_decl_context(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7opencog_9atomspace___pyx_scope_struct__type_decl_context > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__type_decl_context)))) {
    o = (PyObject*)__pyx_freelist_7opencog_9atomspace___pyx_scope_struct__type_decl_context[--__pyx_freecount_7opencog_9atomspace___pyx_scope_struct__type_decl_context];
    memset(o, 0, sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__type_decl_context));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7opencog_9atomspace___pyx_scope_struct__type_decl_context(PyObject *o) {
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__type_decl_context *p = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__type_decl_context *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_module);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7opencog_9atomspace___pyx_scope_struct__type_decl_context < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__type_decl_context)))) {
    __pyx_freelist_7opencog_9atomspace___pyx_scope_struct__type_decl_context[__pyx_freecount_7opencog_9atomspace___pyx_scope_struct__type_decl_context++] = ((struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__type_decl_context *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_7opencog_9atomspace___pyx_scope_struct__type_decl_context(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__type_decl_context *p = (struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__type_decl_context *)o;
  if (p->__pyx_v_module) {
    e = (*v)(p->__pyx_v_module, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_7opencog_9atomspace___pyx_scope_struct__type_decl_context = {
  PyVarObject_HEAD_INIT(0, 0)
  "opencog.atomspace.__pyx_scope_struct__type_decl_context", /*tp_name*/
  sizeof(struct __pyx_obj_7opencog_9atomspace___pyx_scope_struct__type_decl_context), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7opencog_9atomspace___pyx_scope_struct__type_decl_context, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7opencog_9atomspace___pyx_scope_struct__type_decl_context, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7opencog_9atomspace___pyx_scope_struct__type_decl_context, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_atomspace(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_atomspace},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "atomspace",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_AssertionError, __pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 0, 1, 1},
  {&__pyx_n_s_Atom, __pyx_k_Atom, sizeof(__pyx_k_Atom), 0, 0, 1, 1},
  {&__pyx_n_s_AtomSpace, __pyx_k_AtomSpace, sizeof(__pyx_k_AtomSpace), 0, 0, 1, 1},
  {&__pyx_kp_u_AtomSpace_addr, __pyx_k_AtomSpace_addr, sizeof(__pyx_k_AtomSpace_addr), 0, 1, 0, 0},
  {&__pyx_n_s_AttributeError, __pyx_k_AttributeError, sizeof(__pyx_k_AttributeError), 0, 0, 1, 1},
  {&__pyx_kp_u_Cannot_declare_types_for_already, __pyx_k_Cannot_declare_types_for_already, sizeof(__pyx_k_Cannot_declare_types_for_already), 0, 1, 0, 0},
  {&__pyx_n_s_FloatValue, __pyx_k_FloatValue, sizeof(__pyx_k_FloatValue), 0, 0, 1, 1},
  {&__pyx_kp_u_Got_blank_type_name_while_genera, __pyx_k_Got_blank_type_name_while_genera, sizeof(__pyx_k_Got_blank_type_name_while_genera), 0, 1, 0, 0},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
  {&__pyx_n_s_Link, __pyx_k_Link, sizeof(__pyx_k_Link), 0, 0, 1, 1},
  {&__pyx_n_s_LinkValue, __pyx_k_LinkValue, sizeof(__pyx_k_LinkValue), 0, 0, 1, 1},
  {&__pyx_kp_u_Links_can_t_have_names, __pyx_k_Links_can_t_have_names, sizeof(__pyx_k_Links_can_t_have_names), 0, 1, 0, 0},
  {&__pyx_n_u_NO_TYPE, __pyx_k_NO_TYPE, sizeof(__pyx_k_NO_TYPE), 0, 1, 0, 1},
  {&__pyx_kp_u_Need_Atom_object, __pyx_k_Need_Atom_object, sizeof(__pyx_k_Need_Atom_object), 0, 1, 0, 0},
  {&__pyx_n_s_Node, __pyx_k_Node, sizeof(__pyx_k_Node), 0, 0, 1, 1},
  {&__pyx_kp_u_Nodes_can_t_have_outgoing_sets, __pyx_k_Nodes_can_t_have_outgoing_sets, sizeof(__pyx_k_Nodes_can_t_have_outgoing_sets), 0, 1, 0, 0},
  {&__pyx_n_s_NotImplemented, __pyx_k_NotImplemented, sizeof(__pyx_k_NotImplemented), 0, 0, 1, 1},
  {&__pyx_kp_u_Only_Atom_instances_are_comparab, __pyx_k_Only_Atom_instances_are_comparab, sizeof(__pyx_k_Only_Atom_instances_are_comparab), 0, 1, 0, 0},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_PtrHolder, __pyx_k_PtrHolder, sizeof(__pyx_k_PtrHolder), 0, 0, 1, 1},
  {&__pyx_kp_u_PtrHolder_contains_NULL_referenc, __pyx_k_PtrHolder_contains_NULL_referenc, sizeof(__pyx_k_PtrHolder_contains_NULL_referenc), 0, 1, 0, 0},
  {&__pyx_kp_u_Python_API_for, __pyx_k_Python_API_for, sizeof(__pyx_k_Python_API_for), 0, 1, 0, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_StringValue, __pyx_k_StringValue, sizeof(__pyx_k_StringValue), 0, 0, 1, 1},
  {&__pyx_n_s_TruthValue, __pyx_k_TruthValue, sizeof(__pyx_k_TruthValue), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_u_Type_is_not_supported, __pyx_k_Type_is_not_supported, sizeof(__pyx_k_Type_is_not_supported), 0, 1, 0, 0},
  {&__pyx_kp_u_UTF_8, __pyx_k_UTF_8, sizeof(__pyx_k_UTF_8), 0, 1, 0, 0},
  {&__pyx_n_s_Value, __pyx_k_Value, sizeof(__pyx_k_Value), 0, 0, 1, 1},
  {&__pyx_kp_u_Value_can_be_compared_using_Py_E, __pyx_k_Value_can_be_compared_using_Py_E, sizeof(__pyx_k_Value_can_be_compared_using_Py_E), 0, 1, 0, 0},
  {&__pyx_kp_u_Value_cannot_be_compared_with, __pyx_k_Value_cannot_be_compared_with, sizeof(__pyx_k_Value_cannot_be_compared_with), 0, 1, 0, 0},
  {&__pyx_kp_u__10, __pyx_k__10, sizeof(__pyx_k__10), 0, 1, 0, 0},
  {&__pyx_kp_u__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0, 0},
  {&__pyx_kp_u__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 0},
  {&__pyx_n_s_add_link, __pyx_k_add_link, sizeof(__pyx_k_add_link), 0, 0, 1, 1},
  {&__pyx_n_s_add_node, __pyx_k_add_node, sizeof(__pyx_k_add_node), 0, 0, 1, 1},
  {&__pyx_n_s_addr, __pyx_k_addr, sizeof(__pyx_k_addr), 0, 0, 1, 1},
  {&__pyx_n_s_arg, __pyx_k_arg, sizeof(__pyx_k_arg), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_asp, __pyx_k_asp, sizeof(__pyx_k_asp), 0, 0, 1, 1},
  {&__pyx_n_s_atom, __pyx_k_atom, sizeof(__pyx_k_atom), 0, 0, 1, 1},
  {&__pyx_n_s_atom_name, __pyx_k_atom_name, sizeof(__pyx_k_atom_name), 0, 0, 1, 1},
  {&__pyx_kp_u_atom_tv_property_needs_a_TruthVa, __pyx_k_atom_tv_property_needs_a_TruthVa, sizeof(__pyx_k_atom_tv_property_needs_a_TruthVa), 0, 1, 0, 0},
  {&__pyx_n_u_atom_types, __pyx_k_atom_types, sizeof(__pyx_k_atom_types), 0, 1, 0, 1},
  {&__pyx_n_s_atomspace, __pyx_k_atomspace, sizeof(__pyx_k_atomspace), 0, 0, 1, 1},
  {&__pyx_n_s_begin_type_decls, __pyx_k_begin_type_decls, sizeof(__pyx_k_begin_type_decls), 0, 0, 1, 1},
  {&__pyx_kp_u_cAtom_returned_NULL_TruthValue_p, __pyx_k_cAtom_returned_NULL_TruthValue_p, sizeof(__pyx_k_cAtom_returned_NULL_TruthValue_p), 0, 1, 0, 0},
  {&__pyx_n_s_c_ptr, __pyx_k_c_ptr, sizeof(__pyx_k_c_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_confidence, __pyx_k_confidence, sizeof(__pyx_k_confidence), 0, 0, 1, 1},
  {&__pyx_n_s_contextlib, __pyx_k_contextlib, sizeof(__pyx_k_contextlib), 0, 0, 1, 1},
  {&__pyx_n_s_contextmanager, __pyx_k_contextmanager, sizeof(__pyx_k_contextmanager), 0, 0, 1, 1},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_n_s_createFloatValue, __pyx_k_createFloatValue, sizeof(__pyx_k_createFloatValue), 0, 0, 1, 1},
  {&__pyx_n_s_createLinkValue, __pyx_k_createLinkValue, sizeof(__pyx_k_createLinkValue), 0, 0, 1, 1},
  {&__pyx_n_s_createStringValue, __pyx_k_createStringValue, sizeof(__pyx_k_createStringValue), 0, 0, 1, 1},
  {&__pyx_n_s_createTruthValue, __pyx_k_createTruthValue, sizeof(__pyx_k_createTruthValue), 0, 0, 1, 1},
  {&__pyx_n_s_create_child_atomspace, __pyx_k_create_child_atomspace, sizeof(__pyx_k_create_child_atomspace), 0, 0, 1, 1},
  {&__pyx_n_s_decl_type, __pyx_k_decl_type, sizeof(__pyx_k_decl_type), 0, 0, 1, 1},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end_type_decls, __pyx_k_end_type_decls, sizeof(__pyx_k_end_type_decls), 0, 0, 1, 1},
  {&__pyx_n_s_eq, __pyx_k_eq, sizeof(__pyx_k_eq), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_get_atoms_by_type, __pyx_k_get_atoms_by_type, sizeof(__pyx_k_get_atoms_by_type), 0, 0, 1, 1},
  {&__pyx_n_s_get_out, __pyx_k_get_out, sizeof(__pyx_k_get_out), 0, 0, 1, 1},
  {&__pyx_n_s_get_refreshed_types, __pyx_k_get_refreshed_types, sizeof(__pyx_k_get_refreshed_types), 0, 0, 1, 1},
  {&__pyx_n_s_get_type, __pyx_k_get_type, sizeof(__pyx_k_get_type), 0, 0, 1, 1},
  {&__pyx_n_s_get_type_name, __pyx_k_get_type_name, sizeof(__pyx_k_get_type_name), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_hex, __pyx_k_hex, sizeof(__pyx_k_hex), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_include_incoming, __pyx_k_include_incoming, sizeof(__pyx_k_include_incoming), 0, 0, 1, 1},
  {&__pyx_n_s_include_outgoing, __pyx_k_include_outgoing, sizeof(__pyx_k_include_outgoing), 0, 0, 1, 1},
  {&__pyx_n_s_incoming, __pyx_k_incoming, sizeof(__pyx_k_incoming), 0, 0, 1, 1},
  {&__pyx_n_s_is_a, __pyx_k_is_a, sizeof(__pyx_k_is_a), 0, 0, 1, 1},
  {&__pyx_n_s_is_atom, __pyx_k_is_atom, sizeof(__pyx_k_is_atom), 0, 0, 1, 1},
  {&__pyx_kp_u_is_not_implemented_yet, __pyx_k_is_not_implemented_yet, sizeof(__pyx_k_is_not_implemented_yet), 0, 1, 0, 0},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_kp_u_key_should_be_an_instance_of_Ato, __pyx_k_key_should_be_an_instance_of_Ato, sizeof(__pyx_k_key_should_be_an_instance_of_Ato), 0, 1, 0, 0},
  {&__pyx_n_s_long_string, __pyx_k_long_string, sizeof(__pyx_k_long_string), 0, 0, 1, 1},
  {&__pyx_n_s_lt, __pyx_k_lt, sizeof(__pyx_k_lt), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mean, __pyx_k_mean, sizeof(__pyx_k_mean), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_modules, __pyx_k_modules, sizeof(__pyx_k_modules), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_u_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 1, 0, 0},
  {&__pyx_n_s_name_3, __pyx_k_name_3, sizeof(__pyx_k_name_3), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_opencog_atomspace, __pyx_k_opencog_atomspace, sizeof(__pyx_k_opencog_atomspace), 0, 0, 1, 1},
  {&__pyx_n_s_out, __pyx_k_out, sizeof(__pyx_k_out), 0, 0, 1, 1},
  {&__pyx_n_s_outgoing, __pyx_k_outgoing, sizeof(__pyx_k_outgoing), 0, 0, 1, 1},
  {&__pyx_kp_u_outgoing_set_should_contain_atom, __pyx_k_outgoing_set_should_contain_atom, sizeof(__pyx_k_outgoing_set_should_contain_atom), 0, 1, 0, 0},
  {&__pyx_n_s_parent, __pyx_k_parent, sizeof(__pyx_k_parent), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_ptr_holder, __pyx_k_ptr_holder, sizeof(__pyx_k_ptr_holder), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_FloatValue, __pyx_k_pyx_unpickle_FloatValue, sizeof(__pyx_k_pyx_unpickle_FloatValue), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_LinkValue, __pyx_k_pyx_unpickle_LinkValue, sizeof(__pyx_k_pyx_unpickle_LinkValue), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_StringValue, __pyx_k_pyx_unpickle_StringValue, sizeof(__pyx_k_pyx_unpickle_StringValue), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_TruthValue, __pyx_k_pyx_unpickle_TruthValue, sizeof(__pyx_k_pyx_unpickle_TruthValue), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Value, __pyx_k_pyx_unpickle_Value, sizeof(__pyx_k_pyx_unpickle_Value), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_recursive, __pyx_k_recursive, sizeof(__pyx_k_recursive), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_kp_s_self_asp_self_atomspace_cannot_b, __pyx_k_self_asp_self_atomspace_cannot_b, sizeof(__pyx_k_self_asp_self_atomspace_cannot_b), 0, 0, 1, 0},
  {&__pyx_kp_s_self_shared_ptr_cannot_be_conver, __pyx_k_self_shared_ptr_cannot_be_conver, sizeof(__pyx_k_self_shared_ptr_cannot_be_conver), 0, 0, 1, 0},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_short_string, __pyx_k_short_string, sizeof(__pyx_k_short_string), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_strength, __pyx_k_strength, sizeof(__pyx_k_strength), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_subtype, __pyx_k_subtype, sizeof(__pyx_k_subtype), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_t1, __pyx_k_t1, sizeof(__pyx_k_t1), 0, 0, 1, 1},
  {&__pyx_n_s_t2, __pyx_k_t2, sizeof(__pyx_k_t2), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_tv, __pyx_k_tv, sizeof(__pyx_k_tv), 0, 0, 1, 1},
  {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
  {&__pyx_n_s_type_decl_context, __pyx_k_type_decl_context, sizeof(__pyx_k_type_decl_context), 0, 0, 1, 1},
  {&__pyx_n_s_type_id, __pyx_k_type_id, sizeof(__pyx_k_type_id), 0, 0, 1, 1},
  {&__pyx_n_s_types, __pyx_k_types, sizeof(__pyx_k_types), 0, 0, 1, 1},
  {&__pyx_kp_u_unexpected_comparison_kind_0, __pyx_k_unexpected_comparison_kind_0, sizeof(__pyx_k_unexpected_comparison_kind_0), 0, 1, 0, 0},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_kp_s_workspaces_opencog_central_atom, __pyx_k_workspaces_opencog_central_atom, sizeof(__pyx_k_workspaces_opencog_central_atom), 0, 0, 1, 0},
  {&__pyx_kp_s_workspaces_opencog_central_atom_2, __pyx_k_workspaces_opencog_central_atom_2, sizeof(__pyx_k_workspaces_opencog_central_atom_2), 0, 0, 1, 0},
  {&__pyx_kp_s_workspaces_opencog_central_atom_3, __pyx_k_workspaces_opencog_central_atom_3, sizeof(__pyx_k_workspaces_opencog_central_atom_3), 0, 0, 1, 0},
  {&__pyx_kp_s_workspaces_opencog_central_atom_4, __pyx_k_workspaces_opencog_central_atom_4, sizeof(__pyx_k_workspaces_opencog_central_atom_4), 0, 0, 1, 0},
  {&__pyx_kp_s_workspaces_opencog_central_atom_5, __pyx_k_workspaces_opencog_central_atom_5, sizeof(__pyx_k_workspaces_opencog_central_atom_5), 0, 0, 1, 0},
  {&__pyx_kp_s_workspaces_opencog_central_atom_6, __pyx_k_workspaces_opencog_central_atom_6, sizeof(__pyx_k_workspaces_opencog_central_atom_6), 0, 0, 1, 0},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_builtin_AttributeError = __Pyx_GetBuiltinName(__pyx_n_s_AttributeError); if (!__pyx_builtin_AttributeError) __PYX_ERR(1, 29, __pyx_L1_error)
  __pyx_builtin_NotImplemented = __Pyx_GetBuiltinName(__pyx_n_s_NotImplemented); if (!__pyx_builtin_NotImplemented) __PYX_ERR(2, 77, __pyx_L1_error)
  __pyx_builtin_AssertionError = __Pyx_GetBuiltinName(__pyx_n_s_AssertionError); if (!__pyx_builtin_AssertionError) __PYX_ERR(2, 150, __pyx_L1_error)
  __pyx_builtin_hex = __Pyx_GetBuiltinName(__pyx_n_s_hex); if (!__pyx_builtin_hex) __PYX_ERR(2, 204, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(3, 147, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(4, 51, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.shared_ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.shared_ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_self_shared_ptr_cannot_be_conver); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("self.shared_ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.shared_ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_self_shared_ptr_cannot_be_conver); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "../../../../opencog/cython/opencog/value.pyx":29
 *     def __init__(self, ptr_holder):
 *         if (<PtrHolder>ptr_holder).shared_ptr.get() == NULL:
 *             raise AttributeError('PtrHolder contains NULL reference')             # <<<<<<<<<<<<<<
 *         self.ptr_holder = ptr_holder
 * 
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_PtrHolder_contains_NULL_referenc); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "../../../../opencog/cython/opencog/value.pyx":93
 *             return deref(self_ptr) != deref(other_ptr)
 *         else:
 *             raise TypeError('Value can be compared using '             # <<<<<<<<<<<<<<
 *                             + 'Py_EQ and Py_NE only')
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_Value_can_be_compared_using_Py_E); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":151
 *             assert isinstance(atom, Atom)
 *         except AssertionError:
 *             raise TypeError("Need Atom object")             # <<<<<<<<<<<<<<
 *         if self.atomspace.is_valid_handle(deref((<Atom>atom).handle)):
 *             return True
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_Need_Atom_object); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(2, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.asp,self.atomspace cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.asp,self.atomspace cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_self_asp_self_atomspace_cannot_b); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":4
 *     raise TypeError("self.asp,self.atomspace cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.asp,self.atomspace cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_self_asp_self_atomspace_cannot_b); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "../../../../opencog/cython/opencog/atom.pyx":50
 *         tvp = atom_ptr.getTruthValue()
 *         if (not tvp.get()):
 *             raise AttributeError('cAtom returned NULL TruthValue pointer')             # <<<<<<<<<<<<<<
 *         return createTruthValue(tvp.get().get_mean(), tvp.get().get_confidence())
 * 
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_cAtom_returned_NULL_TruthValue_p); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(3, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "../../../../opencog/cython/opencog/atom.pyx":58
 *             assert isinstance(truth_value, TruthValue)
 *         except AssertionError:
 *             raise TypeError("atom.tv property needs a TruthValue object")             # <<<<<<<<<<<<<<
 *         cdef cAtom* atom_ptr = self.handle.atom_ptr()
 *         if atom_ptr == NULL:   # avoid null-pointer deref
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_u_atom_tv_property_needs_a_TruthVa); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(3, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_tuple__16 = PyTuple_Pack(3, __pyx_int_81655694, __pyx_int_742357, __pyx_int_60460970); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":278
 *     return atom
 * 
 * def create_child_atomspace(object atomspace):             # <<<<<<<<<<<<<<
 *     cdef cValuePtr asp = createAtomSpace((<AtomSpace>(atomspace)).atomspace)
 *     cdef AtomSpace result = AtomSpace_factoid(asp)
 */
  __pyx_tuple__17 = PyTuple_Pack(3, __pyx_n_s_atomspace, __pyx_n_s_asp, __pyx_n_s_result); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(2, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_workspaces_opencog_central_atom, __pyx_n_s_create_child_atomspace, 278, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(2, 278, __pyx_L1_error)

  /* "../../../../opencog/cython/opencog/truth_value.pyx":5
 * # from atomspace cimport cTruthValue, cSimpleTruthValue, tv_ptr, TruthValue, Value
 * 
 * def createTruthValue(strength = 1.0, confidence = 1.0):             # <<<<<<<<<<<<<<
 *     cdef tv_ptr c_ptr
 *     c_ptr.reset(new cSimpleTruthValue(strength, confidence))
 */
  __pyx_tuple__19 = PyTuple_Pack(3, __pyx_n_s_strength, __pyx_n_s_confidence, __pyx_n_s_c_ptr); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(5, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_workspaces_opencog_central_atom_2, __pyx_n_s_createTruthValue, 5, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(5, 5, __pyx_L1_error)

  /* "../../../../opencog/cython/opencog/float_value.pyx":2
 * 
 * def createFloatValue(arg):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cFloatValue] c_ptr
 *     if (isinstance(arg, list)):
 */
  __pyx_tuple__21 = PyTuple_Pack(2, __pyx_n_s_arg, __pyx_n_s_c_ptr); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(6, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_workspaces_opencog_central_atom_3, __pyx_n_s_createFloatValue, 2, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(6, 2, __pyx_L1_error)

  /* "../../../../opencog/cython/opencog/string_value.pyx":2
 * 
 * def createStringValue(arg):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cStringValue] c_ptr
 *     if (isinstance(arg, list)):
 */
  __pyx_tuple__23 = PyTuple_Pack(2, __pyx_n_s_arg, __pyx_n_s_c_ptr); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(7, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__23, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_workspaces_opencog_central_atom_4, __pyx_n_s_createStringValue, 2, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(7, 2, __pyx_L1_error)

  /* "../../../../opencog/cython/opencog/nameserver.pyx":28
 * 
 * # Atom type methods.
 * def get_type_name(t):             # <<<<<<<<<<<<<<
 *     return c_get_type_name(t).decode('UTF-8')
 * 
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_n_s_t); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(4, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_workspaces_opencog_central_atom_5, __pyx_n_s_get_type_name, 28, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(4, 28, __pyx_L1_error)

  /* "../../../../opencog/cython/opencog/nameserver.pyx":31
 *     return c_get_type_name(t).decode('UTF-8')
 * 
 * def get_type(name):             # <<<<<<<<<<<<<<
 *     return c_get_named_type(name)
 * 
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_n_s_name); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(4, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_workspaces_opencog_central_atom_5, __pyx_n_s_get_type, 31, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(4, 31, __pyx_L1_error)

  /* "../../../../opencog/cython/opencog/nameserver.pyx":34
 *     return c_get_named_type(name)
 * 
 * def is_a(Type t1, Type t2):             # <<<<<<<<<<<<<<
 *     return nameserver().isA(t1,t2)
 * 
 */
  __pyx_tuple__29 = PyTuple_Pack(2, __pyx_n_s_t1, __pyx_n_s_t2); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(4, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_workspaces_opencog_central_atom_5, __pyx_n_s_is_a, 34, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(4, 34, __pyx_L1_error)

  /* "../../../../opencog/cython/opencog/nameserver.pyx":61
 * types = type('atom_types', (), generate_type_module())
 * 
 * def begin_type_decls(module):             # <<<<<<<<<<<<<<
 *     return nameserver().beginTypeDecls(module.encode('UTF-8'))
 * 
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_n_s_module); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(4, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_workspaces_opencog_central_atom_5, __pyx_n_s_begin_type_decls, 61, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(4, 61, __pyx_L1_error)

  /* "../../../../opencog/cython/opencog/nameserver.pyx":64
 *     return nameserver().beginTypeDecls(module.encode('UTF-8'))
 * 
 * def end_type_decls():             # <<<<<<<<<<<<<<
 *     nameserver().endTypeDecls()
 * 
 */
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_workspaces_opencog_central_atom_5, __pyx_n_s_end_type_decls, 64, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(4, 64, __pyx_L1_error)

  /* "../../../../opencog/cython/opencog/nameserver.pyx":68
 * 
 * @contextmanager
 * def type_decl_context(module):             # <<<<<<<<<<<<<<
 *     if begin_type_decls(module):
 *         raise RuntimeError('Cannot declare types for already loaded module: ' +
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_n_s_module); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(4, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_workspaces_opencog_central_atom_5, __pyx_n_s_type_decl_context, 68, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(4, 68, __pyx_L1_error)

  /* "../../../../opencog/cython/opencog/nameserver.pyx":77
 *         end_type_decls()
 * 
 * def decl_type(parent, name):             # <<<<<<<<<<<<<<
 *     type_id = nameserver().declType(parent, name.encode('UTF-8'))
 *     setattr(types, name, type_id)
 */
  __pyx_tuple__35 = PyTuple_Pack(3, __pyx_n_s_parent, __pyx_n_s_name, __pyx_n_s_type_id); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(4, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_workspaces_opencog_central_atom_5, __pyx_n_s_decl_type, 77, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) __PYX_ERR(4, 77, __pyx_L1_error)

  /* "../../../../opencog/cython/opencog/nameserver.pyx":85
 * # additional atom types were declared in other atomspace modules.
 * # i.e. when new types were added to the C++ nameserver.
 * def get_refreshed_types():             # <<<<<<<<<<<<<<
 *     global types
 *     types = type('atom_types', (), generate_type_module())
 */
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_workspaces_opencog_central_atom_5, __pyx_n_s_get_refreshed_types, 85, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(4, 85, __pyx_L1_error)

  /* "../../../../opencog/cython/opencog/link_value.pyx":2
 * 
 * def createLinkValue(arg):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cLinkValue] c_ptr
 *     if (isinstance(arg, list)):
 */
  __pyx_tuple__38 = PyTuple_Pack(2, __pyx_n_s_arg, __pyx_n_s_c_ptr); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(8, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_workspaces_opencog_central_atom_6, __pyx_n_s_createLinkValue, 2, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(8, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_Value(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__40 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Value, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_tuple__42 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_TruthValue, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_tuple__44 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_FloatValue, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_tuple__46 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_StringValue, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_tuple__48 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_LinkValue, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(9, 1, __pyx_L1_error);
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(9, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(9, 1, __pyx_L1_error)
  __pyx_int_742357 = PyInt_FromLong(742357L); if (unlikely(!__pyx_int_742357)) __PYX_ERR(9, 1, __pyx_L1_error)
  __pyx_int_60460970 = PyInt_FromLong(60460970L); if (unlikely(!__pyx_int_60460970)) __PYX_ERR(9, 1, __pyx_L1_error)
  __pyx_int_81655694 = PyInt_FromLong(81655694L); if (unlikely(!__pyx_int_81655694)) __PYX_ERR(9, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("atom_list_to_vector", (void (*)(void))__pyx_f_7opencog_9atomspace_atom_list_to_vector, "std::vector<opencog::Handle>  (PyObject *)") < 0) __PYX_ERR(9, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("AtomSpace_factory", (void (*)(void))__pyx_f_7opencog_9atomspace_AtomSpace_factory, "PyObject *(opencog::AtomSpace *)") < 0) __PYX_ERR(9, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("AtomSpace_factoid", (void (*)(void))__pyx_f_7opencog_9atomspace_AtomSpace_factoid, "PyObject *(opencog::ValuePtr)") < 0) __PYX_ERR(9, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("create_python_value_from_c_value", (void (*)(void))__pyx_f_7opencog_9atomspace_create_python_value_from_c_value, "PyObject *(opencog::ValuePtr const &)") < 0) __PYX_ERR(9, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("get_path_as_string", (void (*)(void))__pyx_f_7opencog_9atomspace_get_path_as_string, "std::string (void)") < 0) __PYX_ERR(9, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("py_atomspace", (void (*)(void))__pyx_f_7opencog_9atomspace_py_atomspace, "PyObject *(opencog::AtomSpace *)") < 0) __PYX_ERR(9, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("py_atom", (void (*)(void))__pyx_f_7opencog_9atomspace_py_atom, "PyObject *(opencog::Handle const &)") < 0) __PYX_ERR(9, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_7opencog_9atomspace_PtrHolder = &__pyx_vtable_7opencog_9atomspace_PtrHolder;
  __pyx_vtable_7opencog_9atomspace_PtrHolder.create = (struct __pyx_obj_7opencog_9atomspace_PtrHolder *(*)(std::shared_ptr<void>  &))__pyx_f_7opencog_9atomspace_9PtrHolder_create;
  if (PyType_Ready(&__pyx_type_7opencog_9atomspace_PtrHolder) < 0) __PYX_ERR(1, 5, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7opencog_9atomspace_PtrHolder.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7opencog_9atomspace_PtrHolder.tp_dictoffset && __pyx_type_7opencog_9atomspace_PtrHolder.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7opencog_9atomspace_PtrHolder.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7opencog_9atomspace_PtrHolder.tp_dict, __pyx_vtabptr_7opencog_9atomspace_PtrHolder) < 0) __PYX_ERR(1, 5, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PtrHolder, (PyObject *)&__pyx_type_7opencog_9atomspace_PtrHolder) < 0) __PYX_ERR(1, 5, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opencog_9atomspace_PtrHolder) < 0) __PYX_ERR(1, 5, __pyx_L1_error)
  __pyx_ptype_7opencog_9atomspace_PtrHolder = &__pyx_type_7opencog_9atomspace_PtrHolder;
  __pyx_vtabptr_7opencog_9atomspace_Value = &__pyx_vtable_7opencog_9atomspace_Value;
  __pyx_vtable_7opencog_9atomspace_Value.get_c_value_ptr = (opencog::ValuePtr (*)(struct __pyx_obj_7opencog_9atomspace_Value *))__pyx_f_7opencog_9atomspace_5Value_get_c_value_ptr;
  __pyx_vtable_7opencog_9atomspace_Value.create = (struct __pyx_obj_7opencog_9atomspace_Value *(*)(opencog::ValuePtr &))__pyx_f_7opencog_9atomspace_5Value_create;
  if (PyType_Ready(&__pyx_type_7opencog_9atomspace_Value) < 0) __PYX_ERR(1, 19, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7opencog_9atomspace_Value.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7opencog_9atomspace_Value.tp_dictoffset && __pyx_type_7opencog_9atomspace_Value.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7opencog_9atomspace_Value.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7opencog_9atomspace_Value.tp_dict, __pyx_vtabptr_7opencog_9atomspace_Value) < 0) __PYX_ERR(1, 19, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Value, (PyObject *)&__pyx_type_7opencog_9atomspace_Value) < 0) __PYX_ERR(1, 19, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opencog_9atomspace_Value) < 0) __PYX_ERR(1, 19, __pyx_L1_error)
  __pyx_ptype_7opencog_9atomspace_Value = &__pyx_type_7opencog_9atomspace_Value;
  __pyx_vtabptr_7opencog_9atomspace_TruthValue = &__pyx_vtable_7opencog_9atomspace_TruthValue;
  __pyx_vtable_7opencog_9atomspace_TruthValue.__pyx_base = *__pyx_vtabptr_7opencog_9atomspace_Value;
  __pyx_vtable_7opencog_9atomspace_TruthValue._mean = (__pyx_t_7opencog_9atomspace_strength_t (*)(struct __pyx_obj_7opencog_9atomspace_TruthValue *))__pyx_f_7opencog_9atomspace_10TruthValue__mean;
  __pyx_vtable_7opencog_9atomspace_TruthValue._confidence = (__pyx_t_7opencog_9atomspace_confidence_t (*)(struct __pyx_obj_7opencog_9atomspace_TruthValue *))__pyx_f_7opencog_9atomspace_10TruthValue__confidence;
  __pyx_vtable_7opencog_9atomspace_TruthValue._count = (__pyx_t_7opencog_9atomspace_count_t (*)(struct __pyx_obj_7opencog_9atomspace_TruthValue *))__pyx_f_7opencog_9atomspace_10TruthValue__count;
  __pyx_vtable_7opencog_9atomspace_TruthValue._ptr = (const opencog::TruthValue *(*)(struct __pyx_obj_7opencog_9atomspace_TruthValue *))__pyx_f_7opencog_9atomspace_10TruthValue__ptr;
  __pyx_vtable_7opencog_9atomspace_TruthValue._tvptr = (opencog::TruthValuePtr *(*)(struct __pyx_obj_7opencog_9atomspace_TruthValue *))__pyx_f_7opencog_9atomspace_10TruthValue__tvptr;
  __pyx_type_7opencog_9atomspace_TruthValue.tp_base = __pyx_ptype_7opencog_9atomspace_Value;
  if (PyType_Ready(&__pyx_type_7opencog_9atomspace_TruthValue) < 0) __PYX_ERR(5, 10, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7opencog_9atomspace_TruthValue.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7opencog_9atomspace_TruthValue.tp_dictoffset && __pyx_type_7opencog_9atomspace_TruthValue.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7opencog_9atomspace_TruthValue.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7opencog_9atomspace_TruthValue.tp_dict, __pyx_vtabptr_7opencog_9atomspace_TruthValue) < 0) __PYX_ERR(5, 10, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_TruthValue, (PyObject *)&__pyx_type_7opencog_9atomspace_TruthValue) < 0) __PYX_ERR(5, 10, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opencog_9atomspace_TruthValue) < 0) __PYX_ERR(5, 10, __pyx_L1_error)
  __pyx_ptype_7opencog_9atomspace_TruthValue = &__pyx_type_7opencog_9atomspace_TruthValue;
  __pyx_vtabptr_7opencog_9atomspace_Atom = &__pyx_vtable_7opencog_9atomspace_Atom;
  __pyx_vtable_7opencog_9atomspace_Atom.__pyx_base = *__pyx_vtabptr_7opencog_9atomspace_Value;
  __pyx_vtable_7opencog_9atomspace_Atom.get_c_handle = (opencog::Handle (*)(struct __pyx_obj_7opencog_9atomspace_Atom *))__pyx_f_7opencog_9atomspace_4Atom_get_c_handle;
  __pyx_vtable_7opencog_9atomspace_Atom.createAtom = (struct __pyx_obj_7opencog_9atomspace_Atom *(*)(opencog::Handle &))__pyx_f_7opencog_9atomspace_4Atom_createAtom;
  __pyx_type_7opencog_9atomspace_Atom.tp_base = __pyx_ptype_7opencog_9atomspace_Value;
  if (PyType_Ready(&__pyx_type_7opencog_9atomspace_Atom) < 0) __PYX_ERR(3, 8, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7opencog_9atomspace_Atom.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7opencog_9atomspace_Atom.tp_dictoffset && __pyx_type_7opencog_9atomspace_Atom.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7opencog_9atomspace_Atom.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7opencog_9atomspace_Atom.tp_dict, __pyx_vtabptr_7opencog_9atomspace_Atom) < 0) __PYX_ERR(3, 8, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Atom, (PyObject *)&__pyx_type_7opencog_9atomspace_Atom) < 0) __PYX_ERR(3, 8, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opencog_9atomspace_Atom) < 0) __PYX_ERR(3, 8, __pyx_L1_error)
  __pyx_ptype_7opencog_9atomspace_Atom = &__pyx_type_7opencog_9atomspace_Atom;
  __pyx_vtabptr_7opencog_9atomspace_AtomSpace = &__pyx_vtable_7opencog_9atomspace_AtomSpace;
  __pyx_vtable_7opencog_9atomspace_AtomSpace.__pyx_base = *__pyx_vtabptr_7opencog_9atomspace_Value;
  __pyx_type_7opencog_9atomspace_AtomSpace.tp_base = __pyx_ptype_7opencog_9atomspace_Value;
  if (PyType_Ready(&__pyx_type_7opencog_9atomspace_AtomSpace) < 0) __PYX_ERR(2, 55, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7opencog_9atomspace_AtomSpace.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7opencog_9atomspace_AtomSpace.tp_dictoffset && __pyx_type_7opencog_9atomspace_AtomSpace.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7opencog_9atomspace_AtomSpace.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7opencog_9atomspace_AtomSpace, "__contains__"); if (unlikely(!wrapper)) __PYX_ERR(2, 55, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_22__contains__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_22__contains__.doc = __pyx_doc_7opencog_9atomspace_9AtomSpace_22__contains__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_22__contains__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7opencog_9atomspace_AtomSpace, "__str__"); if (unlikely(!wrapper)) __PYX_ERR(2, 55, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_24__str__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_24__str__.doc = __pyx_doc_7opencog_9atomspace_9AtomSpace_24__str__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_24__str__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7opencog_9atomspace_AtomSpace, "__len__"); if (unlikely(!wrapper)) __PYX_ERR(2, 55, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_26__len__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_26__len__.doc = __pyx_doc_7opencog_9atomspace_9AtomSpace_26__len__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_26__len__;
    }
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7opencog_9atomspace_AtomSpace, "__iter__"); if (unlikely(!wrapper)) __PYX_ERR(2, 55, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_28__iter__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_28__iter__.doc = __pyx_doc_7opencog_9atomspace_9AtomSpace_28__iter__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7opencog_9atomspace_9AtomSpace_28__iter__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_7opencog_9atomspace_AtomSpace.tp_dict, __pyx_vtabptr_7opencog_9atomspace_AtomSpace) < 0) __PYX_ERR(2, 55, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AtomSpace, (PyObject *)&__pyx_type_7opencog_9atomspace_AtomSpace) < 0) __PYX_ERR(2, 55, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opencog_9atomspace_AtomSpace) < 0) __PYX_ERR(2, 55, __pyx_L1_error)
  __pyx_ptype_7opencog_9atomspace_AtomSpace = &__pyx_type_7opencog_9atomspace_AtomSpace;
  __pyx_vtabptr_7opencog_9atomspace_FloatValue = &__pyx_vtable_7opencog_9atomspace_FloatValue;
  __pyx_vtable_7opencog_9atomspace_FloatValue.__pyx_base = *__pyx_vtabptr_7opencog_9atomspace_Value;
  __pyx_vtable_7opencog_9atomspace_FloatValue.list_of_doubles_to_vector = (std::vector<double>  (*)(PyObject *))__pyx_f_7opencog_9atomspace_10FloatValue_list_of_doubles_to_vector;
  __pyx_vtable_7opencog_9atomspace_FloatValue.vector_of_doubles_to_list = (PyObject *(*)(std::vector<double>  const *))__pyx_f_7opencog_9atomspace_10FloatValue_vector_of_doubles_to_list;
  __pyx_type_7opencog_9atomspace_FloatValue.tp_base = __pyx_ptype_7opencog_9atomspace_Value;
  if (PyType_Ready(&__pyx_type_7opencog_9atomspace_FloatValue) < 0) __PYX_ERR(6, 10, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7opencog_9atomspace_FloatValue.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7opencog_9atomspace_FloatValue.tp_dictoffset && __pyx_type_7opencog_9atomspace_FloatValue.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7opencog_9atomspace_FloatValue.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7opencog_9atomspace_FloatValue.tp_dict, __pyx_vtabptr_7opencog_9atomspace_FloatValue) < 0) __PYX_ERR(6, 10, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FloatValue, (PyObject *)&__pyx_type_7opencog_9atomspace_FloatValue) < 0) __PYX_ERR(6, 10, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opencog_9atomspace_FloatValue) < 0) __PYX_ERR(6, 10, __pyx_L1_error)
  __pyx_ptype_7opencog_9atomspace_FloatValue = &__pyx_type_7opencog_9atomspace_FloatValue;
  __pyx_vtabptr_7opencog_9atomspace_StringValue = &__pyx_vtable_7opencog_9atomspace_StringValue;
  __pyx_vtable_7opencog_9atomspace_StringValue.__pyx_base = *__pyx_vtabptr_7opencog_9atomspace_Value;
  __pyx_vtable_7opencog_9atomspace_StringValue.list_of_strings_to_vector = (std::vector<std::string>  (*)(PyObject *))__pyx_f_7opencog_9atomspace_11StringValue_list_of_strings_to_vector;
  __pyx_vtable_7opencog_9atomspace_StringValue.vector_of_strings_to_list = (PyObject *(*)(std::vector<std::string>  const *))__pyx_f_7opencog_9atomspace_11StringValue_vector_of_strings_to_list;
  __pyx_type_7opencog_9atomspace_StringValue.tp_base = __pyx_ptype_7opencog_9atomspace_Value;
  if (PyType_Ready(&__pyx_type_7opencog_9atomspace_StringValue) < 0) __PYX_ERR(7, 10, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7opencog_9atomspace_StringValue.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7opencog_9atomspace_StringValue.tp_dictoffset && __pyx_type_7opencog_9atomspace_StringValue.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7opencog_9atomspace_StringValue.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7opencog_9atomspace_StringValue.tp_dict, __pyx_vtabptr_7opencog_9atomspace_StringValue) < 0) __PYX_ERR(7, 10, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StringValue, (PyObject *)&__pyx_type_7opencog_9atomspace_StringValue) < 0) __PYX_ERR(7, 10, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opencog_9atomspace_StringValue) < 0) __PYX_ERR(7, 10, __pyx_L1_error)
  __pyx_ptype_7opencog_9atomspace_StringValue = &__pyx_type_7opencog_9atomspace_StringValue;
  __pyx_vtabptr_7opencog_9atomspace_LinkValue = &__pyx_vtable_7opencog_9atomspace_LinkValue;
  __pyx_vtable_7opencog_9atomspace_LinkValue.__pyx_base = *__pyx_vtabptr_7opencog_9atomspace_Value;
  __pyx_vtable_7opencog_9atomspace_LinkValue.list_of_values_to_vector = (std::vector<opencog::ValuePtr>  (*)(PyObject *))__pyx_f_7opencog_9atomspace_9LinkValue_list_of_values_to_vector;
  __pyx_vtable_7opencog_9atomspace_LinkValue.vector_of_values_to_list = (PyObject *(*)(std::vector<opencog::ValuePtr>  const *))__pyx_f_7opencog_9atomspace_9LinkValue_vector_of_values_to_list;
  __pyx_type_7opencog_9atomspace_LinkValue.tp_base = __pyx_ptype_7opencog_9atomspace_Value;
  if (PyType_Ready(&__pyx_type_7opencog_9atomspace_LinkValue) < 0) __PYX_ERR(8, 10, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7opencog_9atomspace_LinkValue.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7opencog_9atomspace_LinkValue.tp_dictoffset && __pyx_type_7opencog_9atomspace_LinkValue.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7opencog_9atomspace_LinkValue.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7opencog_9atomspace_LinkValue.tp_dict, __pyx_vtabptr_7opencog_9atomspace_LinkValue) < 0) __PYX_ERR(8, 10, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LinkValue, (PyObject *)&__pyx_type_7opencog_9atomspace_LinkValue) < 0) __PYX_ERR(8, 10, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7opencog_9atomspace_LinkValue) < 0) __PYX_ERR(8, 10, __pyx_L1_error)
  __pyx_ptype_7opencog_9atomspace_LinkValue = &__pyx_type_7opencog_9atomspace_LinkValue;
  if (PyType_Ready(&__pyx_type_7opencog_9atomspace___pyx_scope_struct__type_decl_context) < 0) __PYX_ERR(4, 68, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7opencog_9atomspace___pyx_scope_struct__type_decl_context.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7opencog_9atomspace___pyx_scope_struct__type_decl_context.tp_dictoffset && __pyx_type_7opencog_9atomspace___pyx_scope_struct__type_decl_context.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7opencog_9atomspace___pyx_scope_struct__type_decl_context.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_7opencog_9atomspace___pyx_scope_struct__type_decl_context = &__pyx_type_7opencog_9atomspace___pyx_scope_struct__type_decl_context;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(10, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(11, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(12, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initatomspace(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initatomspace(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_atomspace(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_atomspace(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_atomspace(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'atomspace' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_atomspace(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(9, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(9, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(9, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(9, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(9, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(9, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(9, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(9, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(9, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(9, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("atomspace", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(9, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(9, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(9, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(9, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(9, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(9, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(9, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_opencog__atomspace) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_3, __pyx_n_s_main) < 0) __PYX_ERR(9, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(9, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "opencog.atomspace")) {
      if (unlikely(PyDict_SetItemString(modules, "opencog.atomspace", __pyx_m) < 0)) __PYX_ERR(9, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(9, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(9, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() < 0)) __PYX_ERR(9, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(9, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(9, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(9, 1, __pyx_L1_error)
  #endif

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":234
 * 
 *     @classmethod
 *     def include_incoming(cls, atoms):             # <<<<<<<<<<<<<<
 *         """
 *         Deprecated. Who uses this? Anyone? Is it useful for anyone?
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_7opencog_9atomspace_AtomSpace, __pyx_n_s_include_incoming); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":233
 *         return convert_handle_seq_to_python_list(handle_vector)
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def include_incoming(cls, atoms):
 *         """
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7opencog_9atomspace_AtomSpace->tp_dict, __pyx_n_s_include_incoming, __pyx_t_2) < 0) __PYX_ERR(2, 234, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7opencog_9atomspace_AtomSpace);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":246
 * 
 *     @classmethod
 *     def include_outgoing(cls, atoms):             # <<<<<<<<<<<<<<
 *         """
 *         Deprecated. Who uses this? Anyone? Is it useful for anyone?
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7opencog_9atomspace_AtomSpace, __pyx_n_s_include_outgoing); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":245
 *                 [item for sublist in [atom.incoming for atom in atoms if len(atom.incoming) > 0] for item in sublist]))
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def include_outgoing(cls, atoms):
 *         """
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7opencog_9atomspace_AtomSpace->tp_dict, __pyx_n_s_include_outgoing, __pyx_t_1) < 0) __PYX_ERR(2, 246, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7opencog_9atomspace_AtomSpace);

  /* "../../../../opencog/cython/opencog/atomspace_details.pyx":278
 *     return atom
 * 
 * def create_child_atomspace(object atomspace):             # <<<<<<<<<<<<<<
 *     cdef cValuePtr asp = createAtomSpace((<AtomSpace>(atomspace)).atomspace)
 *     cdef AtomSpace result = AtomSpace_factoid(asp)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7opencog_9atomspace_1create_child_atomspace, NULL, __pyx_n_s_opencog_atomspace); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_create_child_atomspace, __pyx_t_1) < 0) __PYX_ERR(2, 278, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/truth_value.pyx":5
 * # from atomspace cimport cTruthValue, cSimpleTruthValue, tv_ptr, TruthValue, Value
 * 
 * def createTruthValue(strength = 1.0, confidence = 1.0):             # <<<<<<<<<<<<<<
 *     cdef tv_ptr c_ptr
 *     c_ptr.reset(new cSimpleTruthValue(strength, confidence))
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7opencog_9atomspace_3createTruthValue, NULL, __pyx_n_s_opencog_atomspace); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_createTruthValue, __pyx_t_1) < 0) __PYX_ERR(5, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/float_value.pyx":2
 * 
 * def createFloatValue(arg):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cFloatValue] c_ptr
 *     if (isinstance(arg, list)):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7opencog_9atomspace_5createFloatValue, NULL, __pyx_n_s_opencog_atomspace); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_createFloatValue, __pyx_t_1) < 0) __PYX_ERR(6, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/string_value.pyx":2
 * 
 * def createStringValue(arg):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cStringValue] c_ptr
 *     if (isinstance(arg, list)):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7opencog_9atomspace_7createStringValue, NULL, __pyx_n_s_opencog_atomspace); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_createStringValue, __pyx_t_1) < 0) __PYX_ERR(7, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":4
 * from libc.string cimport strcmp
 * from libcpp cimport string
 * import sys             # <<<<<<<<<<<<<<
 * from contextlib import contextmanager
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":5
 * from libcpp cimport string
 * import sys
 * from contextlib import contextmanager             # <<<<<<<<<<<<<<
 * 
 * # Dynamically construct a "types" module.
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_contextmanager);
  __Pyx_GIVEREF(__pyx_n_s_contextmanager);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_contextmanager);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_contextlib, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_contextmanager); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_contextmanager, __pyx_t_1) < 0) __PYX_ERR(4, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":28
 * 
 * # Atom type methods.
 * def get_type_name(t):             # <<<<<<<<<<<<<<
 *     return c_get_type_name(t).decode('UTF-8')
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_7opencog_9atomspace_9get_type_name, NULL, __pyx_n_s_opencog_atomspace); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_type_name, __pyx_t_2) < 0) __PYX_ERR(4, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":31
 *     return c_get_type_name(t).decode('UTF-8')
 * 
 * def get_type(name):             # <<<<<<<<<<<<<<
 *     return c_get_named_type(name)
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_7opencog_9atomspace_11get_type, NULL, __pyx_n_s_opencog_atomspace); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_type, __pyx_t_2) < 0) __PYX_ERR(4, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":34
 *     return c_get_named_type(name)
 * 
 * def is_a(Type t1, Type t2):             # <<<<<<<<<<<<<<
 *     return nameserver().isA(t1,t2)
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_7opencog_9atomspace_13is_a, NULL, __pyx_n_s_opencog_atomspace); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_a, __pyx_t_2) < 0) __PYX_ERR(4, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":45
 * #    setattr(mod, name, class_)
 * 
 * types = {}             # <<<<<<<<<<<<<<
 * cdef generate_type_module():
 *     global types
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_types, __pyx_t_2) < 0) __PYX_ERR(4, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":59
 *     return types
 * 
 * types = type('atom_types', (), generate_type_module())             # <<<<<<<<<<<<<<
 * 
 * def begin_type_decls(module):
 */
  __pyx_t_2 = __pyx_f_7opencog_9atomspace_generate_type_module(); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_u_atom_types);
  __Pyx_GIVEREF(__pyx_n_u_atom_types);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_u_atom_types);
  __Pyx_INCREF(__pyx_empty_tuple);
  __Pyx_GIVEREF(__pyx_empty_tuple);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_empty_tuple);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyType_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_types, __pyx_t_2) < 0) __PYX_ERR(4, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":61
 * types = type('atom_types', (), generate_type_module())
 * 
 * def begin_type_decls(module):             # <<<<<<<<<<<<<<
 *     return nameserver().beginTypeDecls(module.encode('UTF-8'))
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_7opencog_9atomspace_15begin_type_decls, NULL, __pyx_n_s_opencog_atomspace); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin_type_decls, __pyx_t_2) < 0) __PYX_ERR(4, 61, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":64
 *     return nameserver().beginTypeDecls(module.encode('UTF-8'))
 * 
 * def end_type_decls():             # <<<<<<<<<<<<<<
 *     nameserver().endTypeDecls()
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_7opencog_9atomspace_17end_type_decls, NULL, __pyx_n_s_opencog_atomspace); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_end_type_decls, __pyx_t_2) < 0) __PYX_ERR(4, 64, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":67
 *     nameserver().endTypeDecls()
 * 
 * @contextmanager             # <<<<<<<<<<<<<<
 * def type_decl_context(module):
 *     if begin_type_decls(module):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_contextmanager); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":68
 * 
 * @contextmanager
 * def type_decl_context(module):             # <<<<<<<<<<<<<<
 *     if begin_type_decls(module):
 *         raise RuntimeError('Cannot declare types for already loaded module: ' +
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7opencog_9atomspace_19type_decl_context, NULL, __pyx_n_s_opencog_atomspace); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "../../../../opencog/cython/opencog/nameserver.pyx":67
 *     nameserver().endTypeDecls()
 * 
 * @contextmanager             # <<<<<<<<<<<<<<
 * def type_decl_context(module):
 *     if begin_type_decls(module):
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_type_decl_context, __pyx_t_3) < 0) __PYX_ERR(4, 68, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":77
 *         end_type_decls()
 * 
 * def decl_type(parent, name):             # <<<<<<<<<<<<<<
 *     type_id = nameserver().declType(parent, name.encode('UTF-8'))
 *     setattr(types, name, type_id)
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_7opencog_9atomspace_22decl_type, NULL, __pyx_n_s_opencog_atomspace); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_decl_type, __pyx_t_3) < 0) __PYX_ERR(4, 77, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "../../../../opencog/cython/opencog/nameserver.pyx":85
 * # additional atom types were declared in other atomspace modules.
 * # i.e. when new types were added to the C++ nameserver.
 * def get_refreshed_types():             # <<<<<<<<<<<<<<
 *     global types
 *     types = type('atom_types', (), generate_type_module())
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_7opencog_9atomspace_24get_refreshed_types, NULL, __pyx_n_s_opencog_atomspace); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_refreshed_types, __pyx_t_3) < 0) __PYX_ERR(4, 85, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "../../../../opencog/cython/opencog/link_value.pyx":2
 * 
 * def createLinkValue(arg):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cLinkValue] c_ptr
 *     if (isinstance(arg, list)):
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_7opencog_9atomspace_26createLinkValue, NULL, __pyx_n_s_opencog_atomspace); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_createLinkValue, __pyx_t_3) < 0) __PYX_ERR(8, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Value(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_7opencog_9atomspace_28__pyx_unpickle_Value, NULL, __pyx_n_s_opencog_atomspace); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Value, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Value__set_state(<Value> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Value__set_state(Value __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_7opencog_9atomspace_30__pyx_unpickle_TruthValue, NULL, __pyx_n_s_opencog_atomspace); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_TruthValue, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_FloatValue(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_7opencog_9atomspace_32__pyx_unpickle_FloatValue, NULL, __pyx_n_s_opencog_atomspace); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_FloatValue, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_FloatValue__set_state(<FloatValue> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_FloatValue__set_state(FloatValue __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.ptr_holder = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_7opencog_9atomspace_34__pyx_unpickle_StringValue, NULL, __pyx_n_s_opencog_atomspace); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_StringValue, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_LinkValue(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_7opencog_9atomspace_36__pyx_unpickle_LinkValue, NULL, __pyx_n_s_opencog_atomspace); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_LinkValue, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "opencog/atomspace.pyx":1
 * # Cython/distutils can only handle a single file as the source for             # <<<<<<<<<<<<<<
 * # a python module.  Since it is helpful to be able to split the binding
 * # code into separate files, we just include them here.
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_3) < 0) __PYX_ERR(9, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init opencog.atomspace", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init opencog.atomspace");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#if defined(__Pyx_CyFunction_USED) && defined(NDEBUG)
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* decode_c_bytes */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_3);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* ClassMethod */
static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYSTON || CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    #if PY_MAJOR_VERSION == 2
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    #else
    PyTypeObject *methoddescr_type = &PyMethodDescr_Type;
    #endif
    if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else {
        return PyClassMethod_New(method);
    }
}

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE short __Pyx_PyInt_As_short(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const short neg_one = (short) -1, const_zero = (short) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(short) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(short, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (short) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (short) 0;
                case  1: __PYX_VERIFY_RETURN_INT(short, digit, digits[0])
                case 2:
                    if (8 * sizeof(short) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) >= 2 * PyLong_SHIFT) {
                            return (short) (((((short)digits[1]) << PyLong_SHIFT) | (short)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(short) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) >= 3 * PyLong_SHIFT) {
                            return (short) (((((((short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(short) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) >= 4 * PyLong_SHIFT) {
                            return (short) (((((((((short)digits[3]) << PyLong_SHIFT) | (short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (short) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(short) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(short, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(short) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(short, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (short) 0;
                case -1: __PYX_VERIFY_RETURN_INT(short, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(short,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(short) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 2 * PyLong_SHIFT) {
                            return (short) (((short)-1)*(((((short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(short) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 2 * PyLong_SHIFT) {
                            return (short) ((((((short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(short) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 3 * PyLong_SHIFT) {
                            return (short) (((short)-1)*(((((((short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(short) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 3 * PyLong_SHIFT) {
                            return (short) ((((((((short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(short) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 4 * PyLong_SHIFT) {
                            return (short) (((short)-1)*(((((((((short)digits[3]) << PyLong_SHIFT) | (short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(short) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 4 * PyLong_SHIFT) {
                            return (short) ((((((((((short)digits[3]) << PyLong_SHIFT) | (short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(short) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(short, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(short) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(short, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            short val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (short) -1;
        }
    } else {
        short val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (short) -1;
        val = __Pyx_PyInt_As_short(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to short");
    return (short) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to short");
    return (short) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_short(short value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const short neg_one = (short) -1, const_zero = (short) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(short) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(short) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(short) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(short) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(short) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(short),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (Py_REFCNT(self) > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *frame = self->gi_frame;
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
