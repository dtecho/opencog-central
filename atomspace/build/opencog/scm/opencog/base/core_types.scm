
; DO NOT EDIT THIS FILE! This file was automatically
; generated from atom definitions in
; /workspaces/opencog-central/atomspace/opencog/atoms/atom_types/atom_types.script
; by the macro OPENCOG_SCM_ATOMTYPES
;
; This file contains basic scheme wrappers for atom creation.
;
(define-public NotypeType (cog-type->int 'Notype))
(define-public (Notype . x)
	(apply cog-new-link (cons NotypeType x)))
(set-procedure-property! Notype 'documentation
" Notype -- See https://wiki.opencog.org/w/Notype for documentation.")
(define-public (Notype . x)
	(apply cog-new-link (cons NotypeType x)))
(set-procedure-property! Notype 'documentation
" Notype -- See https://wiki.opencog.org/w/Notype for documentation.")
(define-public TopTypeType (cog-type->int 'TopType))
(define-public (TopType . x)
	(apply cog-new-link (cons TopTypeType x)))
(set-procedure-property! TopType 'documentation
" TopType -- See https://wiki.opencog.org/w/TopType for documentation.")
(define-public (TopType . x)
	(apply cog-new-link (cons TopTypeType x)))
(set-procedure-property! TopType 'documentation
" TopType -- See https://wiki.opencog.org/w/TopType for documentation.")
(define-public ValueType (cog-type->int 'Value))
(define-public (Value . x)
	(apply cog-new-value (cons ValueType x)))
(set-procedure-property! Value 'documentation
" Value -- See https://wiki.opencog.org/w/Value for documentation.")
(define-public VoidValueType (cog-type->int 'VoidValue))
(define-public (VoidValue . x)
	(apply cog-new-value (cons VoidValueType x)))
(set-procedure-property! VoidValue 'documentation
" VoidValue -- See https://wiki.opencog.org/w/VoidValue for documentation.")
(define-public BoolValueType (cog-type->int 'BoolValue))
(define-public (BoolValue . x)
	(apply cog-new-value (cons BoolValueType x)))
(set-procedure-property! BoolValue 'documentation
" BoolValue -- See https://wiki.opencog.org/w/BoolValue for documentation.")
(define-public FloatValueType (cog-type->int 'FloatValue))
(define-public (FloatValue . x)
	(apply cog-new-value (cons FloatValueType x)))
(set-procedure-property! FloatValue 'documentation
" FloatValue -- See https://wiki.opencog.org/w/FloatValue for documentation.")
(define-public StringValueType (cog-type->int 'StringValue))
(define-public (StringValue . x)
	(apply cog-new-value (cons StringValueType x)))
(set-procedure-property! StringValue 'documentation
" StringValue -- See https://wiki.opencog.org/w/StringValue for documentation.")
(define-public LinkValueType (cog-type->int 'LinkValue))
(define-public (LinkValue . x)
	(apply cog-new-value (cons LinkValueType x)))
(set-procedure-property! LinkValue 'documentation
" LinkValue -- See https://wiki.opencog.org/w/LinkValue for documentation.")
(define-public ValuationType (cog-type->int 'Valuation))
(define-public ListValueType (cog-type->int 'ListValue))
(define-public (ListValue . x)
	(apply cog-new-value (cons ListValueType x)))
(set-procedure-property! ListValue 'documentation
" ListValue -- See https://wiki.opencog.org/w/ListValue for documentation.")
(define-public StreamValueType (cog-type->int 'StreamValue))
(define-public (StreamValue . x)
	(apply cog-new-value (cons StreamValueType x)))
(set-procedure-property! StreamValue 'documentation
" StreamValue -- See https://wiki.opencog.org/w/StreamValue for documentation.")
(define-public RandomStreamType (cog-type->int 'RandomStream))
(define-public (RandomStream . x)
	(apply cog-new-value (cons RandomStreamType x)))
(set-procedure-property! RandomStream 'documentation
" RandomStream -- See https://wiki.opencog.org/w/RandomStream for documentation.")
(define-public FormulaStreamType (cog-type->int 'FormulaStream))
(define-public (FormulaStream . x)
	(apply cog-new-value (cons FormulaStreamType x)))
(set-procedure-property! FormulaStream 'documentation
" FormulaStream -- See https://wiki.opencog.org/w/FormulaStream for documentation.")
(define-public LinkStreamValueType (cog-type->int 'LinkStreamValue))
(define-public (LinkStreamValue . x)
	(apply cog-new-value (cons LinkStreamValueType x)))
(set-procedure-property! LinkStreamValue 'documentation
" LinkStreamValue -- See https://wiki.opencog.org/w/LinkStreamValue for documentation.")
(define-public QueueValueType (cog-type->int 'QueueValue))
(define-public (QueueValue . x)
	(apply cog-new-value (cons QueueValueType x)))
(set-procedure-property! QueueValue 'documentation
" QueueValue -- See https://wiki.opencog.org/w/QueueValue for documentation.")
(define-public FutureStreamType (cog-type->int 'FutureStream))
(define-public (FutureStream . x)
	(apply cog-new-value (cons FutureStreamType x)))
(set-procedure-property! FutureStream 'documentation
" FutureStream -- See https://wiki.opencog.org/w/FutureStream for documentation.")
(define-public TruthValueType (cog-type->int 'TruthValue))
(define-public (TruthValue . x)
	(apply cog-new-value (cons TruthValueType x)))
(set-procedure-property! TruthValue 'documentation
" TruthValue -- See https://wiki.opencog.org/w/TruthValue for documentation.")
(define-public SimpleTruthValueType (cog-type->int 'SimpleTruthValue))
(define-public (SimpleTruthValue . x)
	(apply cog-new-value (cons SimpleTruthValueType x)))
(set-procedure-property! SimpleTruthValue 'documentation
" SimpleTruthValue -- See https://wiki.opencog.org/w/SimpleTruthValue for documentation.")
(define-public CountTruthValueType (cog-type->int 'CountTruthValue))
(define-public (CountTruthValue . x)
	(apply cog-new-value (cons CountTruthValueType x)))
(set-procedure-property! CountTruthValue 'documentation
" CountTruthValue -- See https://wiki.opencog.org/w/CountTruthValue for documentation.")
(define-public IndefiniteTruthValueType (cog-type->int 'IndefiniteTruthValue))
(define-public (IndefiniteTruthValue . x)
	(apply cog-new-value (cons IndefiniteTruthValueType x)))
(set-procedure-property! IndefiniteTruthValue 'documentation
" IndefiniteTruthValue -- See https://wiki.opencog.org/w/IndefiniteTruthValue for documentation.")
(define-public FuzzyTruthValueType (cog-type->int 'FuzzyTruthValue))
(define-public (FuzzyTruthValue . x)
	(apply cog-new-value (cons FuzzyTruthValueType x)))
(set-procedure-property! FuzzyTruthValue 'documentation
" FuzzyTruthValue -- See https://wiki.opencog.org/w/FuzzyTruthValue for documentation.")
(define-public ProbabilisticTruthValueType (cog-type->int 'ProbabilisticTruthValue))
(define-public (ProbabilisticTruthValue . x)
	(apply cog-new-value (cons ProbabilisticTruthValueType x)))
(set-procedure-property! ProbabilisticTruthValue 'documentation
" ProbabilisticTruthValue -- See https://wiki.opencog.org/w/ProbabilisticTruthValue for documentation.")
(define-public EvidenceCountTruthValueType (cog-type->int 'EvidenceCountTruthValue))
(define-public (EvidenceCountTruthValue . x)
	(apply cog-new-value (cons EvidenceCountTruthValueType x)))
(set-procedure-property! EvidenceCountTruthValue 'documentation
" EvidenceCountTruthValue -- See https://wiki.opencog.org/w/EvidenceCountTruthValue for documentation.")
(define-public FormulaTruthValueType (cog-type->int 'FormulaTruthValue))
(define-public (FormulaTruthValue . x)
	(apply cog-new-value (cons FormulaTruthValueType x)))
(set-procedure-property! FormulaTruthValue 'documentation
" FormulaTruthValue -- See https://wiki.opencog.org/w/FormulaTruthValue for documentation.")
(define-public AtomType (cog-type->int 'Atom))
(define-public (Atom . x)
	(apply cog-new-link (cons AtomType x)))
(set-procedure-property! Atom 'documentation
" Atom -- See https://wiki.opencog.org/w/Atom for documentation.")
(define-public (Atom . x)
	(apply cog-new-link (cons AtomType x)))
(set-procedure-property! Atom 'documentation
" Atom -- See https://wiki.opencog.org/w/Atom for documentation.")
(define-public FrameType (cog-type->int 'Frame))
(define-public (Frame . x)
	(apply cog-new-link (cons FrameType x)))
(set-procedure-property! Frame 'documentation
" Frame -- See https://wiki.opencog.org/w/Frame for documentation.")
(define-public (Frame . x)
	(apply cog-new-link (cons FrameType x)))
(set-procedure-property! Frame 'documentation
" Frame -- See https://wiki.opencog.org/w/Frame for documentation.")
(define-public AtomSpaceType (cog-type->int 'AtomSpace))
(define-public (AtomSpace . x) (cog-add-atomspace (apply cog-new-atomspace x)))
(define-public NodeType (cog-type->int 'Node))
(define-public (Node . x)
	(apply cog-new-node (cons NodeType x)))
(set-procedure-property! Node 'documentation
" Node -- See https://wiki.opencog.org/w/Node for documentation.")
(define-public LinkType (cog-type->int 'Link))
(define-public (Link . x)
	(apply cog-new-link (cons LinkType x)))
(set-procedure-property! Link 'documentation
" Link -- See https://wiki.opencog.org/w/Link for documentation.")
(define-public ConceptNodeType (cog-type->int 'ConceptNode))
(define-public (ConceptNode . x)
	(apply cog-new-node (cons ConceptNodeType x)))
(set-procedure-property! ConceptNode 'documentation
" ConceptNode -- See https://wiki.opencog.org/w/ConceptNode for documentation.")
(define-public (Concept . x)
	(apply cog-new-node (cons ConceptNodeType x)))
(set-procedure-property! Concept 'documentation
" ConceptNode -- See https://wiki.opencog.org/w/ConceptNode for documentation.")
(define-public NumberNodeType (cog-type->int 'NumberNode))
(define-public (NumberNode . x)
	(apply cog-new-node (cons NumberNodeType x)))
(set-procedure-property! NumberNode 'documentation
" NumberNode -- See https://wiki.opencog.org/w/NumberNode for documentation.")
(define-public (Number . x)
	(apply cog-new-node (cons NumberNodeType x)))
(set-procedure-property! Number 'documentation
" NumberNode -- See https://wiki.opencog.org/w/NumberNode for documentation.")
(define-public OrderedLinkType (cog-type->int 'OrderedLink))
(define-public (OrderedLink . x)
	(apply cog-new-link (cons OrderedLinkType x)))
(set-procedure-property! OrderedLink 'documentation
" OrderedLink -- See https://wiki.opencog.org/w/OrderedLink for documentation.")
(define-public (Ordered . x)
	(apply cog-new-link (cons OrderedLinkType x)))
(set-procedure-property! Ordered 'documentation
" OrderedLink -- See https://wiki.opencog.org/w/OrderedLink for documentation.")
(define-public UnorderedLinkType (cog-type->int 'UnorderedLink))
(define-public (UnorderedLink . x)
	(apply cog-new-link (cons UnorderedLinkType x)))
(set-procedure-property! UnorderedLink 'documentation
" UnorderedLink -- See https://wiki.opencog.org/w/UnorderedLink for documentation.")
(define-public (Unordered . x)
	(apply cog-new-link (cons UnorderedLinkType x)))
(set-procedure-property! Unordered 'documentation
" UnorderedLink -- See https://wiki.opencog.org/w/UnorderedLink for documentation.")
(define-public PredicateNodeType (cog-type->int 'PredicateNode))
(define-public (PredicateNode . x)
	(apply cog-new-node (cons PredicateNodeType x)))
(set-procedure-property! PredicateNode 'documentation
" PredicateNode -- See https://wiki.opencog.org/w/PredicateNode for documentation.")
(define-public (Predicate . x)
	(apply cog-new-node (cons PredicateNodeType x)))
(set-procedure-property! Predicate 'documentation
" PredicateNode -- See https://wiki.opencog.org/w/PredicateNode for documentation.")
(define-public ValuableLinkType (cog-type->int 'ValuableLink))
(define-public (ValuableLink . x)
	(apply cog-new-link (cons ValuableLinkType x)))
(set-procedure-property! ValuableLink 'documentation
" ValuableLink -- See https://wiki.opencog.org/w/ValuableLink for documentation.")
(define-public (Valuable . x)
	(apply cog-new-link (cons ValuableLinkType x)))
(set-procedure-property! Valuable 'documentation
" ValuableLink -- See https://wiki.opencog.org/w/ValuableLink for documentation.")
(define-public EvaluatableLinkType (cog-type->int 'EvaluatableLink))
(define-public (EvaluatableLink . x)
	(apply cog-new-link (cons EvaluatableLinkType x)))
(set-procedure-property! EvaluatableLink 'documentation
" EvaluatableLink -- See https://wiki.opencog.org/w/EvaluatableLink for documentation.")
(define-public (Evaluatable . x)
	(apply cog-new-link (cons EvaluatableLinkType x)))
(set-procedure-property! Evaluatable 'documentation
" EvaluatableLink -- See https://wiki.opencog.org/w/EvaluatableLink for documentation.")
(define-public ExecutableLinkType (cog-type->int 'ExecutableLink))
(define-public (ExecutableLink . x)
	(apply cog-new-link (cons ExecutableLinkType x)))
(set-procedure-property! ExecutableLink 'documentation
" ExecutableLink -- See https://wiki.opencog.org/w/ExecutableLink for documentation.")
(define-public (Executable . x)
	(apply cog-new-link (cons ExecutableLinkType x)))
(set-procedure-property! Executable 'documentation
" ExecutableLink -- See https://wiki.opencog.org/w/ExecutableLink for documentation.")
(define-public CrispInputLinkType (cog-type->int 'CrispInputLink))
(define-public (CrispInputLink . x)
	(apply cog-new-link (cons CrispInputLinkType x)))
(set-procedure-property! CrispInputLink 'documentation
" CrispInputLink -- See https://wiki.opencog.org/w/CrispInputLink for documentation.")
(define-public (CrispInput . x)
	(apply cog-new-link (cons CrispInputLinkType x)))
(set-procedure-property! CrispInput 'documentation
" CrispInputLink -- See https://wiki.opencog.org/w/CrispInputLink for documentation.")
(define-public CrispOutputLinkType (cog-type->int 'CrispOutputLink))
(define-public (CrispOutputLink . x)
	(apply cog-new-link (cons CrispOutputLinkType x)))
(set-procedure-property! CrispOutputLink 'documentation
" CrispOutputLink -- See https://wiki.opencog.org/w/CrispOutputLink for documentation.")
(define-public (CrispOutput . x)
	(apply cog-new-link (cons CrispOutputLinkType x)))
(set-procedure-property! CrispOutput 'documentation
" CrispOutputLink -- See https://wiki.opencog.org/w/CrispOutputLink for documentation.")
(define-public BooleanInputLinkType (cog-type->int 'BooleanInputLink))
(define-public (BooleanInputLink . x)
	(apply cog-new-link (cons BooleanInputLinkType x)))
(set-procedure-property! BooleanInputLink 'documentation
" BooleanInputLink -- See https://wiki.opencog.org/w/BooleanInputLink for documentation.")
(define-public (BooleanInput . x)
	(apply cog-new-link (cons BooleanInputLinkType x)))
(set-procedure-property! BooleanInput 'documentation
" BooleanInputLink -- See https://wiki.opencog.org/w/BooleanInputLink for documentation.")
(define-public BooleanOutputLinkType (cog-type->int 'BooleanOutputLink))
(define-public (BooleanOutputLink . x)
	(apply cog-new-link (cons BooleanOutputLinkType x)))
(set-procedure-property! BooleanOutputLink 'documentation
" BooleanOutputLink -- See https://wiki.opencog.org/w/BooleanOutputLink for documentation.")
(define-public (BooleanOutput . x)
	(apply cog-new-link (cons BooleanOutputLinkType x)))
(set-procedure-property! BooleanOutput 'documentation
" BooleanOutputLink -- See https://wiki.opencog.org/w/BooleanOutputLink for documentation.")
(define-public NumericInputLinkType (cog-type->int 'NumericInputLink))
(define-public (NumericInputLink . x)
	(apply cog-new-link (cons NumericInputLinkType x)))
(set-procedure-property! NumericInputLink 'documentation
" NumericInputLink -- See https://wiki.opencog.org/w/NumericInputLink for documentation.")
(define-public (NumericInput . x)
	(apply cog-new-link (cons NumericInputLinkType x)))
(set-procedure-property! NumericInput 'documentation
" NumericInputLink -- See https://wiki.opencog.org/w/NumericInputLink for documentation.")
(define-public NumericOutputLinkType (cog-type->int 'NumericOutputLink))
(define-public (NumericOutputLink . x)
	(apply cog-new-link (cons NumericOutputLinkType x)))
(set-procedure-property! NumericOutputLink 'documentation
" NumericOutputLink -- See https://wiki.opencog.org/w/NumericOutputLink for documentation.")
(define-public (NumericOutput . x)
	(apply cog-new-link (cons NumericOutputLinkType x)))
(set-procedure-property! NumericOutput 'documentation
" NumericOutputLink -- See https://wiki.opencog.org/w/NumericOutputLink for documentation.")
(define-public TypeInputLinkType (cog-type->int 'TypeInputLink))
(define-public (TypeInputLink . x)
	(apply cog-new-link (cons TypeInputLinkType x)))
(set-procedure-property! TypeInputLink 'documentation
" TypeInputLink -- See https://wiki.opencog.org/w/TypeInputLink for documentation.")
(define-public (TypeInput . x)
	(apply cog-new-link (cons TypeInputLinkType x)))
(set-procedure-property! TypeInput 'documentation
" TypeInputLink -- See https://wiki.opencog.org/w/TypeInputLink for documentation.")
(define-public TypeOutputLinkType (cog-type->int 'TypeOutputLink))
(define-public (TypeOutputLink . x)
	(apply cog-new-link (cons TypeOutputLinkType x)))
(set-procedure-property! TypeOutputLink 'documentation
" TypeOutputLink -- See https://wiki.opencog.org/w/TypeOutputLink for documentation.")
(define-public (TypeOutput . x)
	(apply cog-new-link (cons TypeOutputLinkType x)))
(set-procedure-property! TypeOutput 'documentation
" TypeOutputLink -- See https://wiki.opencog.org/w/TypeOutputLink for documentation.")
(define-public AlphaConvertibleLinkType (cog-type->int 'AlphaConvertibleLink))
(define-public (AlphaConvertibleLink . x)
	(apply cog-new-link (cons AlphaConvertibleLinkType x)))
(set-procedure-property! AlphaConvertibleLink 'documentation
" AlphaConvertibleLink -- See https://wiki.opencog.org/w/AlphaConvertibleLink for documentation.")
(define-public (AlphaConvertible . x)
	(apply cog-new-link (cons AlphaConvertibleLinkType x)))
(set-procedure-property! AlphaConvertible 'documentation
" AlphaConvertibleLink -- See https://wiki.opencog.org/w/AlphaConvertibleLink for documentation.")
(define-public CollectionLinkType (cog-type->int 'CollectionLink))
(define-public (CollectionLink . x)
	(apply cog-new-link (cons CollectionLinkType x)))
(set-procedure-property! CollectionLink 'documentation
" CollectionLink -- See https://wiki.opencog.org/w/CollectionLink for documentation.")
(define-public (Collection . x)
	(apply cog-new-link (cons CollectionLinkType x)))
(set-procedure-property! Collection 'documentation
" CollectionLink -- See https://wiki.opencog.org/w/CollectionLink for documentation.")
(define-public ListLinkType (cog-type->int 'ListLink))
(define-public (ListLink . x)
	(apply cog-new-link (cons ListLinkType x)))
(set-procedure-property! ListLink 'documentation
" ListLink -- See https://wiki.opencog.org/w/ListLink for documentation.")
(define-public (List . x)
	(apply cog-new-link (cons ListLinkType x)))
(set-procedure-property! List 'documentation
" ListLink -- See https://wiki.opencog.org/w/ListLink for documentation.")
(define-public SetLinkType (cog-type->int 'SetLink))
(define-public (SetLink . x)
	(apply cog-new-link (cons SetLinkType x)))
(set-procedure-property! SetLink 'documentation
" SetLink -- See https://wiki.opencog.org/w/SetLink for documentation.")
(define-public (Set . x)
	(apply cog-new-link (cons SetLinkType x)))
(set-procedure-property! Set 'documentation
" SetLink -- See https://wiki.opencog.org/w/SetLink for documentation.")
(define-public UnionLinkType (cog-type->int 'UnionLink))
(define-public (UnionLink . x)
	(apply cog-new-link (cons UnionLinkType x)))
(set-procedure-property! UnionLink 'documentation
" UnionLink -- See https://wiki.opencog.org/w/UnionLink for documentation.")
(define-public (Union . x)
	(apply cog-new-link (cons UnionLinkType x)))
(set-procedure-property! Union 'documentation
" UnionLink -- See https://wiki.opencog.org/w/UnionLink for documentation.")
(define-public IntersectionLinkType (cog-type->int 'IntersectionLink))
(define-public (IntersectionLink . x)
	(apply cog-new-link (cons IntersectionLinkType x)))
(set-procedure-property! IntersectionLink 'documentation
" IntersectionLink -- See https://wiki.opencog.org/w/IntersectionLink for documentation.")
(define-public (Intersection . x)
	(apply cog-new-link (cons IntersectionLinkType x)))
(set-procedure-property! Intersection 'documentation
" IntersectionLink -- See https://wiki.opencog.org/w/IntersectionLink for documentation.")
(define-public ComplementLinkType (cog-type->int 'ComplementLink))
(define-public (ComplementLink . x)
	(apply cog-new-link (cons ComplementLinkType x)))
(set-procedure-property! ComplementLink 'documentation
" ComplementLink -- See https://wiki.opencog.org/w/ComplementLink for documentation.")
(define-public (Complement . x)
	(apply cog-new-link (cons ComplementLinkType x)))
(set-procedure-property! Complement 'documentation
" ComplementLink -- See https://wiki.opencog.org/w/ComplementLink for documentation.")
(define-public SetDifferenceLinkType (cog-type->int 'SetDifferenceLink))
(define-public (SetDifferenceLink . x)
	(apply cog-new-link (cons SetDifferenceLinkType x)))
(set-procedure-property! SetDifferenceLink 'documentation
" SetDifferenceLink -- See https://wiki.opencog.org/w/SetDifferenceLink for documentation.")
(define-public (SetDifference . x)
	(apply cog-new-link (cons SetDifferenceLinkType x)))
(set-procedure-property! SetDifference 'documentation
" SetDifferenceLink -- See https://wiki.opencog.org/w/SetDifferenceLink for documentation.")
(define-public MemberLinkType (cog-type->int 'MemberLink))
(define-public (MemberLink . x)
	(apply cog-new-link (cons MemberLinkType x)))
(set-procedure-property! MemberLink 'documentation
" MemberLink -- See https://wiki.opencog.org/w/MemberLink for documentation.")
(define-public (Member . x)
	(apply cog-new-link (cons MemberLinkType x)))
(set-procedure-property! Member 'documentation
" MemberLink -- See https://wiki.opencog.org/w/MemberLink for documentation.")
(define-public SubsetLinkType (cog-type->int 'SubsetLink))
(define-public (SubsetLink . x)
	(apply cog-new-link (cons SubsetLinkType x)))
(set-procedure-property! SubsetLink 'documentation
" SubsetLink -- See https://wiki.opencog.org/w/SubsetLink for documentation.")
(define-public (Subset . x)
	(apply cog-new-link (cons SubsetLinkType x)))
(set-procedure-property! Subset 'documentation
" SubsetLink -- See https://wiki.opencog.org/w/SubsetLink for documentation.")
(define-public ContextLinkType (cog-type->int 'ContextLink))
(define-public (ContextLink . x)
	(apply cog-new-link (cons ContextLinkType x)))
(set-procedure-property! ContextLink 'documentation
" ContextLink -- See https://wiki.opencog.org/w/ContextLink for documentation.")
(define-public (Context . x)
	(apply cog-new-link (cons ContextLinkType x)))
(set-procedure-property! Context 'documentation
" ContextLink -- See https://wiki.opencog.org/w/ContextLink for documentation.")
(define-public TrueLinkType (cog-type->int 'TrueLink))
(define-public (TrueLink . x)
	(apply cog-new-link (cons TrueLinkType x)))
(set-procedure-property! TrueLink 'documentation
" TrueLink -- See https://wiki.opencog.org/w/TrueLink for documentation.")
(define-public (True . x)
	(apply cog-new-link (cons TrueLinkType x)))
(set-procedure-property! True 'documentation
" TrueLink -- See https://wiki.opencog.org/w/TrueLink for documentation.")
(define-public FalseLinkType (cog-type->int 'FalseLink))
(define-public (FalseLink . x)
	(apply cog-new-link (cons FalseLinkType x)))
(set-procedure-property! FalseLink 'documentation
" FalseLink -- See https://wiki.opencog.org/w/FalseLink for documentation.")
(define-public (False . x)
	(apply cog-new-link (cons FalseLinkType x)))
(set-procedure-property! False 'documentation
" FalseLink -- See https://wiki.opencog.org/w/FalseLink for documentation.")
(define-public AndLinkType (cog-type->int 'AndLink))
(define-public (AndLink . x)
	(apply cog-new-link (cons AndLinkType x)))
(set-procedure-property! AndLink 'documentation
" AndLink -- See https://wiki.opencog.org/w/AndLink for documentation.")
(define-public (And . x)
	(apply cog-new-link (cons AndLinkType x)))
(set-procedure-property! And 'documentation
" AndLink -- See https://wiki.opencog.org/w/AndLink for documentation.")
(define-public OrLinkType (cog-type->int 'OrLink))
(define-public (OrLink . x)
	(apply cog-new-link (cons OrLinkType x)))
(set-procedure-property! OrLink 'documentation
" OrLink -- See https://wiki.opencog.org/w/OrLink for documentation.")
(define-public (Or . x)
	(apply cog-new-link (cons OrLinkType x)))
(set-procedure-property! Or 'documentation
" OrLink -- See https://wiki.opencog.org/w/OrLink for documentation.")
(define-public NotLinkType (cog-type->int 'NotLink))
(define-public (NotLink . x)
	(apply cog-new-link (cons NotLinkType x)))
(set-procedure-property! NotLink 'documentation
" NotLink -- See https://wiki.opencog.org/w/NotLink for documentation.")
(define-public (Not . x)
	(apply cog-new-link (cons NotLinkType x)))
(set-procedure-property! Not 'documentation
" NotLink -- See https://wiki.opencog.org/w/NotLink for documentation.")
(define-public SequentialAndLinkType (cog-type->int 'SequentialAndLink))
(define-public (SequentialAndLink . x)
	(apply cog-new-link (cons SequentialAndLinkType x)))
(set-procedure-property! SequentialAndLink 'documentation
" SequentialAndLink -- See https://wiki.opencog.org/w/SequentialAndLink for documentation.")
(define-public (SequentialAnd . x)
	(apply cog-new-link (cons SequentialAndLinkType x)))
(set-procedure-property! SequentialAnd 'documentation
" SequentialAndLink -- See https://wiki.opencog.org/w/SequentialAndLink for documentation.")
(define-public SequentialOrLinkType (cog-type->int 'SequentialOrLink))
(define-public (SequentialOrLink . x)
	(apply cog-new-link (cons SequentialOrLinkType x)))
(set-procedure-property! SequentialOrLink 'documentation
" SequentialOrLink -- See https://wiki.opencog.org/w/SequentialOrLink for documentation.")
(define-public (SequentialOr . x)
	(apply cog-new-link (cons SequentialOrLinkType x)))
(set-procedure-property! SequentialOr 'documentation
" SequentialOrLink -- See https://wiki.opencog.org/w/SequentialOrLink for documentation.")
(define-public ChoiceLinkType (cog-type->int 'ChoiceLink))
(define-public (ChoiceLink . x)
	(apply cog-new-link (cons ChoiceLinkType x)))
(set-procedure-property! ChoiceLink 'documentation
" ChoiceLink -- See https://wiki.opencog.org/w/ChoiceLink for documentation.")
(define-public (Choice . x)
	(apply cog-new-link (cons ChoiceLinkType x)))
(set-procedure-property! Choice 'documentation
" ChoiceLink -- See https://wiki.opencog.org/w/ChoiceLink for documentation.")
(define-public PresentLinkType (cog-type->int 'PresentLink))
(define-public (PresentLink . x)
	(apply cog-new-link (cons PresentLinkType x)))
(set-procedure-property! PresentLink 'documentation
" PresentLink -- See https://wiki.opencog.org/w/PresentLink for documentation.")
(define-public (Present . x)
	(apply cog-new-link (cons PresentLinkType x)))
(set-procedure-property! Present 'documentation
" PresentLink -- See https://wiki.opencog.org/w/PresentLink for documentation.")
(define-public AbsentLinkType (cog-type->int 'AbsentLink))
(define-public (AbsentLink . x)
	(apply cog-new-link (cons AbsentLinkType x)))
(set-procedure-property! AbsentLink 'documentation
" AbsentLink -- See https://wiki.opencog.org/w/AbsentLink for documentation.")
(define-public (Absent . x)
	(apply cog-new-link (cons AbsentLinkType x)))
(set-procedure-property! Absent 'documentation
" AbsentLink -- See https://wiki.opencog.org/w/AbsentLink for documentation.")
(define-public AlwaysLinkType (cog-type->int 'AlwaysLink))
(define-public (AlwaysLink . x)
	(apply cog-new-link (cons AlwaysLinkType x)))
(set-procedure-property! AlwaysLink 'documentation
" AlwaysLink -- See https://wiki.opencog.org/w/AlwaysLink for documentation.")
(define-public (Always . x)
	(apply cog-new-link (cons AlwaysLinkType x)))
(set-procedure-property! Always 'documentation
" AlwaysLink -- See https://wiki.opencog.org/w/AlwaysLink for documentation.")
(define-public ContinuationLinkType (cog-type->int 'ContinuationLink))
(define-public (ContinuationLink . x)
	(apply cog-new-link (cons ContinuationLinkType x)))
(set-procedure-property! ContinuationLink 'documentation
" ContinuationLink -- See https://wiki.opencog.org/w/ContinuationLink for documentation.")
(define-public (Continuation . x)
	(apply cog-new-link (cons ContinuationLinkType x)))
(set-procedure-property! Continuation 'documentation
" ContinuationLink -- See https://wiki.opencog.org/w/ContinuationLink for documentation.")
(define-public EdgeLinkType (cog-type->int 'EdgeLink))
(define-public (EdgeLink . x)
	(apply cog-new-link (cons EdgeLinkType x)))
(set-procedure-property! EdgeLink 'documentation
" EdgeLink -- See https://wiki.opencog.org/w/EdgeLink for documentation.")
(define-public (Edge . x)
	(apply cog-new-link (cons EdgeLinkType x)))
(set-procedure-property! Edge 'documentation
" EdgeLink -- See https://wiki.opencog.org/w/EdgeLink for documentation.")
(define-public LexicalNodeType (cog-type->int 'LexicalNode))
(define-public (LexicalNode . x)
	(apply cog-new-node (cons LexicalNodeType x)))
(set-procedure-property! LexicalNode 'documentation
" LexicalNode -- See https://wiki.opencog.org/w/LexicalNode for documentation.")
(define-public (Lexical . x)
	(apply cog-new-node (cons LexicalNodeType x)))
(set-procedure-property! Lexical 'documentation
" LexicalNode -- See https://wiki.opencog.org/w/LexicalNode for documentation.")
(define-public AnyNodeType (cog-type->int 'AnyNode))
(define-public (AnyNode . x)
	(apply cog-new-node (cons AnyNodeType x)))
(set-procedure-property! AnyNode 'documentation
" AnyNode -- See https://wiki.opencog.org/w/AnyNode for documentation.")
(define-public (Any . x)
	(apply cog-new-node (cons AnyNodeType x)))
(set-procedure-property! Any 'documentation
" AnyNode -- See https://wiki.opencog.org/w/AnyNode for documentation.")
(define-public ConnectorType (cog-type->int 'Connector))
(define-public (Connector . x)
	(apply cog-new-link (cons ConnectorType x)))
(set-procedure-property! Connector 'documentation
" Connector -- See https://wiki.opencog.org/w/Connector for documentation.")
(define-public (Connector . x)
	(apply cog-new-link (cons ConnectorType x)))
(set-procedure-property! Connector 'documentation
" Connector -- See https://wiki.opencog.org/w/Connector for documentation.")
(define-public SexNodeType (cog-type->int 'SexNode))
(define-public (SexNode . x)
	(apply cog-new-node (cons SexNodeType x)))
(set-procedure-property! SexNode 'documentation
" SexNode -- See https://wiki.opencog.org/w/SexNode for documentation.")
(define-public (Sex . x)
	(apply cog-new-node (cons SexNodeType x)))
(set-procedure-property! Sex 'documentation
" SexNode -- See https://wiki.opencog.org/w/SexNode for documentation.")
(define-public ConnectorDirType (cog-type->int 'ConnectorDir))
(define-public (ConnectorDir . x)
	(apply cog-new-node (cons ConnectorDirType x)))
(set-procedure-property! ConnectorDir 'documentation
" ConnectorDir -- See https://wiki.opencog.org/w/ConnectorDir for documentation.")
(define-public (ConnectorDir . x)
	(apply cog-new-node (cons ConnectorDirType x)))
(set-procedure-property! ConnectorDir 'documentation
" ConnectorDir -- See https://wiki.opencog.org/w/ConnectorDir for documentation.")
(define-public BondNodeType (cog-type->int 'BondNode))
(define-public (BondNode . x)
	(apply cog-new-node (cons BondNodeType x)))
(set-procedure-property! BondNode 'documentation
" BondNode -- See https://wiki.opencog.org/w/BondNode for documentation.")
(define-public (Bond . x)
	(apply cog-new-node (cons BondNodeType x)))
(set-procedure-property! Bond 'documentation
" BondNode -- See https://wiki.opencog.org/w/BondNode for documentation.")
(define-public ConnectorSeqType (cog-type->int 'ConnectorSeq))
(define-public (ConnectorSeq . x)
	(apply cog-new-link (cons ConnectorSeqType x)))
(set-procedure-property! ConnectorSeq 'documentation
" ConnectorSeq -- See https://wiki.opencog.org/w/ConnectorSeq for documentation.")
(define-public (ConnectorSeq . x)
	(apply cog-new-link (cons ConnectorSeqType x)))
(set-procedure-property! ConnectorSeq 'documentation
" ConnectorSeq -- See https://wiki.opencog.org/w/ConnectorSeq for documentation.")
(define-public ConnectorSetType (cog-type->int 'ConnectorSet))
(define-public (ConnectorSet . x)
	(apply cog-new-link (cons ConnectorSetType x)))
(set-procedure-property! ConnectorSet 'documentation
" ConnectorSet -- See https://wiki.opencog.org/w/ConnectorSet for documentation.")
(define-public (ConnectorSet . x)
	(apply cog-new-link (cons ConnectorSetType x)))
(set-procedure-property! ConnectorSet 'documentation
" ConnectorSet -- See https://wiki.opencog.org/w/ConnectorSet for documentation.")
(define-public ConnectorChoiceType (cog-type->int 'ConnectorChoice))
(define-public (ConnectorChoice . x)
	(apply cog-new-link (cons ConnectorChoiceType x)))
(set-procedure-property! ConnectorChoice 'documentation
" ConnectorChoice -- See https://wiki.opencog.org/w/ConnectorChoice for documentation.")
(define-public (ConnectorChoice . x)
	(apply cog-new-link (cons ConnectorChoiceType x)))
(set-procedure-property! ConnectorChoice 'documentation
" ConnectorChoice -- See https://wiki.opencog.org/w/ConnectorChoice for documentation.")
(define-public SectionType (cog-type->int 'Section))
(define-public (Section . x)
	(apply cog-new-link (cons SectionType x)))
(set-procedure-property! Section 'documentation
" Section -- See https://wiki.opencog.org/w/Section for documentation.")
(define-public (Section . x)
	(apply cog-new-link (cons SectionType x)))
(set-procedure-property! Section 'documentation
" Section -- See https://wiki.opencog.org/w/Section for documentation.")
(define-public ShapeLinkType (cog-type->int 'ShapeLink))
(define-public (ShapeLink . x)
	(apply cog-new-link (cons ShapeLinkType x)))
(set-procedure-property! ShapeLink 'documentation
" ShapeLink -- See https://wiki.opencog.org/w/ShapeLink for documentation.")
(define-public (Shape . x)
	(apply cog-new-link (cons ShapeLinkType x)))
(set-procedure-property! Shape 'documentation
" ShapeLink -- See https://wiki.opencog.org/w/ShapeLink for documentation.")
(define-public CrossSectionType (cog-type->int 'CrossSection))
(define-public (CrossSection . x)
	(apply cog-new-link (cons CrossSectionType x)))
(set-procedure-property! CrossSection 'documentation
" CrossSection -- See https://wiki.opencog.org/w/CrossSection for documentation.")
(define-public (CrossSection . x)
	(apply cog-new-link (cons CrossSectionType x)))
(set-procedure-property! CrossSection 'documentation
" CrossSection -- See https://wiki.opencog.org/w/CrossSection for documentation.")
(define-public ItemNodeType (cog-type->int 'ItemNode))
(define-public (ItemNode . x)
	(apply cog-new-node (cons ItemNodeType x)))
(set-procedure-property! ItemNode 'documentation
" ItemNode -- See https://wiki.opencog.org/w/ItemNode for documentation.")
(define-public (Item . x)
	(apply cog-new-node (cons ItemNodeType x)))
(set-procedure-property! Item 'documentation
" ItemNode -- See https://wiki.opencog.org/w/ItemNode for documentation.")
(define-public ItemClassNodeType (cog-type->int 'ItemClassNode))
(define-public (ItemClassNode . x)
	(apply cog-new-node (cons ItemClassNodeType x)))
(set-procedure-property! ItemClassNode 'documentation
" ItemClassNode -- See https://wiki.opencog.org/w/ItemClassNode for documentation.")
(define-public (ItemClass . x)
	(apply cog-new-node (cons ItemClassNodeType x)))
(set-procedure-property! ItemClass 'documentation
" ItemClassNode -- See https://wiki.opencog.org/w/ItemClassNode for documentation.")
(define-public TagNodeType (cog-type->int 'TagNode))
(define-public (TagNode . x)
	(apply cog-new-node (cons TagNodeType x)))
(set-procedure-property! TagNode 'documentation
" TagNode -- See https://wiki.opencog.org/w/TagNode for documentation.")
(define-public (Tag . x)
	(apply cog-new-node (cons TagNodeType x)))
(set-procedure-property! Tag 'documentation
" TagNode -- See https://wiki.opencog.org/w/TagNode for documentation.")
(define-public TagLinkType (cog-type->int 'TagLink))
(define-public (TagLink . x)
	(apply cog-new-link (cons TagLinkType x)))
(set-procedure-property! TagLink 'documentation
" TagLink -- See https://wiki.opencog.org/w/TagLink for documentation.")
(define-public (Tag . x)
	(apply cog-new-link (cons TagLinkType x)))
(set-procedure-property! Tag 'documentation
" TagLink -- See https://wiki.opencog.org/w/TagLink for documentation.")
(define-public VariableNodeType (cog-type->int 'VariableNode))
(define-public (VariableNode . x)
	(apply cog-new-node (cons VariableNodeType x)))
(set-procedure-property! VariableNode 'documentation
" VariableNode -- See https://wiki.opencog.org/w/VariableNode for documentation.")
(define-public (Variable . x)
	(apply cog-new-node (cons VariableNodeType x)))
(set-procedure-property! Variable 'documentation
" VariableNode -- See https://wiki.opencog.org/w/VariableNode for documentation.")
(define-public VariableListType (cog-type->int 'VariableList))
(define-public (VariableList . x)
	(apply cog-new-link (cons VariableListType x)))
(set-procedure-property! VariableList 'documentation
" VariableList -- See https://wiki.opencog.org/w/VariableList for documentation.")
(define-public (VariableList . x)
	(apply cog-new-link (cons VariableListType x)))
(set-procedure-property! VariableList 'documentation
" VariableList -- See https://wiki.opencog.org/w/VariableList for documentation.")
(define-public VariableSetType (cog-type->int 'VariableSet))
(define-public (VariableSet . x)
	(apply cog-new-link (cons VariableSetType x)))
(set-procedure-property! VariableSet 'documentation
" VariableSet -- See https://wiki.opencog.org/w/VariableSet for documentation.")
(define-public (VariableSet . x)
	(apply cog-new-link (cons VariableSetType x)))
(set-procedure-property! VariableSet 'documentation
" VariableSet -- See https://wiki.opencog.org/w/VariableSet for documentation.")
(define-public GlobNodeType (cog-type->int 'GlobNode))
(define-public (GlobNode . x)
	(apply cog-new-node (cons GlobNodeType x)))
(set-procedure-property! GlobNode 'documentation
" GlobNode -- See https://wiki.opencog.org/w/GlobNode for documentation.")
(define-public (Glob . x)
	(apply cog-new-node (cons GlobNodeType x)))
(set-procedure-property! Glob 'documentation
" GlobNode -- See https://wiki.opencog.org/w/GlobNode for documentation.")
(define-public QuoteLinkType (cog-type->int 'QuoteLink))
(define-public (QuoteLink . x)
	(apply cog-new-link (cons QuoteLinkType x)))
(set-procedure-property! QuoteLink 'documentation
" QuoteLink -- See https://wiki.opencog.org/w/QuoteLink for documentation.")
(define-public (Quote . x)
	(apply cog-new-link (cons QuoteLinkType x)))
(set-procedure-property! Quote 'documentation
" QuoteLink -- See https://wiki.opencog.org/w/QuoteLink for documentation.")
(define-public UnquoteLinkType (cog-type->int 'UnquoteLink))
(define-public (UnquoteLink . x)
	(apply cog-new-link (cons UnquoteLinkType x)))
(set-procedure-property! UnquoteLink 'documentation
" UnquoteLink -- See https://wiki.opencog.org/w/UnquoteLink for documentation.")
(define-public (Unquote . x)
	(apply cog-new-link (cons UnquoteLinkType x)))
(set-procedure-property! Unquote 'documentation
" UnquoteLink -- See https://wiki.opencog.org/w/UnquoteLink for documentation.")
(define-public DontExecLinkType (cog-type->int 'DontExecLink))
(define-public (DontExecLink . x)
	(apply cog-new-link (cons DontExecLinkType x)))
(set-procedure-property! DontExecLink 'documentation
" DontExecLink -- See https://wiki.opencog.org/w/DontExecLink for documentation.")
(define-public (DontExec . x)
	(apply cog-new-link (cons DontExecLinkType x)))
(set-procedure-property! DontExec 'documentation
" DontExecLink -- See https://wiki.opencog.org/w/DontExecLink for documentation.")
(define-public LocalQuoteLinkType (cog-type->int 'LocalQuoteLink))
(define-public (LocalQuoteLink . x)
	(apply cog-new-link (cons LocalQuoteLinkType x)))
(set-procedure-property! LocalQuoteLink 'documentation
" LocalQuoteLink -- See https://wiki.opencog.org/w/LocalQuoteLink for documentation.")
(define-public (LocalQuote . x)
	(apply cog-new-link (cons LocalQuoteLinkType x)))
(set-procedure-property! LocalQuote 'documentation
" LocalQuoteLink -- See https://wiki.opencog.org/w/LocalQuoteLink for documentation.")
(define-public ReplacementLinkType (cog-type->int 'ReplacementLink))
(define-public (ReplacementLink . x)
	(apply cog-new-link (cons ReplacementLinkType x)))
(set-procedure-property! ReplacementLink 'documentation
" ReplacementLink -- See https://wiki.opencog.org/w/ReplacementLink for documentation.")
(define-public (Replacement . x)
	(apply cog-new-link (cons ReplacementLinkType x)))
(set-procedure-property! Replacement 'documentation
" ReplacementLink -- See https://wiki.opencog.org/w/ReplacementLink for documentation.")
(define-public FreeLinkType (cog-type->int 'FreeLink))
(define-public (FreeLink . x)
	(apply cog-new-link (cons FreeLinkType x)))
(set-procedure-property! FreeLink 'documentation
" FreeLink -- See https://wiki.opencog.org/w/FreeLink for documentation.")
(define-public (Free . x)
	(apply cog-new-link (cons FreeLinkType x)))
(set-procedure-property! Free 'documentation
" FreeLink -- See https://wiki.opencog.org/w/FreeLink for documentation.")
(define-public DeleteLinkType (cog-type->int 'DeleteLink))
(define-public (DeleteLink . x)
	(apply cog-new-link (cons DeleteLinkType x)))
(set-procedure-property! DeleteLink 'documentation
" DeleteLink -- See https://wiki.opencog.org/w/DeleteLink for documentation.")
(define-public (Delete . x)
	(apply cog-new-link (cons DeleteLinkType x)))
(set-procedure-property! Delete 'documentation
" DeleteLink -- See https://wiki.opencog.org/w/DeleteLink for documentation.")
(define-public UniqueLinkType (cog-type->int 'UniqueLink))
(define-public (UniqueLink . x)
	(apply cog-new-link (cons UniqueLinkType x)))
(set-procedure-property! UniqueLink 'documentation
" UniqueLink -- See https://wiki.opencog.org/w/UniqueLink for documentation.")
(define-public (Unique . x)
	(apply cog-new-link (cons UniqueLinkType x)))
(set-procedure-property! Unique 'documentation
" UniqueLink -- See https://wiki.opencog.org/w/UniqueLink for documentation.")
(define-public StateLinkType (cog-type->int 'StateLink))
(define-public (StateLink . x)
	(apply cog-new-link (cons StateLinkType x)))
(set-procedure-property! StateLink 'documentation
" StateLink -- See https://wiki.opencog.org/w/StateLink for documentation.")
(define-public (State . x)
	(apply cog-new-link (cons StateLinkType x)))
(set-procedure-property! State 'documentation
" StateLink -- See https://wiki.opencog.org/w/StateLink for documentation.")
(define-public DefineLinkType (cog-type->int 'DefineLink))
(define-public (DefineLink . x)
	(apply cog-new-link (cons DefineLinkType x)))
(set-procedure-property! DefineLink 'documentation
" DefineLink -- See https://wiki.opencog.org/w/DefineLink for documentation.")
(define-public (Define . x)
	(apply cog-new-link (cons DefineLinkType x)))
(set-procedure-property! Define 'documentation
" DefineLink -- See https://wiki.opencog.org/w/DefineLink for documentation.")
(define-public GrantLinkType (cog-type->int 'GrantLink))
(define-public (GrantLink . x)
	(apply cog-new-link (cons GrantLinkType x)))
(set-procedure-property! GrantLink 'documentation
" GrantLink -- See https://wiki.opencog.org/w/GrantLink for documentation.")
(define-public (Grant . x)
	(apply cog-new-link (cons GrantLinkType x)))
(set-procedure-property! Grant 'documentation
" GrantLink -- See https://wiki.opencog.org/w/GrantLink for documentation.")
(define-public ScopeLinkType (cog-type->int 'ScopeLink))
(define-public (ScopeLink . x)
	(apply cog-new-link (cons ScopeLinkType x)))
(set-procedure-property! ScopeLink 'documentation
" ScopeLink -- See https://wiki.opencog.org/w/ScopeLink for documentation.")
(define-public (Scope . x)
	(apply cog-new-link (cons ScopeLinkType x)))
(set-procedure-property! Scope 'documentation
" ScopeLink -- See https://wiki.opencog.org/w/ScopeLink for documentation.")
(define-public RewriteLinkType (cog-type->int 'RewriteLink))
(define-public (RewriteLink . x)
	(apply cog-new-link (cons RewriteLinkType x)))
(set-procedure-property! RewriteLink 'documentation
" RewriteLink -- See https://wiki.opencog.org/w/RewriteLink for documentation.")
(define-public (Rewrite . x)
	(apply cog-new-link (cons RewriteLinkType x)))
(set-procedure-property! Rewrite 'documentation
" RewriteLink -- See https://wiki.opencog.org/w/RewriteLink for documentation.")
(define-public PrenexLinkType (cog-type->int 'PrenexLink))
(define-public (PrenexLink . x)
	(apply cog-new-link (cons PrenexLinkType x)))
(set-procedure-property! PrenexLink 'documentation
" PrenexLink -- See https://wiki.opencog.org/w/PrenexLink for documentation.")
(define-public (Prenex . x)
	(apply cog-new-link (cons PrenexLinkType x)))
(set-procedure-property! Prenex 'documentation
" PrenexLink -- See https://wiki.opencog.org/w/PrenexLink for documentation.")
(define-public LambdaLinkType (cog-type->int 'LambdaLink))
(define-public (LambdaLink . x)
	(apply cog-new-link (cons LambdaLinkType x)))
(set-procedure-property! LambdaLink 'documentation
" LambdaLink -- See https://wiki.opencog.org/w/LambdaLink for documentation.")
(define-public (Lambda . x)
	(apply cog-new-link (cons LambdaLinkType x)))
(set-procedure-property! Lambda 'documentation
" LambdaLink -- See https://wiki.opencog.org/w/LambdaLink for documentation.")
(define-public PutLinkType (cog-type->int 'PutLink))
(define-public (PutLink . x)
	(apply cog-new-link (cons PutLinkType x)))
(set-procedure-property! PutLink 'documentation
" PutLink -- See https://wiki.opencog.org/w/PutLink for documentation.")
(define-public (Put . x)
	(apply cog-new-link (cons PutLinkType x)))
(set-procedure-property! Put 'documentation
" PutLink -- See https://wiki.opencog.org/w/PutLink for documentation.")
(define-public JoinLinkType (cog-type->int 'JoinLink))
(define-public (JoinLink . x)
	(apply cog-new-link (cons JoinLinkType x)))
(set-procedure-property! JoinLink 'documentation
" JoinLink -- See https://wiki.opencog.org/w/JoinLink for documentation.")
(define-public (Join . x)
	(apply cog-new-link (cons JoinLinkType x)))
(set-procedure-property! Join 'documentation
" JoinLink -- See https://wiki.opencog.org/w/JoinLink for documentation.")
(define-public MinimalJoinLinkType (cog-type->int 'MinimalJoinLink))
(define-public (MinimalJoinLink . x)
	(apply cog-new-link (cons MinimalJoinLinkType x)))
(set-procedure-property! MinimalJoinLink 'documentation
" MinimalJoinLink -- See https://wiki.opencog.org/w/MinimalJoinLink for documentation.")
(define-public (MinimalJoin . x)
	(apply cog-new-link (cons MinimalJoinLinkType x)))
(set-procedure-property! MinimalJoin 'documentation
" MinimalJoinLink -- See https://wiki.opencog.org/w/MinimalJoinLink for documentation.")
(define-public UpperSetLinkType (cog-type->int 'UpperSetLink))
(define-public (UpperSetLink . x)
	(apply cog-new-link (cons UpperSetLinkType x)))
(set-procedure-property! UpperSetLink 'documentation
" UpperSetLink -- See https://wiki.opencog.org/w/UpperSetLink for documentation.")
(define-public (UpperSet . x)
	(apply cog-new-link (cons UpperSetLinkType x)))
(set-procedure-property! UpperSet 'documentation
" UpperSetLink -- See https://wiki.opencog.org/w/UpperSetLink for documentation.")
(define-public MaximalJoinLinkType (cog-type->int 'MaximalJoinLink))
(define-public (MaximalJoinLink . x)
	(apply cog-new-link (cons MaximalJoinLinkType x)))
(set-procedure-property! MaximalJoinLink 'documentation
" MaximalJoinLink -- See https://wiki.opencog.org/w/MaximalJoinLink for documentation.")
(define-public (MaximalJoin . x)
	(apply cog-new-link (cons MaximalJoinLinkType x)))
(set-procedure-property! MaximalJoin 'documentation
" MaximalJoinLink -- See https://wiki.opencog.org/w/MaximalJoinLink for documentation.")
(define-public RuleLinkType (cog-type->int 'RuleLink))
(define-public (RuleLink . x)
	(apply cog-new-link (cons RuleLinkType x)))
(set-procedure-property! RuleLink 'documentation
" RuleLink -- See https://wiki.opencog.org/w/RuleLink for documentation.")
(define-public (Rule . x)
	(apply cog-new-link (cons RuleLinkType x)))
(set-procedure-property! Rule 'documentation
" RuleLink -- See https://wiki.opencog.org/w/RuleLink for documentation.")
(define-public VardeclOfLinkType (cog-type->int 'VardeclOfLink))
(define-public (VardeclOfLink . x)
	(apply cog-new-link (cons VardeclOfLinkType x)))
(set-procedure-property! VardeclOfLink 'documentation
" VardeclOfLink -- See https://wiki.opencog.org/w/VardeclOfLink for documentation.")
(define-public (VardeclOf . x)
	(apply cog-new-link (cons VardeclOfLinkType x)))
(set-procedure-property! VardeclOf 'documentation
" VardeclOfLink -- See https://wiki.opencog.org/w/VardeclOfLink for documentation.")
(define-public PremiseOfLinkType (cog-type->int 'PremiseOfLink))
(define-public (PremiseOfLink . x)
	(apply cog-new-link (cons PremiseOfLinkType x)))
(set-procedure-property! PremiseOfLink 'documentation
" PremiseOfLink -- See https://wiki.opencog.org/w/PremiseOfLink for documentation.")
(define-public (PremiseOf . x)
	(apply cog-new-link (cons PremiseOfLinkType x)))
(set-procedure-property! PremiseOf 'documentation
" PremiseOfLink -- See https://wiki.opencog.org/w/PremiseOfLink for documentation.")
(define-public ConclusionOfLinkType (cog-type->int 'ConclusionOfLink))
(define-public (ConclusionOfLink . x)
	(apply cog-new-link (cons ConclusionOfLinkType x)))
(set-procedure-property! ConclusionOfLink 'documentation
" ConclusionOfLink -- See https://wiki.opencog.org/w/ConclusionOfLink for documentation.")
(define-public (ConclusionOf . x)
	(apply cog-new-link (cons ConclusionOfLinkType x)))
(set-procedure-property! ConclusionOf 'documentation
" ConclusionOfLink -- See https://wiki.opencog.org/w/ConclusionOfLink for documentation.")
(define-public PatternLinkType (cog-type->int 'PatternLink))
(define-public (PatternLink . x)
	(apply cog-new-link (cons PatternLinkType x)))
(set-procedure-property! PatternLink 'documentation
" PatternLink -- See https://wiki.opencog.org/w/PatternLink for documentation.")
(define-public (Pattern . x)
	(apply cog-new-link (cons PatternLinkType x)))
(set-procedure-property! Pattern 'documentation
" PatternLink -- See https://wiki.opencog.org/w/PatternLink for documentation.")
(define-public SatisfyingLinkType (cog-type->int 'SatisfyingLink))
(define-public (SatisfyingLink . x)
	(apply cog-new-link (cons SatisfyingLinkType x)))
(set-procedure-property! SatisfyingLink 'documentation
" SatisfyingLink -- See https://wiki.opencog.org/w/SatisfyingLink for documentation.")
(define-public (Satisfying . x)
	(apply cog-new-link (cons SatisfyingLinkType x)))
(set-procedure-property! Satisfying 'documentation
" SatisfyingLink -- See https://wiki.opencog.org/w/SatisfyingLink for documentation.")
(define-public MeetLinkType (cog-type->int 'MeetLink))
(define-public (MeetLink . x)
	(apply cog-new-link (cons MeetLinkType x)))
(set-procedure-property! MeetLink 'documentation
" MeetLink -- See https://wiki.opencog.org/w/MeetLink for documentation.")
(define-public (Meet . x)
	(apply cog-new-link (cons MeetLinkType x)))
(set-procedure-property! Meet 'documentation
" MeetLink -- See https://wiki.opencog.org/w/MeetLink for documentation.")
(define-public GetLinkType (cog-type->int 'GetLink))
(define-public (GetLink . x)
	(apply cog-new-link (cons GetLinkType x)))
(set-procedure-property! GetLink 'documentation
" GetLink -- See https://wiki.opencog.org/w/GetLink for documentation.")
(define-public (Get . x)
	(apply cog-new-link (cons GetLinkType x)))
(set-procedure-property! Get 'documentation
" GetLink -- See https://wiki.opencog.org/w/GetLink for documentation.")
(define-public QueryLinkType (cog-type->int 'QueryLink))
(define-public (QueryLink . x)
	(apply cog-new-link (cons QueryLinkType x)))
(set-procedure-property! QueryLink 'documentation
" QueryLink -- See https://wiki.opencog.org/w/QueryLink for documentation.")
(define-public (Query . x)
	(apply cog-new-link (cons QueryLinkType x)))
(set-procedure-property! Query 'documentation
" QueryLink -- See https://wiki.opencog.org/w/QueryLink for documentation.")
(define-public BindLinkType (cog-type->int 'BindLink))
(define-public (BindLink . x)
	(apply cog-new-link (cons BindLinkType x)))
(set-procedure-property! BindLink 'documentation
" BindLink -- See https://wiki.opencog.org/w/BindLink for documentation.")
(define-public (Bind . x)
	(apply cog-new-link (cons BindLinkType x)))
(set-procedure-property! Bind 'documentation
" BindLink -- See https://wiki.opencog.org/w/BindLink for documentation.")
(define-public DualLinkType (cog-type->int 'DualLink))
(define-public (DualLink . x)
	(apply cog-new-link (cons DualLinkType x)))
(set-procedure-property! DualLink 'documentation
" DualLink -- See https://wiki.opencog.org/w/DualLink for documentation.")
(define-public (Dual . x)
	(apply cog-new-link (cons DualLinkType x)))
(set-procedure-property! Dual 'documentation
" DualLink -- See https://wiki.opencog.org/w/DualLink for documentation.")
(define-public EvaluationLinkType (cog-type->int 'EvaluationLink))
(define-public (EvaluationLink . x)
	(apply cog-new-link (cons EvaluationLinkType x)))
(set-procedure-property! EvaluationLink 'documentation
" EvaluationLink -- See https://wiki.opencog.org/w/EvaluationLink for documentation.")
(define-public (Evaluation . x)
	(apply cog-new-link (cons EvaluationLinkType x)))
(set-procedure-property! Evaluation 'documentation
" EvaluationLink -- See https://wiki.opencog.org/w/EvaluationLink for documentation.")
(define-public TypeNodeType (cog-type->int 'TypeNode))
(define-public (TypeNode . x)
	(apply cog-new-node (cons TypeNodeType x)))
(set-procedure-property! TypeNode 'documentation
" TypeNode -- See https://wiki.opencog.org/w/TypeNode for documentation.")
(define-public (Type . x)
	(apply cog-new-node (cons TypeNodeType x)))
(set-procedure-property! Type 'documentation
" TypeNode -- See https://wiki.opencog.org/w/TypeNode for documentation.")
(define-public TypeInhNodeType (cog-type->int 'TypeInhNode))
(define-public (TypeInhNode . x)
	(apply cog-new-node (cons TypeInhNodeType x)))
(set-procedure-property! TypeInhNode 'documentation
" TypeInhNode -- See https://wiki.opencog.org/w/TypeInhNode for documentation.")
(define-public (TypeInh . x)
	(apply cog-new-node (cons TypeInhNodeType x)))
(set-procedure-property! TypeInh 'documentation
" TypeInhNode -- See https://wiki.opencog.org/w/TypeInhNode for documentation.")
(define-public TypeCoInhNodeType (cog-type->int 'TypeCoInhNode))
(define-public (TypeCoInhNode . x)
	(apply cog-new-node (cons TypeCoInhNodeType x)))
(set-procedure-property! TypeCoInhNode 'documentation
" TypeCoInhNode -- See https://wiki.opencog.org/w/TypeCoInhNode for documentation.")
(define-public (TypeCoInh . x)
	(apply cog-new-node (cons TypeCoInhNodeType x)))
(set-procedure-property! TypeCoInh 'documentation
" TypeCoInhNode -- See https://wiki.opencog.org/w/TypeCoInhNode for documentation.")
(define-public DefinedTypeNodeType (cog-type->int 'DefinedTypeNode))
(define-public (DefinedTypeNode . x)
	(apply cog-new-node (cons DefinedTypeNodeType x)))
(set-procedure-property! DefinedTypeNode 'documentation
" DefinedTypeNode -- See https://wiki.opencog.org/w/DefinedTypeNode for documentation.")
(define-public (DefinedType . x)
	(apply cog-new-node (cons DefinedTypeNodeType x)))
(set-procedure-property! DefinedType 'documentation
" DefinedTypeNode -- See https://wiki.opencog.org/w/DefinedTypeNode for documentation.")
(define-public TypeChoiceType (cog-type->int 'TypeChoice))
(define-public (TypeChoice . x)
	(apply cog-new-link (cons TypeChoiceType x)))
(set-procedure-property! TypeChoice 'documentation
" TypeChoice -- See https://wiki.opencog.org/w/TypeChoice for documentation.")
(define-public (TypeChoice . x)
	(apply cog-new-link (cons TypeChoiceType x)))
(set-procedure-property! TypeChoice 'documentation
" TypeChoice -- See https://wiki.opencog.org/w/TypeChoice for documentation.")
(define-public TypeIntersectionLinkType (cog-type->int 'TypeIntersectionLink))
(define-public (TypeIntersectionLink . x)
	(apply cog-new-link (cons TypeIntersectionLinkType x)))
(set-procedure-property! TypeIntersectionLink 'documentation
" TypeIntersectionLink -- See https://wiki.opencog.org/w/TypeIntersectionLink for documentation.")
(define-public (TypeIntersection . x)
	(apply cog-new-link (cons TypeIntersectionLinkType x)))
(set-procedure-property! TypeIntersection 'documentation
" TypeIntersectionLink -- See https://wiki.opencog.org/w/TypeIntersectionLink for documentation.")
(define-public ArrowLinkType (cog-type->int 'ArrowLink))
(define-public (ArrowLink . x)
	(apply cog-new-link (cons ArrowLinkType x)))
(set-procedure-property! ArrowLink 'documentation
" ArrowLink -- See https://wiki.opencog.org/w/ArrowLink for documentation.")
(define-public (Arrow . x)
	(apply cog-new-link (cons ArrowLinkType x)))
(set-procedure-property! Arrow 'documentation
" ArrowLink -- See https://wiki.opencog.org/w/ArrowLink for documentation.")
(define-public SignatureLinkType (cog-type->int 'SignatureLink))
(define-public (SignatureLink . x)
	(apply cog-new-link (cons SignatureLinkType x)))
(set-procedure-property! SignatureLink 'documentation
" SignatureLink -- See https://wiki.opencog.org/w/SignatureLink for documentation.")
(define-public (Signature . x)
	(apply cog-new-link (cons SignatureLinkType x)))
(set-procedure-property! Signature 'documentation
" SignatureLink -- See https://wiki.opencog.org/w/SignatureLink for documentation.")
(define-public SignNodeType (cog-type->int 'SignNode))
(define-public (SignNode . x)
	(apply cog-new-node (cons SignNodeType x)))
(set-procedure-property! SignNode 'documentation
" SignNode -- See https://wiki.opencog.org/w/SignNode for documentation.")
(define-public (Sign . x)
	(apply cog-new-node (cons SignNodeType x)))
(set-procedure-property! Sign 'documentation
" SignNode -- See https://wiki.opencog.org/w/SignNode for documentation.")
(define-public LinkSignatureLinkType (cog-type->int 'LinkSignatureLink))
(define-public (LinkSignatureLink . x)
	(apply cog-new-link (cons LinkSignatureLinkType x)))
(set-procedure-property! LinkSignatureLink 'documentation
" LinkSignatureLink -- See https://wiki.opencog.org/w/LinkSignatureLink for documentation.")
(define-public (LinkSignature . x)
	(apply cog-new-link (cons LinkSignatureLinkType x)))
(set-procedure-property! LinkSignature 'documentation
" LinkSignatureLink -- See https://wiki.opencog.org/w/LinkSignatureLink for documentation.")
(define-public TypedVariableLinkType (cog-type->int 'TypedVariableLink))
(define-public (TypedVariableLink . x)
	(apply cog-new-link (cons TypedVariableLinkType x)))
(set-procedure-property! TypedVariableLink 'documentation
" TypedVariableLink -- See https://wiki.opencog.org/w/TypedVariableLink for documentation.")
(define-public (TypedVariable . x)
	(apply cog-new-link (cons TypedVariableLinkType x)))
(set-procedure-property! TypedVariable 'documentation
" TypedVariableLink -- See https://wiki.opencog.org/w/TypedVariableLink for documentation.")
(define-public TypedAtomLinkType (cog-type->int 'TypedAtomLink))
(define-public (TypedAtomLink . x)
	(apply cog-new-link (cons TypedAtomLinkType x)))
(set-procedure-property! TypedAtomLink 'documentation
" TypedAtomLink -- See https://wiki.opencog.org/w/TypedAtomLink for documentation.")
(define-public (TypedAtom . x)
	(apply cog-new-link (cons TypedAtomLinkType x)))
(set-procedure-property! TypedAtom 'documentation
" TypedAtomLink -- See https://wiki.opencog.org/w/TypedAtomLink for documentation.")
(define-public IntervalLinkType (cog-type->int 'IntervalLink))
(define-public (IntervalLink . x)
	(apply cog-new-link (cons IntervalLinkType x)))
(set-procedure-property! IntervalLink 'documentation
" IntervalLink -- See https://wiki.opencog.org/w/IntervalLink for documentation.")
(define-public (Interval . x)
	(apply cog-new-link (cons IntervalLinkType x)))
(set-procedure-property! Interval 'documentation
" IntervalLink -- See https://wiki.opencog.org/w/IntervalLink for documentation.")
(define-public AnchorNodeType (cog-type->int 'AnchorNode))
(define-public (AnchorNode . x)
	(apply cog-new-node (cons AnchorNodeType x)))
(set-procedure-property! AnchorNode 'documentation
" AnchorNode -- See https://wiki.opencog.org/w/AnchorNode for documentation.")
(define-public (Anchor . x)
	(apply cog-new-node (cons AnchorNodeType x)))
(set-procedure-property! Anchor 'documentation
" AnchorNode -- See https://wiki.opencog.org/w/AnchorNode for documentation.")
(define-public SimilarityLinkType (cog-type->int 'SimilarityLink))
(define-public (SimilarityLink . x)
	(apply cog-new-link (cons SimilarityLinkType x)))
(set-procedure-property! SimilarityLink 'documentation
" SimilarityLink -- See https://wiki.opencog.org/w/SimilarityLink for documentation.")
(define-public (Similarity . x)
	(apply cog-new-link (cons SimilarityLinkType x)))
(set-procedure-property! Similarity 'documentation
" SimilarityLink -- See https://wiki.opencog.org/w/SimilarityLink for documentation.")
(define-public VirtualLinkType (cog-type->int 'VirtualLink))
(define-public (VirtualLink . x)
	(apply cog-new-link (cons VirtualLinkType x)))
(set-procedure-property! VirtualLink 'documentation
" VirtualLink -- See https://wiki.opencog.org/w/VirtualLink for documentation.")
(define-public (Virtual . x)
	(apply cog-new-link (cons VirtualLinkType x)))
(set-procedure-property! Virtual 'documentation
" VirtualLink -- See https://wiki.opencog.org/w/VirtualLink for documentation.")
(define-public GreaterThanLinkType (cog-type->int 'GreaterThanLink))
(define-public (GreaterThanLink . x)
	(apply cog-new-link (cons GreaterThanLinkType x)))
(set-procedure-property! GreaterThanLink 'documentation
" GreaterThanLink -- See https://wiki.opencog.org/w/GreaterThanLink for documentation.")
(define-public (GreaterThan . x)
	(apply cog-new-link (cons GreaterThanLinkType x)))
(set-procedure-property! GreaterThan 'documentation
" GreaterThanLink -- See https://wiki.opencog.org/w/GreaterThanLink for documentation.")
(define-public LessThanLinkType (cog-type->int 'LessThanLink))
(define-public (LessThanLink . x)
	(apply cog-new-link (cons LessThanLinkType x)))
(set-procedure-property! LessThanLink 'documentation
" LessThanLink -- See https://wiki.opencog.org/w/LessThanLink for documentation.")
(define-public (LessThan . x)
	(apply cog-new-link (cons LessThanLinkType x)))
(set-procedure-property! LessThan 'documentation
" LessThanLink -- See https://wiki.opencog.org/w/LessThanLink for documentation.")
(define-public IsClosedLinkType (cog-type->int 'IsClosedLink))
(define-public (IsClosedLink . x)
	(apply cog-new-link (cons IsClosedLinkType x)))
(set-procedure-property! IsClosedLink 'documentation
" IsClosedLink -- See https://wiki.opencog.org/w/IsClosedLink for documentation.")
(define-public (IsClosed . x)
	(apply cog-new-link (cons IsClosedLinkType x)))
(set-procedure-property! IsClosed 'documentation
" IsClosedLink -- See https://wiki.opencog.org/w/IsClosedLink for documentation.")
(define-public IsTrueLinkType (cog-type->int 'IsTrueLink))
(define-public (IsTrueLink . x)
	(apply cog-new-link (cons IsTrueLinkType x)))
(set-procedure-property! IsTrueLink 'documentation
" IsTrueLink -- See https://wiki.opencog.org/w/IsTrueLink for documentation.")
(define-public (IsTrue . x)
	(apply cog-new-link (cons IsTrueLinkType x)))
(set-procedure-property! IsTrue 'documentation
" IsTrueLink -- See https://wiki.opencog.org/w/IsTrueLink for documentation.")
(define-public IsFalseLinkType (cog-type->int 'IsFalseLink))
(define-public (IsFalseLink . x)
	(apply cog-new-link (cons IsFalseLinkType x)))
(set-procedure-property! IsFalseLink 'documentation
" IsFalseLink -- See https://wiki.opencog.org/w/IsFalseLink for documentation.")
(define-public (IsFalse . x)
	(apply cog-new-link (cons IsFalseLinkType x)))
(set-procedure-property! IsFalse 'documentation
" IsFalseLink -- See https://wiki.opencog.org/w/IsFalseLink for documentation.")
(define-public IdenticalLinkType (cog-type->int 'IdenticalLink))
(define-public (IdenticalLink . x)
	(apply cog-new-link (cons IdenticalLinkType x)))
(set-procedure-property! IdenticalLink 'documentation
" IdenticalLink -- See https://wiki.opencog.org/w/IdenticalLink for documentation.")
(define-public (Identical . x)
	(apply cog-new-link (cons IdenticalLinkType x)))
(set-procedure-property! Identical 'documentation
" IdenticalLink -- See https://wiki.opencog.org/w/IdenticalLink for documentation.")
(define-public EqualLinkType (cog-type->int 'EqualLink))
(define-public (EqualLink . x)
	(apply cog-new-link (cons EqualLinkType x)))
(set-procedure-property! EqualLink 'documentation
" EqualLink -- See https://wiki.opencog.org/w/EqualLink for documentation.")
(define-public (Equal . x)
	(apply cog-new-link (cons EqualLinkType x)))
(set-procedure-property! Equal 'documentation
" EqualLink -- See https://wiki.opencog.org/w/EqualLink for documentation.")
(define-public AlphaEqualLinkType (cog-type->int 'AlphaEqualLink))
(define-public (AlphaEqualLink . x)
	(apply cog-new-link (cons AlphaEqualLinkType x)))
(set-procedure-property! AlphaEqualLink 'documentation
" AlphaEqualLink -- See https://wiki.opencog.org/w/AlphaEqualLink for documentation.")
(define-public (AlphaEqual . x)
	(apply cog-new-link (cons AlphaEqualLinkType x)))
(set-procedure-property! AlphaEqual 'documentation
" AlphaEqualLink -- See https://wiki.opencog.org/w/AlphaEqualLink for documentation.")
(define-public ExclusiveLinkType (cog-type->int 'ExclusiveLink))
(define-public (ExclusiveLink . x)
	(apply cog-new-link (cons ExclusiveLinkType x)))
(set-procedure-property! ExclusiveLink 'documentation
" ExclusiveLink -- See https://wiki.opencog.org/w/ExclusiveLink for documentation.")
(define-public (Exclusive . x)
	(apply cog-new-link (cons ExclusiveLinkType x)))
(set-procedure-property! Exclusive 'documentation
" ExclusiveLink -- See https://wiki.opencog.org/w/ExclusiveLink for documentation.")
(define-public SatisfactionLinkType (cog-type->int 'SatisfactionLink))
(define-public (SatisfactionLink . x)
	(apply cog-new-link (cons SatisfactionLinkType x)))
(set-procedure-property! SatisfactionLink 'documentation
" SatisfactionLink -- See https://wiki.opencog.org/w/SatisfactionLink for documentation.")
(define-public (Satisfaction . x)
	(apply cog-new-link (cons SatisfactionLinkType x)))
(set-procedure-property! Satisfaction 'documentation
" SatisfactionLink -- See https://wiki.opencog.org/w/SatisfactionLink for documentation.")
(define-public FunctionLinkType (cog-type->int 'FunctionLink))
(define-public (FunctionLink . x)
	(apply cog-new-link (cons FunctionLinkType x)))
(set-procedure-property! FunctionLink 'documentation
" FunctionLink -- See https://wiki.opencog.org/w/FunctionLink for documentation.")
(define-public (Function . x)
	(apply cog-new-link (cons FunctionLinkType x)))
(set-procedure-property! Function 'documentation
" FunctionLink -- See https://wiki.opencog.org/w/FunctionLink for documentation.")
(define-public BoolOpLinkType (cog-type->int 'BoolOpLink))
(define-public (BoolOpLink . x)
	(apply cog-new-link (cons BoolOpLinkType x)))
(set-procedure-property! BoolOpLink 'documentation
" BoolOpLink -- See https://wiki.opencog.org/w/BoolOpLink for documentation.")
(define-public (BoolOp . x)
	(apply cog-new-link (cons BoolOpLinkType x)))
(set-procedure-property! BoolOp 'documentation
" BoolOpLink -- See https://wiki.opencog.org/w/BoolOpLink for documentation.")
(define-public BoolAndLinkType (cog-type->int 'BoolAndLink))
(define-public (BoolAndLink . x)
	(apply cog-new-link (cons BoolAndLinkType x)))
(set-procedure-property! BoolAndLink 'documentation
" BoolAndLink -- See https://wiki.opencog.org/w/BoolAndLink for documentation.")
(define-public (BoolAnd . x)
	(apply cog-new-link (cons BoolAndLinkType x)))
(set-procedure-property! BoolAnd 'documentation
" BoolAndLink -- See https://wiki.opencog.org/w/BoolAndLink for documentation.")
(define-public BoolOrLinkType (cog-type->int 'BoolOrLink))
(define-public (BoolOrLink . x)
	(apply cog-new-link (cons BoolOrLinkType x)))
(set-procedure-property! BoolOrLink 'documentation
" BoolOrLink -- See https://wiki.opencog.org/w/BoolOrLink for documentation.")
(define-public (BoolOr . x)
	(apply cog-new-link (cons BoolOrLinkType x)))
(set-procedure-property! BoolOr 'documentation
" BoolOrLink -- See https://wiki.opencog.org/w/BoolOrLink for documentation.")
(define-public BoolNotLinkType (cog-type->int 'BoolNotLink))
(define-public (BoolNotLink . x)
	(apply cog-new-link (cons BoolNotLinkType x)))
(set-procedure-property! BoolNotLink 'documentation
" BoolNotLink -- See https://wiki.opencog.org/w/BoolNotLink for documentation.")
(define-public (BoolNot . x)
	(apply cog-new-link (cons BoolNotLinkType x)))
(set-procedure-property! BoolNot 'documentation
" BoolNotLink -- See https://wiki.opencog.org/w/BoolNotLink for documentation.")
(define-public NumericFunctionLinkType (cog-type->int 'NumericFunctionLink))
(define-public (NumericFunctionLink . x)
	(apply cog-new-link (cons NumericFunctionLinkType x)))
(set-procedure-property! NumericFunctionLink 'documentation
" NumericFunctionLink -- See https://wiki.opencog.org/w/NumericFunctionLink for documentation.")
(define-public (NumericFunction . x)
	(apply cog-new-link (cons NumericFunctionLinkType x)))
(set-procedure-property! NumericFunction 'documentation
" NumericFunctionLink -- See https://wiki.opencog.org/w/NumericFunctionLink for documentation.")
(define-public FoldLinkType (cog-type->int 'FoldLink))
(define-public (FoldLink . x)
	(apply cog-new-link (cons FoldLinkType x)))
(set-procedure-property! FoldLink 'documentation
" FoldLink -- See https://wiki.opencog.org/w/FoldLink for documentation.")
(define-public (Fold . x)
	(apply cog-new-link (cons FoldLinkType x)))
(set-procedure-property! Fold 'documentation
" FoldLink -- See https://wiki.opencog.org/w/FoldLink for documentation.")
(define-public ArithmeticLinkType (cog-type->int 'ArithmeticLink))
(define-public (ArithmeticLink . x)
	(apply cog-new-link (cons ArithmeticLinkType x)))
(set-procedure-property! ArithmeticLink 'documentation
" ArithmeticLink -- See https://wiki.opencog.org/w/ArithmeticLink for documentation.")
(define-public (Arithmetic . x)
	(apply cog-new-link (cons ArithmeticLinkType x)))
(set-procedure-property! Arithmetic 'documentation
" ArithmeticLink -- See https://wiki.opencog.org/w/ArithmeticLink for documentation.")
(define-public PlusLinkType (cog-type->int 'PlusLink))
(define-public (PlusLink . x)
	(apply cog-new-link (cons PlusLinkType x)))
(set-procedure-property! PlusLink 'documentation
" PlusLink -- See https://wiki.opencog.org/w/PlusLink for documentation.")
(define-public (Plus . x)
	(apply cog-new-link (cons PlusLinkType x)))
(set-procedure-property! Plus 'documentation
" PlusLink -- See https://wiki.opencog.org/w/PlusLink for documentation.")
(define-public MinusLinkType (cog-type->int 'MinusLink))
(define-public (MinusLink . x)
	(apply cog-new-link (cons MinusLinkType x)))
(set-procedure-property! MinusLink 'documentation
" MinusLink -- See https://wiki.opencog.org/w/MinusLink for documentation.")
(define-public (Minus . x)
	(apply cog-new-link (cons MinusLinkType x)))
(set-procedure-property! Minus 'documentation
" MinusLink -- See https://wiki.opencog.org/w/MinusLink for documentation.")
(define-public TimesLinkType (cog-type->int 'TimesLink))
(define-public (TimesLink . x)
	(apply cog-new-link (cons TimesLinkType x)))
(set-procedure-property! TimesLink 'documentation
" TimesLink -- See https://wiki.opencog.org/w/TimesLink for documentation.")
(define-public (Times . x)
	(apply cog-new-link (cons TimesLinkType x)))
(set-procedure-property! Times 'documentation
" TimesLink -- See https://wiki.opencog.org/w/TimesLink for documentation.")
(define-public DivideLinkType (cog-type->int 'DivideLink))
(define-public (DivideLink . x)
	(apply cog-new-link (cons DivideLinkType x)))
(set-procedure-property! DivideLink 'documentation
" DivideLink -- See https://wiki.opencog.org/w/DivideLink for documentation.")
(define-public (Divide . x)
	(apply cog-new-link (cons DivideLinkType x)))
(set-procedure-property! Divide 'documentation
" DivideLink -- See https://wiki.opencog.org/w/DivideLink for documentation.")
(define-public MinLinkType (cog-type->int 'MinLink))
(define-public (MinLink . x)
	(apply cog-new-link (cons MinLinkType x)))
(set-procedure-property! MinLink 'documentation
" MinLink -- See https://wiki.opencog.org/w/MinLink for documentation.")
(define-public (Min . x)
	(apply cog-new-link (cons MinLinkType x)))
(set-procedure-property! Min 'documentation
" MinLink -- See https://wiki.opencog.org/w/MinLink for documentation.")
(define-public MaxLinkType (cog-type->int 'MaxLink))
(define-public (MaxLink . x)
	(apply cog-new-link (cons MaxLinkType x)))
(set-procedure-property! MaxLink 'documentation
" MaxLink -- See https://wiki.opencog.org/w/MaxLink for documentation.")
(define-public (Max . x)
	(apply cog-new-link (cons MaxLinkType x)))
(set-procedure-property! Max 'documentation
" MaxLink -- See https://wiki.opencog.org/w/MaxLink for documentation.")
(define-public FloorLinkType (cog-type->int 'FloorLink))
(define-public (FloorLink . x)
	(apply cog-new-link (cons FloorLinkType x)))
(set-procedure-property! FloorLink 'documentation
" FloorLink -- See https://wiki.opencog.org/w/FloorLink for documentation.")
(define-public (Floor . x)
	(apply cog-new-link (cons FloorLinkType x)))
(set-procedure-property! Floor 'documentation
" FloorLink -- See https://wiki.opencog.org/w/FloorLink for documentation.")
(define-public HeavisideLinkType (cog-type->int 'HeavisideLink))
(define-public (HeavisideLink . x)
	(apply cog-new-link (cons HeavisideLinkType x)))
(set-procedure-property! HeavisideLink 'documentation
" HeavisideLink -- See https://wiki.opencog.org/w/HeavisideLink for documentation.")
(define-public (Heaviside . x)
	(apply cog-new-link (cons HeavisideLinkType x)))
(set-procedure-property! Heaviside 'documentation
" HeavisideLink -- See https://wiki.opencog.org/w/HeavisideLink for documentation.")
(define-public ImpulseLinkType (cog-type->int 'ImpulseLink))
(define-public (ImpulseLink . x)
	(apply cog-new-link (cons ImpulseLinkType x)))
(set-procedure-property! ImpulseLink 'documentation
" ImpulseLink -- See https://wiki.opencog.org/w/ImpulseLink for documentation.")
(define-public (Impulse . x)
	(apply cog-new-link (cons ImpulseLinkType x)))
(set-procedure-property! Impulse 'documentation
" ImpulseLink -- See https://wiki.opencog.org/w/ImpulseLink for documentation.")
(define-public Log2LinkType (cog-type->int 'Log2Link))
(define-public (Log2Link . x)
	(apply cog-new-link (cons Log2LinkType x)))
(set-procedure-property! Log2Link 'documentation
" Log2Link -- See https://wiki.opencog.org/w/Log2Link for documentation.")
(define-public (Log2 . x)
	(apply cog-new-link (cons Log2LinkType x)))
(set-procedure-property! Log2 'documentation
" Log2Link -- See https://wiki.opencog.org/w/Log2Link for documentation.")
(define-public PowLinkType (cog-type->int 'PowLink))
(define-public (PowLink . x)
	(apply cog-new-link (cons PowLinkType x)))
(set-procedure-property! PowLink 'documentation
" PowLink -- See https://wiki.opencog.org/w/PowLink for documentation.")
(define-public (Pow . x)
	(apply cog-new-link (cons PowLinkType x)))
(set-procedure-property! Pow 'documentation
" PowLink -- See https://wiki.opencog.org/w/PowLink for documentation.")
(define-public RandomNumberLinkType (cog-type->int 'RandomNumberLink))
(define-public (RandomNumberLink . x)
	(apply cog-new-link (cons RandomNumberLinkType x)))
(set-procedure-property! RandomNumberLink 'documentation
" RandomNumberLink -- See https://wiki.opencog.org/w/RandomNumberLink for documentation.")
(define-public (RandomNumber . x)
	(apply cog-new-link (cons RandomNumberLinkType x)))
(set-procedure-property! RandomNumber 'documentation
" RandomNumberLink -- See https://wiki.opencog.org/w/RandomNumberLink for documentation.")
(define-public SineLinkType (cog-type->int 'SineLink))
(define-public (SineLink . x)
	(apply cog-new-link (cons SineLinkType x)))
(set-procedure-property! SineLink 'documentation
" SineLink -- See https://wiki.opencog.org/w/SineLink for documentation.")
(define-public (Sine . x)
	(apply cog-new-link (cons SineLinkType x)))
(set-procedure-property! Sine 'documentation
" SineLink -- See https://wiki.opencog.org/w/SineLink for documentation.")
(define-public AccumulateLinkType (cog-type->int 'AccumulateLink))
(define-public (AccumulateLink . x)
	(apply cog-new-link (cons AccumulateLinkType x)))
(set-procedure-property! AccumulateLink 'documentation
" AccumulateLink -- See https://wiki.opencog.org/w/AccumulateLink for documentation.")
(define-public (Accumulate . x)
	(apply cog-new-link (cons AccumulateLinkType x)))
(set-procedure-property! Accumulate 'documentation
" AccumulateLink -- See https://wiki.opencog.org/w/AccumulateLink for documentation.")
(define-public DecimateLinkType (cog-type->int 'DecimateLink))
(define-public (DecimateLink . x)
	(apply cog-new-link (cons DecimateLinkType x)))
(set-procedure-property! DecimateLink 'documentation
" DecimateLink -- See https://wiki.opencog.org/w/DecimateLink for documentation.")
(define-public (Decimate . x)
	(apply cog-new-link (cons DecimateLinkType x)))
(set-procedure-property! Decimate 'documentation
" DecimateLink -- See https://wiki.opencog.org/w/DecimateLink for documentation.")
(define-public ElementOfLinkType (cog-type->int 'ElementOfLink))
(define-public (ElementOfLink . x)
	(apply cog-new-link (cons ElementOfLinkType x)))
(set-procedure-property! ElementOfLink 'documentation
" ElementOfLink -- See https://wiki.opencog.org/w/ElementOfLink for documentation.")
(define-public (ElementOf . x)
	(apply cog-new-link (cons ElementOfLinkType x)))
(set-procedure-property! ElementOf 'documentation
" ElementOfLink -- See https://wiki.opencog.org/w/ElementOfLink for documentation.")
(define-public NumberOfLinkType (cog-type->int 'NumberOfLink))
(define-public (NumberOfLink . x)
	(apply cog-new-link (cons NumberOfLinkType x)))
(set-procedure-property! NumberOfLink 'documentation
" NumberOfLink -- See https://wiki.opencog.org/w/NumberOfLink for documentation.")
(define-public (NumberOf . x)
	(apply cog-new-link (cons NumberOfLinkType x)))
(set-procedure-property! NumberOf 'documentation
" NumberOfLink -- See https://wiki.opencog.org/w/NumberOfLink for documentation.")
(define-public TimeLinkType (cog-type->int 'TimeLink))
(define-public (TimeLink . x)
	(apply cog-new-link (cons TimeLinkType x)))
(set-procedure-property! TimeLink 'documentation
" TimeLink -- See https://wiki.opencog.org/w/TimeLink for documentation.")
(define-public (Time . x)
	(apply cog-new-link (cons TimeLinkType x)))
(set-procedure-property! Time 'documentation
" TimeLink -- See https://wiki.opencog.org/w/TimeLink for documentation.")
(define-public ValueOfLinkType (cog-type->int 'ValueOfLink))
(define-public (ValueOfLink . x)
	(apply cog-new-link (cons ValueOfLinkType x)))
(set-procedure-property! ValueOfLink 'documentation
" ValueOfLink -- See https://wiki.opencog.org/w/ValueOfLink for documentation.")
(define-public (ValueOf . x)
	(apply cog-new-link (cons ValueOfLinkType x)))
(set-procedure-property! ValueOf 'documentation
" ValueOfLink -- See https://wiki.opencog.org/w/ValueOfLink for documentation.")
(define-public BoolValueOfLinkType (cog-type->int 'BoolValueOfLink))
(define-public (BoolValueOfLink . x)
	(apply cog-new-link (cons BoolValueOfLinkType x)))
(set-procedure-property! BoolValueOfLink 'documentation
" BoolValueOfLink -- See https://wiki.opencog.org/w/BoolValueOfLink for documentation.")
(define-public (BoolValueOf . x)
	(apply cog-new-link (cons BoolValueOfLinkType x)))
(set-procedure-property! BoolValueOf 'documentation
" BoolValueOfLink -- See https://wiki.opencog.org/w/BoolValueOfLink for documentation.")
(define-public FloatValueOfLinkType (cog-type->int 'FloatValueOfLink))
(define-public (FloatValueOfLink . x)
	(apply cog-new-link (cons FloatValueOfLinkType x)))
(set-procedure-property! FloatValueOfLink 'documentation
" FloatValueOfLink -- See https://wiki.opencog.org/w/FloatValueOfLink for documentation.")
(define-public (FloatValueOf . x)
	(apply cog-new-link (cons FloatValueOfLinkType x)))
(set-procedure-property! FloatValueOf 'documentation
" FloatValueOfLink -- See https://wiki.opencog.org/w/FloatValueOfLink for documentation.")
(define-public StreamValueOfLinkType (cog-type->int 'StreamValueOfLink))
(define-public (StreamValueOfLink . x)
	(apply cog-new-link (cons StreamValueOfLinkType x)))
(set-procedure-property! StreamValueOfLink 'documentation
" StreamValueOfLink -- See https://wiki.opencog.org/w/StreamValueOfLink for documentation.")
(define-public (StreamValueOf . x)
	(apply cog-new-link (cons StreamValueOfLinkType x)))
(set-procedure-property! StreamValueOf 'documentation
" StreamValueOfLink -- See https://wiki.opencog.org/w/StreamValueOfLink for documentation.")
(define-public TruthValueOfLinkType (cog-type->int 'TruthValueOfLink))
(define-public (TruthValueOfLink . x)
	(apply cog-new-link (cons TruthValueOfLinkType x)))
(set-procedure-property! TruthValueOfLink 'documentation
" TruthValueOfLink -- See https://wiki.opencog.org/w/TruthValueOfLink for documentation.")
(define-public (TruthValueOf . x)
	(apply cog-new-link (cons TruthValueOfLinkType x)))
(set-procedure-property! TruthValueOf 'documentation
" TruthValueOfLink -- See https://wiki.opencog.org/w/TruthValueOfLink for documentation.")
(define-public StrengthOfLinkType (cog-type->int 'StrengthOfLink))
(define-public (StrengthOfLink . x)
	(apply cog-new-link (cons StrengthOfLinkType x)))
(set-procedure-property! StrengthOfLink 'documentation
" StrengthOfLink -- See https://wiki.opencog.org/w/StrengthOfLink for documentation.")
(define-public (StrengthOf . x)
	(apply cog-new-link (cons StrengthOfLinkType x)))
(set-procedure-property! StrengthOf 'documentation
" StrengthOfLink -- See https://wiki.opencog.org/w/StrengthOfLink for documentation.")
(define-public ConfidenceOfLinkType (cog-type->int 'ConfidenceOfLink))
(define-public (ConfidenceOfLink . x)
	(apply cog-new-link (cons ConfidenceOfLinkType x)))
(set-procedure-property! ConfidenceOfLink 'documentation
" ConfidenceOfLink -- See https://wiki.opencog.org/w/ConfidenceOfLink for documentation.")
(define-public (ConfidenceOf . x)
	(apply cog-new-link (cons ConfidenceOfLinkType x)))
(set-procedure-property! ConfidenceOf 'documentation
" ConfidenceOfLink -- See https://wiki.opencog.org/w/ConfidenceOfLink for documentation.")
(define-public CountOfLinkType (cog-type->int 'CountOfLink))
(define-public (CountOfLink . x)
	(apply cog-new-link (cons CountOfLinkType x)))
(set-procedure-property! CountOfLink 'documentation
" CountOfLink -- See https://wiki.opencog.org/w/CountOfLink for documentation.")
(define-public (CountOf . x)
	(apply cog-new-link (cons CountOfLinkType x)))
(set-procedure-property! CountOf 'documentation
" CountOfLink -- See https://wiki.opencog.org/w/CountOfLink for documentation.")
(define-public SizeOfLinkType (cog-type->int 'SizeOfLink))
(define-public (SizeOfLink . x)
	(apply cog-new-link (cons SizeOfLinkType x)))
(set-procedure-property! SizeOfLink 'documentation
" SizeOfLink -- See https://wiki.opencog.org/w/SizeOfLink for documentation.")
(define-public (SizeOf . x)
	(apply cog-new-link (cons SizeOfLinkType x)))
(set-procedure-property! SizeOf 'documentation
" SizeOfLink -- See https://wiki.opencog.org/w/SizeOfLink for documentation.")
(define-public TypeOfLinkType (cog-type->int 'TypeOfLink))
(define-public (TypeOfLink . x)
	(apply cog-new-link (cons TypeOfLinkType x)))
(set-procedure-property! TypeOfLink 'documentation
" TypeOfLink -- See https://wiki.opencog.org/w/TypeOfLink for documentation.")
(define-public (TypeOf . x)
	(apply cog-new-link (cons TypeOfLinkType x)))
(set-procedure-property! TypeOf 'documentation
" TypeOfLink -- See https://wiki.opencog.org/w/TypeOfLink for documentation.")
(define-public IncomingOfLinkType (cog-type->int 'IncomingOfLink))
(define-public (IncomingOfLink . x)
	(apply cog-new-link (cons IncomingOfLinkType x)))
(set-procedure-property! IncomingOfLink 'documentation
" IncomingOfLink -- See https://wiki.opencog.org/w/IncomingOfLink for documentation.")
(define-public (IncomingOf . x)
	(apply cog-new-link (cons IncomingOfLinkType x)))
(set-procedure-property! IncomingOf 'documentation
" IncomingOfLink -- See https://wiki.opencog.org/w/IncomingOfLink for documentation.")
(define-public CollectionOfLinkType (cog-type->int 'CollectionOfLink))
(define-public (CollectionOfLink . x)
	(apply cog-new-link (cons CollectionOfLinkType x)))
(set-procedure-property! CollectionOfLink 'documentation
" CollectionOfLink -- See https://wiki.opencog.org/w/CollectionOfLink for documentation.")
(define-public (CollectionOf . x)
	(apply cog-new-link (cons CollectionOfLinkType x)))
(set-procedure-property! CollectionOf 'documentation
" CollectionOfLink -- See https://wiki.opencog.org/w/CollectionOfLink for documentation.")
(define-public SetValueLinkType (cog-type->int 'SetValueLink))
(define-public (SetValueLink . x)
	(apply cog-new-link (cons SetValueLinkType x)))
(set-procedure-property! SetValueLink 'documentation
" SetValueLink -- See https://wiki.opencog.org/w/SetValueLink for documentation.")
(define-public (SetValue . x)
	(apply cog-new-link (cons SetValueLinkType x)))
(set-procedure-property! SetValue 'documentation
" SetValueLink -- See https://wiki.opencog.org/w/SetValueLink for documentation.")
(define-public SetTVLinkType (cog-type->int 'SetTVLink))
(define-public (SetTVLink . x)
	(apply cog-new-link (cons SetTVLinkType x)))
(set-procedure-property! SetTVLink 'documentation
" SetTVLink -- See https://wiki.opencog.org/w/SetTVLink for documentation.")
(define-public (SetTV . x)
	(apply cog-new-link (cons SetTVLinkType x)))
(set-procedure-property! SetTV 'documentation
" SetTVLink -- See https://wiki.opencog.org/w/SetTVLink for documentation.")
(define-public ValueShimLinkType (cog-type->int 'ValueShimLink))
(define-public (ValueShimLink . x)
	(apply cog-new-link (cons ValueShimLinkType x)))
(set-procedure-property! ValueShimLink 'documentation
" ValueShimLink -- See https://wiki.opencog.org/w/ValueShimLink for documentation.")
(define-public (ValueShim . x)
	(apply cog-new-link (cons ValueShimLinkType x)))
(set-procedure-property! ValueShim 'documentation
" ValueShimLink -- See https://wiki.opencog.org/w/ValueShimLink for documentation.")
(define-public PromiseLinkType (cog-type->int 'PromiseLink))
(define-public (PromiseLink . x)
	(apply cog-new-link (cons PromiseLinkType x)))
(set-procedure-property! PromiseLink 'documentation
" PromiseLink -- See https://wiki.opencog.org/w/PromiseLink for documentation.")
(define-public (Promise . x)
	(apply cog-new-link (cons PromiseLinkType x)))
(set-procedure-property! Promise 'documentation
" PromiseLink -- See https://wiki.opencog.org/w/PromiseLink for documentation.")
(define-public PromisePredicateLinkType (cog-type->int 'PromisePredicateLink))
(define-public (PromisePredicateLink . x)
	(apply cog-new-link (cons PromisePredicateLinkType x)))
(set-procedure-property! PromisePredicateLink 'documentation
" PromisePredicateLink -- See https://wiki.opencog.org/w/PromisePredicateLink for documentation.")
(define-public (PromisePredicate . x)
	(apply cog-new-link (cons PromisePredicateLinkType x)))
(set-procedure-property! PromisePredicate 'documentation
" PromisePredicateLink -- See https://wiki.opencog.org/w/PromisePredicateLink for documentation.")
(define-public FormulaPredicateLinkType (cog-type->int 'FormulaPredicateLink))
(define-public (FormulaPredicateLink . x)
	(apply cog-new-link (cons FormulaPredicateLinkType x)))
(set-procedure-property! FormulaPredicateLink 'documentation
" FormulaPredicateLink -- See https://wiki.opencog.org/w/FormulaPredicateLink for documentation.")
(define-public (FormulaPredicate . x)
	(apply cog-new-link (cons FormulaPredicateLinkType x)))
(set-procedure-property! FormulaPredicate 'documentation
" FormulaPredicateLink -- See https://wiki.opencog.org/w/FormulaPredicateLink for documentation.")
(define-public FilterLinkType (cog-type->int 'FilterLink))
(define-public (FilterLink . x)
	(apply cog-new-link (cons FilterLinkType x)))
(set-procedure-property! FilterLink 'documentation
" FilterLink -- See https://wiki.opencog.org/w/FilterLink for documentation.")
(define-public (Filter . x)
	(apply cog-new-link (cons FilterLinkType x)))
(set-procedure-property! Filter 'documentation
" FilterLink -- See https://wiki.opencog.org/w/FilterLink for documentation.")
(define-public ExecutionOutputLinkType (cog-type->int 'ExecutionOutputLink))
(define-public (ExecutionOutputLink . x)
	(apply cog-new-link (cons ExecutionOutputLinkType x)))
(set-procedure-property! ExecutionOutputLink 'documentation
" ExecutionOutputLink -- See https://wiki.opencog.org/w/ExecutionOutputLink for documentation.")
(define-public (ExecutionOutput . x)
	(apply cog-new-link (cons ExecutionOutputLinkType x)))
(set-procedure-property! ExecutionOutput 'documentation
" ExecutionOutputLink -- See https://wiki.opencog.org/w/ExecutionOutputLink for documentation.")
(define-public RandomChoiceLinkType (cog-type->int 'RandomChoiceLink))
(define-public (RandomChoiceLink . x)
	(apply cog-new-link (cons RandomChoiceLinkType x)))
(set-procedure-property! RandomChoiceLink 'documentation
" RandomChoiceLink -- See https://wiki.opencog.org/w/RandomChoiceLink for documentation.")
(define-public (RandomChoice . x)
	(apply cog-new-link (cons RandomChoiceLinkType x)))
(set-procedure-property! RandomChoice 'documentation
" RandomChoiceLink -- See https://wiki.opencog.org/w/RandomChoiceLink for documentation.")
(define-public CondLinkType (cog-type->int 'CondLink))
(define-public (CondLink . x)
	(apply cog-new-link (cons CondLinkType x)))
(set-procedure-property! CondLink 'documentation
" CondLink -- See https://wiki.opencog.org/w/CondLink for documentation.")
(define-public (Cond . x)
	(apply cog-new-link (cons CondLinkType x)))
(set-procedure-property! Cond 'documentation
" CondLink -- See https://wiki.opencog.org/w/CondLink for documentation.")
(define-public SleepLinkType (cog-type->int 'SleepLink))
(define-public (SleepLink . x)
	(apply cog-new-link (cons SleepLinkType x)))
(set-procedure-property! SleepLink 'documentation
" SleepLink -- See https://wiki.opencog.org/w/SleepLink for documentation.")
(define-public (Sleep . x)
	(apply cog-new-link (cons SleepLinkType x)))
(set-procedure-property! Sleep 'documentation
" SleepLink -- See https://wiki.opencog.org/w/SleepLink for documentation.")
(define-public ParallelLinkType (cog-type->int 'ParallelLink))
(define-public (ParallelLink . x)
	(apply cog-new-link (cons ParallelLinkType x)))
(set-procedure-property! ParallelLink 'documentation
" ParallelLink -- See https://wiki.opencog.org/w/ParallelLink for documentation.")
(define-public (Parallel . x)
	(apply cog-new-link (cons ParallelLinkType x)))
(set-procedure-property! Parallel 'documentation
" ParallelLink -- See https://wiki.opencog.org/w/ParallelLink for documentation.")
(define-public ThreadJoinLinkType (cog-type->int 'ThreadJoinLink))
(define-public (ThreadJoinLink . x)
	(apply cog-new-link (cons ThreadJoinLinkType x)))
(set-procedure-property! ThreadJoinLink 'documentation
" ThreadJoinLink -- See https://wiki.opencog.org/w/ThreadJoinLink for documentation.")
(define-public (ThreadJoin . x)
	(apply cog-new-link (cons ThreadJoinLinkType x)))
(set-procedure-property! ThreadJoin 'documentation
" ThreadJoinLink -- See https://wiki.opencog.org/w/ThreadJoinLink for documentation.")
(define-public ExecuteThreadedLinkType (cog-type->int 'ExecuteThreadedLink))
(define-public (ExecuteThreadedLink . x)
	(apply cog-new-link (cons ExecuteThreadedLinkType x)))
(set-procedure-property! ExecuteThreadedLink 'documentation
" ExecuteThreadedLink -- See https://wiki.opencog.org/w/ExecuteThreadedLink for documentation.")
(define-public (ExecuteThreaded . x)
	(apply cog-new-link (cons ExecuteThreadedLinkType x)))
(set-procedure-property! ExecuteThreaded 'documentation
" ExecuteThreadedLink -- See https://wiki.opencog.org/w/ExecuteThreadedLink for documentation.")
(define-public PureExecLinkType (cog-type->int 'PureExecLink))
(define-public (PureExecLink . x)
	(apply cog-new-link (cons PureExecLinkType x)))
(set-procedure-property! PureExecLink 'documentation
" PureExecLink -- See https://wiki.opencog.org/w/PureExecLink for documentation.")
(define-public (PureExec . x)
	(apply cog-new-link (cons PureExecLinkType x)))
(set-procedure-property! PureExec 'documentation
" PureExecLink -- See https://wiki.opencog.org/w/PureExecLink for documentation.")
(define-public ProcedureNodeType (cog-type->int 'ProcedureNode))
(define-public (ProcedureNode . x)
	(apply cog-new-node (cons ProcedureNodeType x)))
(set-procedure-property! ProcedureNode 'documentation
" ProcedureNode -- See https://wiki.opencog.org/w/ProcedureNode for documentation.")
(define-public (Procedure . x)
	(apply cog-new-node (cons ProcedureNodeType x)))
(set-procedure-property! Procedure 'documentation
" ProcedureNode -- See https://wiki.opencog.org/w/ProcedureNode for documentation.")
(define-public DefinedProcedureNodeType (cog-type->int 'DefinedProcedureNode))
(define-public (DefinedProcedureNode . x)
	(apply cog-new-node (cons DefinedProcedureNodeType x)))
(set-procedure-property! DefinedProcedureNode 'documentation
" DefinedProcedureNode -- See https://wiki.opencog.org/w/DefinedProcedureNode for documentation.")
(define-public (DefinedProcedure . x)
	(apply cog-new-node (cons DefinedProcedureNodeType x)))
(set-procedure-property! DefinedProcedure 'documentation
" DefinedProcedureNode -- See https://wiki.opencog.org/w/DefinedProcedureNode for documentation.")
(define-public GroundedProcedureNodeType (cog-type->int 'GroundedProcedureNode))
(define-public (GroundedProcedureNode . x)
	(apply cog-new-node (cons GroundedProcedureNodeType x)))
(set-procedure-property! GroundedProcedureNode 'documentation
" GroundedProcedureNode -- See https://wiki.opencog.org/w/GroundedProcedureNode for documentation.")
(define-public (GroundedProcedure . x)
	(apply cog-new-node (cons GroundedProcedureNodeType x)))
(set-procedure-property! GroundedProcedure 'documentation
" GroundedProcedureNode -- See https://wiki.opencog.org/w/GroundedProcedureNode for documentation.")
(define-public GroundedPredicateNodeType (cog-type->int 'GroundedPredicateNode))
(define-public (GroundedPredicateNode . x)
	(apply cog-new-node (cons GroundedPredicateNodeType x)))
(set-procedure-property! GroundedPredicateNode 'documentation
" GroundedPredicateNode -- See https://wiki.opencog.org/w/GroundedPredicateNode for documentation.")
(define-public (GroundedPredicate . x)
	(apply cog-new-node (cons GroundedPredicateNodeType x)))
(set-procedure-property! GroundedPredicate 'documentation
" GroundedPredicateNode -- See https://wiki.opencog.org/w/GroundedPredicateNode for documentation.")
(define-public DefinedPredicateNodeType (cog-type->int 'DefinedPredicateNode))
(define-public (DefinedPredicateNode . x)
	(apply cog-new-node (cons DefinedPredicateNodeType x)))
(set-procedure-property! DefinedPredicateNode 'documentation
" DefinedPredicateNode -- See https://wiki.opencog.org/w/DefinedPredicateNode for documentation.")
(define-public (DefinedPredicate . x)
	(apply cog-new-node (cons DefinedPredicateNodeType x)))
(set-procedure-property! DefinedPredicate 'documentation
" DefinedPredicateNode -- See https://wiki.opencog.org/w/DefinedPredicateNode for documentation.")
(define-public SchemaNodeType (cog-type->int 'SchemaNode))
(define-public (SchemaNode . x)
	(apply cog-new-node (cons SchemaNodeType x)))
(set-procedure-property! SchemaNode 'documentation
" SchemaNode -- See https://wiki.opencog.org/w/SchemaNode for documentation.")
(define-public (Schema . x)
	(apply cog-new-node (cons SchemaNodeType x)))
(set-procedure-property! Schema 'documentation
" SchemaNode -- See https://wiki.opencog.org/w/SchemaNode for documentation.")
(define-public DefinedSchemaNodeType (cog-type->int 'DefinedSchemaNode))
(define-public (DefinedSchemaNode . x)
	(apply cog-new-node (cons DefinedSchemaNodeType x)))
(set-procedure-property! DefinedSchemaNode 'documentation
" DefinedSchemaNode -- See https://wiki.opencog.org/w/DefinedSchemaNode for documentation.")
(define-public (DefinedSchema . x)
	(apply cog-new-node (cons DefinedSchemaNodeType x)))
(set-procedure-property! DefinedSchema 'documentation
" DefinedSchemaNode -- See https://wiki.opencog.org/w/DefinedSchemaNode for documentation.")
(define-public GroundedSchemaNodeType (cog-type->int 'GroundedSchemaNode))
(define-public (GroundedSchemaNode . x)
	(apply cog-new-node (cons GroundedSchemaNodeType x)))
(set-procedure-property! GroundedSchemaNode 'documentation
" GroundedSchemaNode -- See https://wiki.opencog.org/w/GroundedSchemaNode for documentation.")
(define-public (GroundedSchema . x)
	(apply cog-new-node (cons GroundedSchemaNodeType x)))
(set-procedure-property! GroundedSchema 'documentation
" GroundedSchemaNode -- See https://wiki.opencog.org/w/GroundedSchemaNode for documentation.")
(define-public ForeignAstType (cog-type->int 'ForeignAst))
(define-public (ForeignAst . x)
	(apply cog-new-ast (cons ForeignAstType x)))
(define-public SexprAstType (cog-type->int 'SexprAst))
(define-public (SexprAst . x)
	(apply cog-new-ast (cons SexprAstType x)))
(define-public DatalogAstType (cog-type->int 'DatalogAst))
(define-public (DatalogAst . x)
	(apply cog-new-ast (cons DatalogAstType x)))
(define-public JsonAstType (cog-type->int 'JsonAst))
(define-public (JsonAst . x)
	(apply cog-new-ast (cons JsonAstType x)))
(define-public PythonAstType (cog-type->int 'PythonAst))
(define-public (PythonAst . x)
	(apply cog-new-ast (cons PythonAstType x)))
(define-public DirectlyEvaluatableLinkType (cog-type->int 'DirectlyEvaluatableLink))
(define-public (DirectlyEvaluatableLink . x)
	(apply cog-new-link (cons DirectlyEvaluatableLinkType x)))
(set-procedure-property! DirectlyEvaluatableLink 'documentation
" DirectlyEvaluatableLink -- See https://wiki.opencog.org/w/DirectlyEvaluatableLink for documentation.")
(define-public (DirectlyEvaluatable . x)
	(apply cog-new-link (cons DirectlyEvaluatableLinkType x)))
(set-procedure-property! DirectlyEvaluatable 'documentation
" DirectlyEvaluatableLink -- See https://wiki.opencog.org/w/DirectlyEvaluatableLink for documentation.")
(define-public ImplicationLinkType (cog-type->int 'ImplicationLink))
(define-public (ImplicationLink . x)
	(apply cog-new-link (cons ImplicationLinkType x)))
(set-procedure-property! ImplicationLink 'documentation
" ImplicationLink -- See https://wiki.opencog.org/w/ImplicationLink for documentation.")
(define-public (Implication . x)
	(apply cog-new-link (cons ImplicationLinkType x)))
(set-procedure-property! Implication 'documentation
" ImplicationLink -- See https://wiki.opencog.org/w/ImplicationLink for documentation.")
(define-public InheritanceLinkType (cog-type->int 'InheritanceLink))
(define-public (InheritanceLink . x)
	(apply cog-new-link (cons InheritanceLinkType x)))
(set-procedure-property! InheritanceLink 'documentation
" InheritanceLink -- See https://wiki.opencog.org/w/InheritanceLink for documentation.")
(define-public (Inheritance . x)
	(apply cog-new-link (cons InheritanceLinkType x)))
(set-procedure-property! Inheritance 'documentation
" InheritanceLink -- See https://wiki.opencog.org/w/InheritanceLink for documentation.")
(define-public ForAllLinkType (cog-type->int 'ForAllLink))
(define-public (ForAllLink . x)
	(apply cog-new-link (cons ForAllLinkType x)))
(set-procedure-property! ForAllLink 'documentation
" ForAllLink -- See https://wiki.opencog.org/w/ForAllLink for documentation.")
(define-public (ForAll . x)
	(apply cog-new-link (cons ForAllLinkType x)))
(set-procedure-property! ForAll 'documentation
" ForAllLink -- See https://wiki.opencog.org/w/ForAllLink for documentation.")
(define-public ExistsLinkType (cog-type->int 'ExistsLink))
(define-public (ExistsLink . x)
	(apply cog-new-link (cons ExistsLinkType x)))
(set-procedure-property! ExistsLink 'documentation
" ExistsLink -- See https://wiki.opencog.org/w/ExistsLink for documentation.")
(define-public (Exists . x)
	(apply cog-new-link (cons ExistsLinkType x)))
(set-procedure-property! Exists 'documentation
" ExistsLink -- See https://wiki.opencog.org/w/ExistsLink for documentation.")
(define-public AssociativeLinkType (cog-type->int 'AssociativeLink))
(define-public (AssociativeLink . x)
	(apply cog-new-link (cons AssociativeLinkType x)))
(set-procedure-property! AssociativeLink 'documentation
" AssociativeLink -- See https://wiki.opencog.org/w/AssociativeLink for documentation.")
(define-public (Associative . x)
	(apply cog-new-link (cons AssociativeLinkType x)))
(set-procedure-property! Associative 'documentation
" AssociativeLink -- See https://wiki.opencog.org/w/AssociativeLink for documentation.")
(define-public EquivalenceLinkType (cog-type->int 'EquivalenceLink))
(define-public (EquivalenceLink . x)
	(apply cog-new-link (cons EquivalenceLinkType x)))
(set-procedure-property! EquivalenceLink 'documentation
" EquivalenceLink -- See https://wiki.opencog.org/w/EquivalenceLink for documentation.")
(define-public (Equivalence . x)
	(apply cog-new-link (cons EquivalenceLinkType x)))
(set-procedure-property! Equivalence 'documentation
" EquivalenceLink -- See https://wiki.opencog.org/w/EquivalenceLink for documentation.")
(define-public ExecutionLinkType (cog-type->int 'ExecutionLink))
(define-public (ExecutionLink . x)
	(apply cog-new-link (cons ExecutionLinkType x)))
(set-procedure-property! ExecutionLink 'documentation
" ExecutionLink -- See https://wiki.opencog.org/w/ExecutionLink for documentation.")
(define-public (Execution . x)
	(apply cog-new-link (cons ExecutionLinkType x)))
(set-procedure-property! Execution 'documentation
" ExecutionLink -- See https://wiki.opencog.org/w/ExecutionLink for documentation.")
