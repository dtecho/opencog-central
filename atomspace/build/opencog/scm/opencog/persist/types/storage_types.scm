
; DO NOT EDIT THIS FILE! This file was automatically
; generated from atom definitions in
; /workspaces/opencog-central/atomspace/opencog/persist/storage/storage_types.script
; by the macro OPENCOG_SCM_ATOMTYPES
;
; This file contains basic scheme wrappers for atom creation.
;
(define-public StorageNodeType (cog-type->int 'StorageNode))
(define-public (StorageNode . x)
	(apply cog-new-node (cons StorageNodeType x)))
(set-procedure-property! StorageNode 'documentation
" StorageNode -- See https://wiki.opencog.org/w/StorageNode for documentation.")
(define-public (Storage . x)
	(apply cog-new-node (cons StorageNodeType x)))
(set-procedure-property! Storage 'documentation
" StorageNode -- See https://wiki.opencog.org/w/StorageNode for documentation.")
(define-public PostgresStorageNodeType (cog-type->int 'PostgresStorageNode))
(define-public (PostgresStorageNode . x)
	(apply cog-new-node (cons PostgresStorageNodeType x)))
(set-procedure-property! PostgresStorageNode 'documentation
" PostgresStorageNode -- See https://wiki.opencog.org/w/PostgresStorageNode for documentation.")
(define-public (PostgresStorage . x)
	(apply cog-new-node (cons PostgresStorageNodeType x)))
(set-procedure-property! PostgresStorage 'documentation
" PostgresStorageNode -- See https://wiki.opencog.org/w/PostgresStorageNode for documentation.")
(define-public FileStorageNodeType (cog-type->int 'FileStorageNode))
(define-public (FileStorageNode . x)
	(apply cog-new-node (cons FileStorageNodeType x)))
(set-procedure-property! FileStorageNode 'documentation
" FileStorageNode -- See https://wiki.opencog.org/w/FileStorageNode for documentation.")
(define-public (FileStorage . x)
	(apply cog-new-node (cons FileStorageNodeType x)))
(set-procedure-property! FileStorage 'documentation
" FileStorageNode -- See https://wiki.opencog.org/w/FileStorageNode for documentation.")
(define-public MonoStorageNodeType (cog-type->int 'MonoStorageNode))
(define-public (MonoStorageNode . x)
	(apply cog-new-node (cons MonoStorageNodeType x)))
(set-procedure-property! MonoStorageNode 'documentation
" MonoStorageNode -- See https://wiki.opencog.org/w/MonoStorageNode for documentation.")
(define-public (MonoStorage . x)
	(apply cog-new-node (cons MonoStorageNodeType x)))
(set-procedure-property! MonoStorage 'documentation
" MonoStorageNode -- See https://wiki.opencog.org/w/MonoStorageNode for documentation.")
(define-public RocksStorageNodeType (cog-type->int 'RocksStorageNode))
(define-public (RocksStorageNode . x)
	(apply cog-new-node (cons RocksStorageNodeType x)))
(set-procedure-property! RocksStorageNode 'documentation
" RocksStorageNode -- See https://wiki.opencog.org/w/RocksStorageNode for documentation.")
(define-public (RocksStorage . x)
	(apply cog-new-node (cons RocksStorageNodeType x)))
(set-procedure-property! RocksStorage 'documentation
" RocksStorageNode -- See https://wiki.opencog.org/w/RocksStorageNode for documentation.")
(define-public CogSimpleStorageNodeType (cog-type->int 'CogSimpleStorageNode))
(define-public (CogSimpleStorageNode . x)
	(apply cog-new-node (cons CogSimpleStorageNodeType x)))
(set-procedure-property! CogSimpleStorageNode 'documentation
" CogSimpleStorageNode -- See https://wiki.opencog.org/w/CogSimpleStorageNode for documentation.")
(define-public (CogSimpleStorage . x)
	(apply cog-new-node (cons CogSimpleStorageNodeType x)))
(set-procedure-property! CogSimpleStorage 'documentation
" CogSimpleStorageNode -- See https://wiki.opencog.org/w/CogSimpleStorageNode for documentation.")
(define-public CogStorageNodeType (cog-type->int 'CogStorageNode))
(define-public (CogStorageNode . x)
	(apply cog-new-node (cons CogStorageNodeType x)))
(set-procedure-property! CogStorageNode 'documentation
" CogStorageNode -- See https://wiki.opencog.org/w/CogStorageNode for documentation.")
(define-public (CogStorage . x)
	(apply cog-new-node (cons CogStorageNodeType x)))
(set-procedure-property! CogStorage 'documentation
" CogStorageNode -- See https://wiki.opencog.org/w/CogStorageNode for documentation.")
(define-public ForeignStorageNodeType (cog-type->int 'ForeignStorageNode))
(define-public (ForeignStorageNode . x)
	(apply cog-new-node (cons ForeignStorageNodeType x)))
(set-procedure-property! ForeignStorageNode 'documentation
" ForeignStorageNode -- See https://wiki.opencog.org/w/ForeignStorageNode for documentation.")
(define-public (ForeignStorage . x)
	(apply cog-new-node (cons ForeignStorageNodeType x)))
(set-procedure-property! ForeignStorage 'documentation
" ForeignStorageNode -- See https://wiki.opencog.org/w/ForeignStorageNode for documentation.")
(define-public BridgeStorageNodeType (cog-type->int 'BridgeStorageNode))
(define-public (BridgeStorageNode . x)
	(apply cog-new-node (cons BridgeStorageNodeType x)))
(set-procedure-property! BridgeStorageNode 'documentation
" BridgeStorageNode -- See https://wiki.opencog.org/w/BridgeStorageNode for documentation.")
(define-public (BridgeStorage . x)
	(apply cog-new-node (cons BridgeStorageNodeType x)))
(set-procedure-property! BridgeStorage 'documentation
" BridgeStorageNode -- See https://wiki.opencog.org/w/BridgeStorageNode for documentation.")
(define-public ProxyNodeType (cog-type->int 'ProxyNode))
(define-public (ProxyNode . x)
	(apply cog-new-node (cons ProxyNodeType x)))
(set-procedure-property! ProxyNode 'documentation
" ProxyNode -- See https://wiki.opencog.org/w/ProxyNode for documentation.")
(define-public (Proxy . x)
	(apply cog-new-node (cons ProxyNodeType x)))
(set-procedure-property! Proxy 'documentation
" ProxyNode -- See https://wiki.opencog.org/w/ProxyNode for documentation.")
(define-public NullProxyNodeType (cog-type->int 'NullProxyNode))
(define-public (NullProxyNode . x)
	(apply cog-new-node (cons NullProxyNodeType x)))
(set-procedure-property! NullProxyNode 'documentation
" NullProxyNode -- See https://wiki.opencog.org/w/NullProxyNode for documentation.")
(define-public (NullProxy . x)
	(apply cog-new-node (cons NullProxyNodeType x)))
(set-procedure-property! NullProxy 'documentation
" NullProxyNode -- See https://wiki.opencog.org/w/NullProxyNode for documentation.")
(define-public ReadThruProxyNodeType (cog-type->int 'ReadThruProxyNode))
(define-public (ReadThruProxyNode . x)
	(apply cog-new-node (cons ReadThruProxyNodeType x)))
(set-procedure-property! ReadThruProxyNode 'documentation
" ReadThruProxyNode -- See https://wiki.opencog.org/w/ReadThruProxyNode for documentation.")
(define-public (ReadThruProxy . x)
	(apply cog-new-node (cons ReadThruProxyNodeType x)))
(set-procedure-property! ReadThruProxy 'documentation
" ReadThruProxyNode -- See https://wiki.opencog.org/w/ReadThruProxyNode for documentation.")
(define-public SequentialReadProxyNodeType (cog-type->int 'SequentialReadProxyNode))
(define-public (SequentialReadProxyNode . x)
	(apply cog-new-node (cons SequentialReadProxyNodeType x)))
(set-procedure-property! SequentialReadProxyNode 'documentation
" SequentialReadProxyNode -- See https://wiki.opencog.org/w/SequentialReadProxyNode for documentation.")
(define-public (SequentialReadProxy . x)
	(apply cog-new-node (cons SequentialReadProxyNodeType x)))
(set-procedure-property! SequentialReadProxy 'documentation
" SequentialReadProxyNode -- See https://wiki.opencog.org/w/SequentialReadProxyNode for documentation.")
(define-public WriteThruProxyNodeType (cog-type->int 'WriteThruProxyNode))
(define-public (WriteThruProxyNode . x)
	(apply cog-new-node (cons WriteThruProxyNodeType x)))
(set-procedure-property! WriteThruProxyNode 'documentation
" WriteThruProxyNode -- See https://wiki.opencog.org/w/WriteThruProxyNode for documentation.")
(define-public (WriteThruProxy . x)
	(apply cog-new-node (cons WriteThruProxyNodeType x)))
(set-procedure-property! WriteThruProxy 'documentation
" WriteThruProxyNode -- See https://wiki.opencog.org/w/WriteThruProxyNode for documentation.")
(define-public ReadWriteProxyNodeType (cog-type->int 'ReadWriteProxyNode))
(define-public (ReadWriteProxyNode . x)
	(apply cog-new-node (cons ReadWriteProxyNodeType x)))
(set-procedure-property! ReadWriteProxyNode 'documentation
" ReadWriteProxyNode -- See https://wiki.opencog.org/w/ReadWriteProxyNode for documentation.")
(define-public (ReadWriteProxy . x)
	(apply cog-new-node (cons ReadWriteProxyNodeType x)))
(set-procedure-property! ReadWriteProxy 'documentation
" ReadWriteProxyNode -- See https://wiki.opencog.org/w/ReadWriteProxyNode for documentation.")
(define-public WriteBufferProxyNodeType (cog-type->int 'WriteBufferProxyNode))
(define-public (WriteBufferProxyNode . x)
	(apply cog-new-node (cons WriteBufferProxyNodeType x)))
(set-procedure-property! WriteBufferProxyNode 'documentation
" WriteBufferProxyNode -- See https://wiki.opencog.org/w/WriteBufferProxyNode for documentation.")
(define-public (WriteBufferProxy . x)
	(apply cog-new-node (cons WriteBufferProxyNodeType x)))
(set-procedure-property! WriteBufferProxy 'documentation
" WriteBufferProxyNode -- See https://wiki.opencog.org/w/WriteBufferProxyNode for documentation.")
(define-public CachingProxyNodeType (cog-type->int 'CachingProxyNode))
(define-public (CachingProxyNode . x)
	(apply cog-new-node (cons CachingProxyNodeType x)))
(set-procedure-property! CachingProxyNode 'documentation
" CachingProxyNode -- See https://wiki.opencog.org/w/CachingProxyNode for documentation.")
(define-public (CachingProxy . x)
	(apply cog-new-node (cons CachingProxyNodeType x)))
(set-procedure-property! CachingProxy 'documentation
" CachingProxyNode -- See https://wiki.opencog.org/w/CachingProxyNode for documentation.")
(define-public DynamicDataProxyNodeType (cog-type->int 'DynamicDataProxyNode))
(define-public (DynamicDataProxyNode . x)
	(apply cog-new-node (cons DynamicDataProxyNodeType x)))
(set-procedure-property! DynamicDataProxyNode 'documentation
" DynamicDataProxyNode -- See https://wiki.opencog.org/w/DynamicDataProxyNode for documentation.")
(define-public (DynamicDataProxy . x)
	(apply cog-new-node (cons DynamicDataProxyNodeType x)))
(set-procedure-property! DynamicDataProxy 'documentation
" DynamicDataProxyNode -- See https://wiki.opencog.org/w/DynamicDataProxyNode for documentation.")
(define-public ProxyParametersLinkType (cog-type->int 'ProxyParametersLink))
(define-public (ProxyParametersLink . x)
	(apply cog-new-link (cons ProxyParametersLinkType x)))
(set-procedure-property! ProxyParametersLink 'documentation
" ProxyParametersLink -- See https://wiki.opencog.org/w/ProxyParametersLink for documentation.")
(define-public (ProxyParameters . x)
	(apply cog-new-link (cons ProxyParametersLinkType x)))
(set-procedure-property! ProxyParameters 'documentation
" ProxyParametersLink -- See https://wiki.opencog.org/w/ProxyParametersLink for documentation.")
(define-public FetchValueOfLinkType (cog-type->int 'FetchValueOfLink))
(define-public (FetchValueOfLink . x)
	(apply cog-new-link (cons FetchValueOfLinkType x)))
(set-procedure-property! FetchValueOfLink 'documentation
" FetchValueOfLink -- See https://wiki.opencog.org/w/FetchValueOfLink for documentation.")
(define-public (FetchValueOf . x)
	(apply cog-new-link (cons FetchValueOfLinkType x)))
(set-procedure-property! FetchValueOf 'documentation
" FetchValueOfLink -- See https://wiki.opencog.org/w/FetchValueOfLink for documentation.")
(define-public StoreValueOfLinkType (cog-type->int 'StoreValueOfLink))
(define-public (StoreValueOfLink . x)
	(apply cog-new-link (cons StoreValueOfLinkType x)))
(set-procedure-property! StoreValueOfLink 'documentation
" StoreValueOfLink -- See https://wiki.opencog.org/w/StoreValueOfLink for documentation.")
(define-public (StoreValueOf . x)
	(apply cog-new-link (cons StoreValueOfLinkType x)))
(set-procedure-property! StoreValueOf 'documentation
" StoreValueOfLink -- See https://wiki.opencog.org/w/StoreValueOfLink for documentation.")
